// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'schema.schema.gql.dart';

// **************************************************************************
// BuiltValueGenerator
// **************************************************************************

const GSortEnumType _$gSortEnumTypeASC = const GSortEnumType._('ASC');
const GSortEnumType _$gSortEnumTypeDESC = const GSortEnumType._('DESC');

GSortEnumType _$gSortEnumTypeValueOf(String name) {
  switch (name) {
    case 'ASC':
      return _$gSortEnumTypeASC;
    case 'DESC':
      return _$gSortEnumTypeDESC;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GSortEnumType> _$gSortEnumTypeValues =
    new BuiltSet<GSortEnumType>(const <GSortEnumType>[
  _$gSortEnumTypeASC,
  _$gSortEnumTypeDESC,
]);

const GUploadType _$gUploadTypeCAR = const GUploadType._('CAR');
const GUploadType _$gUploadTypePROFILE_PICTURE =
    const GUploadType._('PROFILE_PICTURE');
const GUploadType _$gUploadTypeDOCUMENT = const GUploadType._('DOCUMENT');

GUploadType _$gUploadTypeValueOf(String name) {
  switch (name) {
    case 'CAR':
      return _$gUploadTypeCAR;
    case 'PROFILE_PICTURE':
      return _$gUploadTypePROFILE_PICTURE;
    case 'DOCUMENT':
      return _$gUploadTypeDOCUMENT;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GUploadType> _$gUploadTypeValues =
    new BuiltSet<GUploadType>(const <GUploadType>[
  _$gUploadTypeCAR,
  _$gUploadTypePROFILE_PICTURE,
  _$gUploadTypeDOCUMENT,
]);

const GCommandType _$gCommandTypeTRANSACTION_REVERSAL =
    const GCommandType._('TRANSACTION_REVERSAL');
const GCommandType _$gCommandTypeSALARY_PAYMENT =
    const GCommandType._('SALARY_PAYMENT');
const GCommandType _$gCommandTypeBUSINESS_PAYMENT =
    const GCommandType._('BUSINESS_PAYMENT');
const GCommandType _$gCommandTypePROMOTION_PAYMENT =
    const GCommandType._('PROMOTION_PAYMENT');
const GCommandType _$gCommandTypeACCOUNT_BALANCE =
    const GCommandType._('ACCOUNT_BALANCE');
const GCommandType _$gCommandTypeCUSTOMER_PAY_BILL_ONLINE =
    const GCommandType._('CUSTOMER_PAY_BILL_ONLINE');
const GCommandType _$gCommandTypeTRANSACTION_STATUS_QUERY =
    const GCommandType._('TRANSACTION_STATUS_QUERY');
const GCommandType _$gCommandTypeCHECK_IDENTITY =
    const GCommandType._('CHECK_IDENTITY');
const GCommandType _$gCommandTypeBUSINESS_PAY_BILL =
    const GCommandType._('BUSINESS_PAY_BILL');
const GCommandType _$gCommandTypeBUSINESS_BUY_GOODS =
    const GCommandType._('BUSINESS_BUY_GOODS');
const GCommandType _$gCommandTypeDISBURSE_FUNDS_TO_BUSINESS =
    const GCommandType._('DISBURSE_FUNDS_TO_BUSINESS');
const GCommandType _$gCommandTypeBUSINESS_TO_BUSINESS_TRANSFER =
    const GCommandType._('BUSINESS_TO_BUSINESS_TRANSFER');
const GCommandType _$gCommandTypeBUSINESS_TRANSFER_FROM_MMFTO_UTILITY =
    const GCommandType._('BUSINESS_TRANSFER_FROM_MMFTO_UTILITY');

GCommandType _$gCommandTypeValueOf(String name) {
  switch (name) {
    case 'TRANSACTION_REVERSAL':
      return _$gCommandTypeTRANSACTION_REVERSAL;
    case 'SALARY_PAYMENT':
      return _$gCommandTypeSALARY_PAYMENT;
    case 'BUSINESS_PAYMENT':
      return _$gCommandTypeBUSINESS_PAYMENT;
    case 'PROMOTION_PAYMENT':
      return _$gCommandTypePROMOTION_PAYMENT;
    case 'ACCOUNT_BALANCE':
      return _$gCommandTypeACCOUNT_BALANCE;
    case 'CUSTOMER_PAY_BILL_ONLINE':
      return _$gCommandTypeCUSTOMER_PAY_BILL_ONLINE;
    case 'TRANSACTION_STATUS_QUERY':
      return _$gCommandTypeTRANSACTION_STATUS_QUERY;
    case 'CHECK_IDENTITY':
      return _$gCommandTypeCHECK_IDENTITY;
    case 'BUSINESS_PAY_BILL':
      return _$gCommandTypeBUSINESS_PAY_BILL;
    case 'BUSINESS_BUY_GOODS':
      return _$gCommandTypeBUSINESS_BUY_GOODS;
    case 'DISBURSE_FUNDS_TO_BUSINESS':
      return _$gCommandTypeDISBURSE_FUNDS_TO_BUSINESS;
    case 'BUSINESS_TO_BUSINESS_TRANSFER':
      return _$gCommandTypeBUSINESS_TO_BUSINESS_TRANSFER;
    case 'BUSINESS_TRANSFER_FROM_MMFTO_UTILITY':
      return _$gCommandTypeBUSINESS_TRANSFER_FROM_MMFTO_UTILITY;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GCommandType> _$gCommandTypeValues =
    new BuiltSet<GCommandType>(const <GCommandType>[
  _$gCommandTypeTRANSACTION_REVERSAL,
  _$gCommandTypeSALARY_PAYMENT,
  _$gCommandTypeBUSINESS_PAYMENT,
  _$gCommandTypePROMOTION_PAYMENT,
  _$gCommandTypeACCOUNT_BALANCE,
  _$gCommandTypeCUSTOMER_PAY_BILL_ONLINE,
  _$gCommandTypeTRANSACTION_STATUS_QUERY,
  _$gCommandTypeCHECK_IDENTITY,
  _$gCommandTypeBUSINESS_PAY_BILL,
  _$gCommandTypeBUSINESS_BUY_GOODS,
  _$gCommandTypeDISBURSE_FUNDS_TO_BUSINESS,
  _$gCommandTypeBUSINESS_TO_BUSINESS_TRANSFER,
  _$gCommandTypeBUSINESS_TRANSFER_FROM_MMFTO_UTILITY,
]);

const GApplyPolicy _$gApplyPolicyBEFORE_RESOLVER =
    const GApplyPolicy._('BEFORE_RESOLVER');
const GApplyPolicy _$gApplyPolicyAFTER_RESOLVER =
    const GApplyPolicy._('AFTER_RESOLVER');

GApplyPolicy _$gApplyPolicyValueOf(String name) {
  switch (name) {
    case 'BEFORE_RESOLVER':
      return _$gApplyPolicyBEFORE_RESOLVER;
    case 'AFTER_RESOLVER':
      return _$gApplyPolicyAFTER_RESOLVER;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GApplyPolicy> _$gApplyPolicyValues =
    new BuiltSet<GApplyPolicy>(const <GApplyPolicy>[
  _$gApplyPolicyBEFORE_RESOLVER,
  _$gApplyPolicyAFTER_RESOLVER,
]);

Serializer<GSafiriCarUserFilterInput> _$gSafiriCarUserFilterInputSerializer =
    new _$GSafiriCarUserFilterInputSerializer();
Serializer<GSafiriCarUserSortInput> _$gSafiriCarUserSortInputSerializer =
    new _$GSafiriCarUserSortInputSerializer();
Serializer<GLocationFilterInput> _$gLocationFilterInputSerializer =
    new _$GLocationFilterInputSerializer();
Serializer<GLocationSortInput> _$gLocationSortInputSerializer =
    new _$GLocationSortInputSerializer();
Serializer<GAPIRequestFilterInput> _$gAPIRequestFilterInputSerializer =
    new _$GAPIRequestFilterInputSerializer();
Serializer<GAPIRequestSortInput> _$gAPIRequestSortInputSerializer =
    new _$GAPIRequestSortInputSerializer();
Serializer<GRideFilterInput> _$gRideFilterInputSerializer =
    new _$GRideFilterInputSerializer();
Serializer<GRideSortInput> _$gRideSortInputSerializer =
    new _$GRideSortInputSerializer();
Serializer<GUserRidesFilterInput> _$gUserRidesFilterInputSerializer =
    new _$GUserRidesFilterInputSerializer();
Serializer<GUserRidesSortInput> _$gUserRidesSortInputSerializer =
    new _$GUserRidesSortInputSerializer();
Serializer<GRideTransactionFilterInput>
    _$gRideTransactionFilterInputSerializer =
    new _$GRideTransactionFilterInputSerializer();
Serializer<GRideTransactionSortInput> _$gRideTransactionSortInputSerializer =
    new _$GRideTransactionSortInputSerializer();
Serializer<GPamrideMessageFilterInput> _$gPamrideMessageFilterInputSerializer =
    new _$GPamrideMessageFilterInputSerializer();
Serializer<GPamrideMessageSortInput> _$gPamrideMessageSortInputSerializer =
    new _$GPamrideMessageSortInputSerializer();
Serializer<GCarFilterInput> _$gCarFilterInputSerializer =
    new _$GCarFilterInputSerializer();
Serializer<GCarSortInput> _$gCarSortInputSerializer =
    new _$GCarSortInputSerializer();
Serializer<GStringOperationFilterInput>
    _$gStringOperationFilterInputSerializer =
    new _$GStringOperationFilterInputSerializer();
Serializer<GListFilterInputTypeOfCarFilterInput>
    _$gListFilterInputTypeOfCarFilterInputSerializer =
    new _$GListFilterInputTypeOfCarFilterInputSerializer();
Serializer<GIdentificationDocumentFilterInput>
    _$gIdentificationDocumentFilterInputSerializer =
    new _$GIdentificationDocumentFilterInputSerializer();
Serializer<GComparableNullableOfDateTimeOperationFilterInput>
    _$gComparableNullableOfDateTimeOperationFilterInputSerializer =
    new _$GComparableNullableOfDateTimeOperationFilterInputSerializer();
Serializer<GBooleanOperationFilterInput>
    _$gBooleanOperationFilterInputSerializer =
    new _$GBooleanOperationFilterInputSerializer();
Serializer<GComparableInt32OperationFilterInput>
    _$gComparableInt32OperationFilterInputSerializer =
    new _$GComparableInt32OperationFilterInputSerializer();
Serializer<GComparableDoubleOperationFilterInput>
    _$gComparableDoubleOperationFilterInputSerializer =
    new _$GComparableDoubleOperationFilterInputSerializer();
Serializer<GComparableSingleOperationFilterInput>
    _$gComparableSingleOperationFilterInputSerializer =
    new _$GComparableSingleOperationFilterInputSerializer();
Serializer<GDeviceFilterInput> _$gDeviceFilterInputSerializer =
    new _$GDeviceFilterInputSerializer();
Serializer<GListFilterInputTypeOfUserRidesFilterInput>
    _$gListFilterInputTypeOfUserRidesFilterInputSerializer =
    new _$GListFilterInputTypeOfUserRidesFilterInputSerializer();
Serializer<GListFilterInputTypeOfUserRatingFilterInput>
    _$gListFilterInputTypeOfUserRatingFilterInputSerializer =
    new _$GListFilterInputTypeOfUserRatingFilterInputSerializer();
Serializer<GListFilterInputTypeOfFrequentRouteFilterInput>
    _$gListFilterInputTypeOfFrequentRouteFilterInputSerializer =
    new _$GListFilterInputTypeOfFrequentRouteFilterInputSerializer();
Serializer<GListFilterInputTypeOfSafiriCarUserFilterInput>
    _$gListFilterInputTypeOfSafiriCarUserFilterInputSerializer =
    new _$GListFilterInputTypeOfSafiriCarUserFilterInputSerializer();
Serializer<GComparableNullableOfDateTimeOffsetOperationFilterInput>
    _$gComparableNullableOfDateTimeOffsetOperationFilterInputSerializer =
    new _$GComparableNullableOfDateTimeOffsetOperationFilterInputSerializer();
Serializer<GSortEnumType> _$gSortEnumTypeSerializer =
    new _$GSortEnumTypeSerializer();
Serializer<GIdentificationDocumentSortInput>
    _$gIdentificationDocumentSortInputSerializer =
    new _$GIdentificationDocumentSortInputSerializer();
Serializer<GDeviceSortInput> _$gDeviceSortInputSerializer =
    new _$GDeviceSortInputSerializer();
Serializer<GCountryFilterInput> _$gCountryFilterInputSerializer =
    new _$GCountryFilterInputSerializer();
Serializer<GCountrySortInput> _$gCountrySortInputSerializer =
    new _$GCountrySortInputSerializer();
Serializer<GComparableDateTimeOperationFilterInput>
    _$gComparableDateTimeOperationFilterInputSerializer =
    new _$GComparableDateTimeOperationFilterInputSerializer();
Serializer<GSeatFilterInput> _$gSeatFilterInputSerializer =
    new _$GSeatFilterInputSerializer();
Serializer<GComparableDecimalOperationFilterInput>
    _$gComparableDecimalOperationFilterInputSerializer =
    new _$GComparableDecimalOperationFilterInputSerializer();
Serializer<GComparableNullableOfTimeSpanOperationFilterInput>
    _$gComparableNullableOfTimeSpanOperationFilterInputSerializer =
    new _$GComparableNullableOfTimeSpanOperationFilterInputSerializer();
Serializer<GComparableNullableOfInt32OperationFilterInput>
    _$gComparableNullableOfInt32OperationFilterInputSerializer =
    new _$GComparableNullableOfInt32OperationFilterInputSerializer();
Serializer<GListFilterInputTypeOfRideTransactionFilterInput>
    _$gListFilterInputTypeOfRideTransactionFilterInputSerializer =
    new _$GListFilterInputTypeOfRideTransactionFilterInputSerializer();
Serializer<GSeatSortInput> _$gSeatSortInputSerializer =
    new _$GSeatSortInputSerializer();
Serializer<GListFilterInputTypeOfRideFilterInput>
    _$gListFilterInputTypeOfRideFilterInputSerializer =
    new _$GListFilterInputTypeOfRideFilterInputSerializer();
Serializer<GUserRatingFilterInput> _$gUserRatingFilterInputSerializer =
    new _$GUserRatingFilterInputSerializer();
Serializer<GFrequentRouteFilterInput> _$gFrequentRouteFilterInputSerializer =
    new _$GFrequentRouteFilterInputSerializer();
Serializer<GComparableTimeSpanOperationFilterInput>
    _$gComparableTimeSpanOperationFilterInputSerializer =
    new _$GComparableTimeSpanOperationFilterInputSerializer();
Serializer<GColorCustomFilterInput> _$gColorCustomFilterInputSerializer =
    new _$GColorCustomFilterInputSerializer();
Serializer<GCreateRideRequestInput> _$gCreateRideRequestInputSerializer =
    new _$GCreateRideRequestInputSerializer();
Serializer<GContactUsRequestInput> _$gContactUsRequestInputSerializer =
    new _$GContactUsRequestInputSerializer();
Serializer<GToggleUserStatusRequestInput>
    _$gToggleUserStatusRequestInputSerializer =
    new _$GToggleUserStatusRequestInputSerializer();
Serializer<GUpdateIdentificationDocumentRequestInput>
    _$gUpdateIdentificationDocumentRequestInputSerializer =
    new _$GUpdateIdentificationDocumentRequestInputSerializer();
Serializer<GUpdateRequestInput> _$gUpdateRequestInputSerializer =
    new _$GUpdateRequestInputSerializer();
Serializer<GRegisterRequestInput> _$gRegisterRequestInputSerializer =
    new _$GRegisterRequestInputSerializer();
Serializer<GResetPasswordRequestInput> _$gResetPasswordRequestInputSerializer =
    new _$GResetPasswordRequestInputSerializer();
Serializer<GForgotPasswordRequestInput>
    _$gForgotPasswordRequestInputSerializer =
    new _$GForgotPasswordRequestInputSerializer();
Serializer<GUpdateUserRolesRequestInput>
    _$gUpdateUserRolesRequestInputSerializer =
    new _$GUpdateUserRolesRequestInputSerializer();
Serializer<GRoleClaimRequestInput> _$gRoleClaimRequestInputSerializer =
    new _$GRoleClaimRequestInputSerializer();
Serializer<GPermissionRequestInput> _$gPermissionRequestInputSerializer =
    new _$GPermissionRequestInputSerializer();
Serializer<GRoleRequestInput> _$gRoleRequestInputSerializer =
    new _$GRoleRequestInputSerializer();
Serializer<GFrequentRouteInput> _$gFrequentRouteInputSerializer =
    new _$GFrequentRouteInputSerializer();
Serializer<GResfreshTokenRequestInput> _$gResfreshTokenRequestInputSerializer =
    new _$GResfreshTokenRequestInputSerializer();
Serializer<GTokenRequestInput> _$gTokenRequestInputSerializer =
    new _$GTokenRequestInputSerializer();
Serializer<GUpdateProfileRequestInput> _$gUpdateProfileRequestInputSerializer =
    new _$GUpdateProfileRequestInputSerializer();
Serializer<GPasswordResetRequestByPhoneInput>
    _$gPasswordResetRequestByPhoneInputSerializer =
    new _$GPasswordResetRequestByPhoneInputSerializer();
Serializer<GChangePasswordRequestInput>
    _$gChangePasswordRequestInputSerializer =
    new _$GChangePasswordRequestInputSerializer();
Serializer<GTransactRequestInput> _$gTransactRequestInputSerializer =
    new _$GTransactRequestInputSerializer();
Serializer<GTransactB2CRequestInput> _$gTransactB2CRequestInputSerializer =
    new _$GTransactB2CRequestInputSerializer();
Serializer<GTransactionStatusRequestDtoInput>
    _$gTransactionStatusRequestDtoInputSerializer =
    new _$GTransactionStatusRequestDtoInputSerializer();
Serializer<GReverseRequestInput> _$gReverseRequestInputSerializer =
    new _$GReverseRequestInputSerializer();
Serializer<GChartDtoInput> _$gChartDtoInputSerializer =
    new _$GChartDtoInputSerializer();
Serializer<GSubscriberEmailInput> _$gSubscriberEmailInputSerializer =
    new _$GSubscriberEmailInputSerializer();
Serializer<GUploadRequestInput> _$gUploadRequestInputSerializer =
    new _$GUploadRequestInputSerializer();
Serializer<GUploadRequestFlInput> _$gUploadRequestFlInputSerializer =
    new _$GUploadRequestFlInputSerializer();
Serializer<GDownloadRequestInput> _$gDownloadRequestInputSerializer =
    new _$GDownloadRequestInputSerializer();
Serializer<GCarInput> _$gCarInputSerializer = new _$GCarInputSerializer();
Serializer<GCarUpdateDtoInput> _$gCarUpdateDtoInputSerializer =
    new _$GCarUpdateDtoInputSerializer();
Serializer<GRideInput> _$gRideInputSerializer = new _$GRideInputSerializer();
Serializer<GSafiriCarUserInput> _$gSafiriCarUserInputSerializer =
    new _$GSafiriCarUserInputSerializer();
Serializer<GUploadType> _$gUploadTypeSerializer = new _$GUploadTypeSerializer();
Serializer<GCommandType> _$gCommandTypeSerializer =
    new _$GCommandTypeSerializer();
Serializer<GColorCustomInput> _$gColorCustomInputSerializer =
    new _$GColorCustomInputSerializer();
Serializer<GUserRoleModelInput> _$gUserRoleModelInputSerializer =
    new _$GUserRoleModelInputSerializer();
Serializer<GDeviceDtoInput> _$gDeviceDtoInputSerializer =
    new _$GDeviceDtoInputSerializer();
Serializer<GLocationDtoInput> _$gLocationDtoInputSerializer =
    new _$GLocationDtoInputSerializer();
Serializer<GIdentificationDocumentInput>
    _$gIdentificationDocumentInputSerializer =
    new _$GIdentificationDocumentInputSerializer();
Serializer<GSeatInput> _$gSeatInputSerializer = new _$GSeatInputSerializer();
Serializer<GApplyPolicy> _$gApplyPolicySerializer =
    new _$GApplyPolicySerializer();
Serializer<GCountryDtoInput> _$gCountryDtoInputSerializer =
    new _$GCountryDtoInputSerializer();
Serializer<GUserRatingInput> _$gUserRatingInputSerializer =
    new _$GUserRatingInputSerializer();
Serializer<GDeviceInput> _$gDeviceInputSerializer =
    new _$GDeviceInputSerializer();
Serializer<GLocationInput> _$gLocationInputSerializer =
    new _$GLocationInputSerializer();
Serializer<GRideTransactionInput> _$gRideTransactionInputSerializer =
    new _$GRideTransactionInputSerializer();
Serializer<GUserRidesInput> _$gUserRidesInputSerializer =
    new _$GUserRidesInputSerializer();
Serializer<GCountryInput> _$gCountryInputSerializer =
    new _$GCountryInputSerializer();

class _$GSafiriCarUserFilterInputSerializer
    implements StructuredSerializer<GSafiriCarUserFilterInput> {
  @override
  final Iterable<Type> types = const [
    GSafiriCarUserFilterInput,
    _$GSafiriCarUserFilterInput
  ];
  @override
  final String wireName = 'GSafiriCarUserFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GSafiriCarUserFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.and;
    if (value != null) {
      result
        ..add('and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GSafiriCarUserFilterInput)])));
    }
    value = object.or;
    if (value != null) {
      result
        ..add('or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GSafiriCarUserFilterInput)])));
    }
    value = object.firstName;
    if (value != null) {
      result
        ..add('firstName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.lastName;
    if (value != null) {
      result
        ..add('lastName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.nationalId;
    if (value != null) {
      result
        ..add('nationalId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.ownedCars;
    if (value != null) {
      result
        ..add('ownedCars')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GListFilterInputTypeOfCarFilterInput)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.profilePictureDataUrl;
    if (value != null) {
      result
        ..add('profilePictureDataUrl')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.referalCode;
    if (value != null) {
      result
        ..add('referalCode')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.identificationDocument;
    if (value != null) {
      result
        ..add('identificationDocument')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GIdentificationDocumentFilterInput)));
    }
    value = object.createdOn;
    if (value != null) {
      result
        ..add('createdOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfDateTimeOperationFilterInput)));
    }
    value = object.lastModifiedBy;
    if (value != null) {
      result
        ..add('lastModifiedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.lastModifiedOn;
    if (value != null) {
      result
        ..add('lastModifiedOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfDateTimeOperationFilterInput)));
    }
    value = object.isDeleted;
    if (value != null) {
      result
        ..add('isDeleted')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GBooleanOperationFilterInput)));
    }
    value = object.deletedOn;
    if (value != null) {
      result
        ..add('deletedOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfDateTimeOperationFilterInput)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GBooleanOperationFilterInput)));
    }
    value = object.refreshToken;
    if (value != null) {
      result
        ..add('refreshToken')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.role;
    if (value != null) {
      result
        ..add('role')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.refreshTokenExpiryTime;
    if (value != null) {
      result
        ..add('refreshTokenExpiryTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfDateTimeOperationFilterInput)));
    }
    value = object.totalRating;
    if (value != null) {
      result
        ..add('totalRating')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.averageRating;
    if (value != null) {
      result
        ..add('averageRating')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableDoubleOperationFilterInput)));
    }
    value = object.tripsCreated;
    if (value != null) {
      result
        ..add('tripsCreated')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.tripsCompleted;
    if (value != null) {
      result
        ..add('tripsCompleted')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.tripsCancelled;
    if (value != null) {
      result
        ..add('tripsCancelled')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.isVerified;
    if (value != null) {
      result
        ..add('isVerified')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GBooleanOperationFilterInput)));
    }
    value = object.aboutMe;
    if (value != null) {
      result
        ..add('aboutMe')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.loyaltyPoints;
    if (value != null) {
      result
        ..add('loyaltyPoints')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableSingleOperationFilterInput)));
    }
    value = object.location;
    if (value != null) {
      result
        ..add('location')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GLocationFilterInput)));
    }
    value = object.device;
    if (value != null) {
      result
        ..add('device')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDeviceFilterInput)));
    }
    value = object.rides;
    if (value != null) {
      result
        ..add('rides')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GListFilterInputTypeOfUserRidesFilterInput)));
    }
    value = object.userRatings;
    if (value != null) {
      result
        ..add('userRatings')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GListFilterInputTypeOfUserRatingFilterInput)));
    }
    value = object.frequentRoutes;
    if (value != null) {
      result
        ..add('frequentRoutes')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GListFilterInputTypeOfFrequentRouteFilterInput)));
    }
    value = object.userReferals;
    if (value != null) {
      result
        ..add('userReferals')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GListFilterInputTypeOfSafiriCarUserFilterInput)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.userName;
    if (value != null) {
      result
        ..add('userName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.normalizedUserName;
    if (value != null) {
      result
        ..add('normalizedUserName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.normalizedEmail;
    if (value != null) {
      result
        ..add('normalizedEmail')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.emailConfirmed;
    if (value != null) {
      result
        ..add('emailConfirmed')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GBooleanOperationFilterInput)));
    }
    value = object.passwordHash;
    if (value != null) {
      result
        ..add('passwordHash')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.securityStamp;
    if (value != null) {
      result
        ..add('securityStamp')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.concurrencyStamp;
    if (value != null) {
      result
        ..add('concurrencyStamp')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.phoneNumber;
    if (value != null) {
      result
        ..add('phoneNumber')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.phoneNumberConfirmed;
    if (value != null) {
      result
        ..add('phoneNumberConfirmed')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GBooleanOperationFilterInput)));
    }
    value = object.twoFactorEnabled;
    if (value != null) {
      result
        ..add('twoFactorEnabled')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GBooleanOperationFilterInput)));
    }
    value = object.lockoutEnd;
    if (value != null) {
      result
        ..add('lockoutEnd')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfDateTimeOffsetOperationFilterInput)));
    }
    value = object.lockoutEnabled;
    if (value != null) {
      result
        ..add('lockoutEnabled')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GBooleanOperationFilterInput)));
    }
    value = object.accessFailedCount;
    if (value != null) {
      result
        ..add('accessFailedCount')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    return result;
  }

  @override
  GSafiriCarUserFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GSafiriCarUserFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'and':
          result.and.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GSafiriCarUserFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'or':
          result.or.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GSafiriCarUserFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'firstName':
          result.firstName.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'lastName':
          result.lastName.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'nationalId':
          result.nationalId.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'ownedCars':
          result.ownedCars.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GListFilterInputTypeOfCarFilterInput))!
              as GListFilterInputTypeOfCarFilterInput);
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'profilePictureDataUrl':
          result.profilePictureDataUrl.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'referalCode':
          result.referalCode.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'identificationDocument':
          result.identificationDocument.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GIdentificationDocumentFilterInput))!
              as GIdentificationDocumentFilterInput);
          break;
        case 'createdOn':
          result.createdOn.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfDateTimeOperationFilterInput))!
              as GComparableNullableOfDateTimeOperationFilterInput);
          break;
        case 'lastModifiedBy':
          result.lastModifiedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'lastModifiedOn':
          result.lastModifiedOn.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfDateTimeOperationFilterInput))!
              as GComparableNullableOfDateTimeOperationFilterInput);
          break;
        case 'isDeleted':
          result.isDeleted.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBooleanOperationFilterInput))!
              as GBooleanOperationFilterInput);
          break;
        case 'deletedOn':
          result.deletedOn.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfDateTimeOperationFilterInput))!
              as GComparableNullableOfDateTimeOperationFilterInput);
          break;
        case 'isActive':
          result.isActive.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBooleanOperationFilterInput))!
              as GBooleanOperationFilterInput);
          break;
        case 'refreshToken':
          result.refreshToken.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'role':
          result.role.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'refreshTokenExpiryTime':
          result.refreshTokenExpiryTime.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfDateTimeOperationFilterInput))!
              as GComparableNullableOfDateTimeOperationFilterInput);
          break;
        case 'totalRating':
          result.totalRating.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'averageRating':
          result.averageRating.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableDoubleOperationFilterInput))!
              as GComparableDoubleOperationFilterInput);
          break;
        case 'tripsCreated':
          result.tripsCreated.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'tripsCompleted':
          result.tripsCompleted.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'tripsCancelled':
          result.tripsCancelled.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'isVerified':
          result.isVerified.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBooleanOperationFilterInput))!
              as GBooleanOperationFilterInput);
          break;
        case 'aboutMe':
          result.aboutMe.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'loyaltyPoints':
          result.loyaltyPoints.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableSingleOperationFilterInput))!
              as GComparableSingleOperationFilterInput);
          break;
        case 'location':
          result.location.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GLocationFilterInput))!
              as GLocationFilterInput);
          break;
        case 'device':
          result.device.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GDeviceFilterInput))!
              as GDeviceFilterInput);
          break;
        case 'rides':
          result.rides.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GListFilterInputTypeOfUserRidesFilterInput))!
              as GListFilterInputTypeOfUserRidesFilterInput);
          break;
        case 'userRatings':
          result.userRatings.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GListFilterInputTypeOfUserRatingFilterInput))!
              as GListFilterInputTypeOfUserRatingFilterInput);
          break;
        case 'frequentRoutes':
          result.frequentRoutes.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GListFilterInputTypeOfFrequentRouteFilterInput))!
              as GListFilterInputTypeOfFrequentRouteFilterInput);
          break;
        case 'userReferals':
          result.userReferals.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GListFilterInputTypeOfSafiriCarUserFilterInput))!
              as GListFilterInputTypeOfSafiriCarUserFilterInput);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'userName':
          result.userName.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'normalizedUserName':
          result.normalizedUserName.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'email':
          result.email.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'normalizedEmail':
          result.normalizedEmail.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'emailConfirmed':
          result.emailConfirmed.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBooleanOperationFilterInput))!
              as GBooleanOperationFilterInput);
          break;
        case 'passwordHash':
          result.passwordHash.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'securityStamp':
          result.securityStamp.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'concurrencyStamp':
          result.concurrencyStamp.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'phoneNumber':
          result.phoneNumber.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'phoneNumberConfirmed':
          result.phoneNumberConfirmed.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBooleanOperationFilterInput))!
              as GBooleanOperationFilterInput);
          break;
        case 'twoFactorEnabled':
          result.twoFactorEnabled.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBooleanOperationFilterInput))!
              as GBooleanOperationFilterInput);
          break;
        case 'lockoutEnd':
          result.lockoutEnd.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfDateTimeOffsetOperationFilterInput))!
              as GComparableNullableOfDateTimeOffsetOperationFilterInput);
          break;
        case 'lockoutEnabled':
          result.lockoutEnabled.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBooleanOperationFilterInput))!
              as GBooleanOperationFilterInput);
          break;
        case 'accessFailedCount':
          result.accessFailedCount.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GSafiriCarUserSortInputSerializer
    implements StructuredSerializer<GSafiriCarUserSortInput> {
  @override
  final Iterable<Type> types = const [
    GSafiriCarUserSortInput,
    _$GSafiriCarUserSortInput
  ];
  @override
  final String wireName = 'GSafiriCarUserSortInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GSafiriCarUserSortInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.firstName;
    if (value != null) {
      result
        ..add('firstName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.lastName;
    if (value != null) {
      result
        ..add('lastName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.nationalId;
    if (value != null) {
      result
        ..add('nationalId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.profilePictureDataUrl;
    if (value != null) {
      result
        ..add('profilePictureDataUrl')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.referalCode;
    if (value != null) {
      result
        ..add('referalCode')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.identificationDocument;
    if (value != null) {
      result
        ..add('identificationDocument')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GIdentificationDocumentSortInput)));
    }
    value = object.createdOn;
    if (value != null) {
      result
        ..add('createdOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.lastModifiedBy;
    if (value != null) {
      result
        ..add('lastModifiedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.lastModifiedOn;
    if (value != null) {
      result
        ..add('lastModifiedOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.isDeleted;
    if (value != null) {
      result
        ..add('isDeleted')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.deletedOn;
    if (value != null) {
      result
        ..add('deletedOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.refreshToken;
    if (value != null) {
      result
        ..add('refreshToken')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.role;
    if (value != null) {
      result
        ..add('role')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.refreshTokenExpiryTime;
    if (value != null) {
      result
        ..add('refreshTokenExpiryTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.totalRating;
    if (value != null) {
      result
        ..add('totalRating')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.averageRating;
    if (value != null) {
      result
        ..add('averageRating')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.tripsCreated;
    if (value != null) {
      result
        ..add('tripsCreated')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.tripsCompleted;
    if (value != null) {
      result
        ..add('tripsCompleted')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.tripsCancelled;
    if (value != null) {
      result
        ..add('tripsCancelled')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.isVerified;
    if (value != null) {
      result
        ..add('isVerified')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.aboutMe;
    if (value != null) {
      result
        ..add('aboutMe')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.loyaltyPoints;
    if (value != null) {
      result
        ..add('loyaltyPoints')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.location;
    if (value != null) {
      result
        ..add('location')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GLocationSortInput)));
    }
    value = object.device;
    if (value != null) {
      result
        ..add('device')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDeviceSortInput)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.userName;
    if (value != null) {
      result
        ..add('userName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.normalizedUserName;
    if (value != null) {
      result
        ..add('normalizedUserName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.normalizedEmail;
    if (value != null) {
      result
        ..add('normalizedEmail')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.emailConfirmed;
    if (value != null) {
      result
        ..add('emailConfirmed')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.passwordHash;
    if (value != null) {
      result
        ..add('passwordHash')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.securityStamp;
    if (value != null) {
      result
        ..add('securityStamp')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.concurrencyStamp;
    if (value != null) {
      result
        ..add('concurrencyStamp')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.phoneNumber;
    if (value != null) {
      result
        ..add('phoneNumber')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.phoneNumberConfirmed;
    if (value != null) {
      result
        ..add('phoneNumberConfirmed')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.twoFactorEnabled;
    if (value != null) {
      result
        ..add('twoFactorEnabled')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.lockoutEnd;
    if (value != null) {
      result
        ..add('lockoutEnd')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.lockoutEnabled;
    if (value != null) {
      result
        ..add('lockoutEnabled')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.accessFailedCount;
    if (value != null) {
      result
        ..add('accessFailedCount')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    return result;
  }

  @override
  GSafiriCarUserSortInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GSafiriCarUserSortInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'firstName':
          result.firstName = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'lastName':
          result.lastName = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'nationalId':
          result.nationalId = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'createdBy':
          result.createdBy = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'profilePictureDataUrl':
          result.profilePictureDataUrl = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'referalCode':
          result.referalCode = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'identificationDocument':
          result.identificationDocument.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GIdentificationDocumentSortInput))!
              as GIdentificationDocumentSortInput);
          break;
        case 'createdOn':
          result.createdOn = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'lastModifiedBy':
          result.lastModifiedBy = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'lastModifiedOn':
          result.lastModifiedOn = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'isDeleted':
          result.isDeleted = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'deletedOn':
          result.deletedOn = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'refreshToken':
          result.refreshToken = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'role':
          result.role = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'refreshTokenExpiryTime':
          result.refreshTokenExpiryTime = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'totalRating':
          result.totalRating = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'averageRating':
          result.averageRating = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'tripsCreated':
          result.tripsCreated = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'tripsCompleted':
          result.tripsCompleted = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'tripsCancelled':
          result.tripsCancelled = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'isVerified':
          result.isVerified = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'aboutMe':
          result.aboutMe = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'loyaltyPoints':
          result.loyaltyPoints = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'location':
          result.location.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GLocationSortInput))!
              as GLocationSortInput);
          break;
        case 'device':
          result.device.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GDeviceSortInput))!
              as GDeviceSortInput);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'userName':
          result.userName = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'normalizedUserName':
          result.normalizedUserName = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'normalizedEmail':
          result.normalizedEmail = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'emailConfirmed':
          result.emailConfirmed = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'passwordHash':
          result.passwordHash = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'securityStamp':
          result.securityStamp = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'concurrencyStamp':
          result.concurrencyStamp = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'phoneNumber':
          result.phoneNumber = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'phoneNumberConfirmed':
          result.phoneNumberConfirmed = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'twoFactorEnabled':
          result.twoFactorEnabled = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'lockoutEnd':
          result.lockoutEnd = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'lockoutEnabled':
          result.lockoutEnabled = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'accessFailedCount':
          result.accessFailedCount = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
      }
    }

    return result.build();
  }
}

class _$GLocationFilterInputSerializer
    implements StructuredSerializer<GLocationFilterInput> {
  @override
  final Iterable<Type> types = const [
    GLocationFilterInput,
    _$GLocationFilterInput
  ];
  @override
  final String wireName = 'GLocationFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GLocationFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.and;
    if (value != null) {
      result
        ..add('and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GLocationFilterInput)])));
    }
    value = object.or;
    if (value != null) {
      result
        ..add('or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GLocationFilterInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.town;
    if (value != null) {
      result
        ..add('town')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.isPopular;
    if (value != null) {
      result
        ..add('isPopular')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GBooleanOperationFilterInput)));
    }
    value = object.country;
    if (value != null) {
      result
        ..add('country')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCountryFilterInput)));
    }
    value = object.createdOn;
    if (value != null) {
      result
        ..add('createdOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfDateTimeOperationFilterInput)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.lastModifiedOn;
    if (value != null) {
      result
        ..add('lastModifiedOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfDateTimeOperationFilterInput)));
    }
    value = object.lastModifiedBy;
    if (value != null) {
      result
        ..add('lastModifiedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    return result;
  }

  @override
  GLocationFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GLocationFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'and':
          result.and.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GLocationFilterInput)]))!
              as BuiltList<Object?>);
          break;
        case 'or':
          result.or.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GLocationFilterInput)]))!
              as BuiltList<Object?>);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'town':
          result.town.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'isPopular':
          result.isPopular.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBooleanOperationFilterInput))!
              as GBooleanOperationFilterInput);
          break;
        case 'country':
          result.country.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCountryFilterInput))!
              as GCountryFilterInput);
          break;
        case 'createdOn':
          result.createdOn.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfDateTimeOperationFilterInput))!
              as GComparableNullableOfDateTimeOperationFilterInput);
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'lastModifiedOn':
          result.lastModifiedOn.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfDateTimeOperationFilterInput))!
              as GComparableNullableOfDateTimeOperationFilterInput);
          break;
        case 'lastModifiedBy':
          result.lastModifiedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GLocationSortInputSerializer
    implements StructuredSerializer<GLocationSortInput> {
  @override
  final Iterable<Type> types = const [GLocationSortInput, _$GLocationSortInput];
  @override
  final String wireName = 'GLocationSortInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GLocationSortInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.town;
    if (value != null) {
      result
        ..add('town')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.isPopular;
    if (value != null) {
      result
        ..add('isPopular')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.country;
    if (value != null) {
      result
        ..add('country')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCountrySortInput)));
    }
    value = object.createdOn;
    if (value != null) {
      result
        ..add('createdOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.lastModifiedOn;
    if (value != null) {
      result
        ..add('lastModifiedOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.lastModifiedBy;
    if (value != null) {
      result
        ..add('lastModifiedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    return result;
  }

  @override
  GLocationSortInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GLocationSortInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'town':
          result.town = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'isPopular':
          result.isPopular = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'country':
          result.country.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCountrySortInput))!
              as GCountrySortInput);
          break;
        case 'createdOn':
          result.createdOn = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'createdBy':
          result.createdBy = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'lastModifiedOn':
          result.lastModifiedOn = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'lastModifiedBy':
          result.lastModifiedBy = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
      }
    }

    return result.build();
  }
}

class _$GAPIRequestFilterInputSerializer
    implements StructuredSerializer<GAPIRequestFilterInput> {
  @override
  final Iterable<Type> types = const [
    GAPIRequestFilterInput,
    _$GAPIRequestFilterInput
  ];
  @override
  final String wireName = 'GAPIRequestFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAPIRequestFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.and;
    if (value != null) {
      result
        ..add('and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAPIRequestFilterInput)])));
    }
    value = object.or;
    if (value != null) {
      result
        ..add('or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAPIRequestFilterInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.iPAddress;
    if (value != null) {
      result
        ..add('iPAddress')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.uAString;
    if (value != null) {
      result
        ..add('uAString')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.languages;
    if (value != null) {
      result
        ..add('languages')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.path;
    if (value != null) {
      result
        ..add('path')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.statusCode;
    if (value != null) {
      result
        ..add('statusCode')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.createdOn;
    if (value != null) {
      result
        ..add('createdOn')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableDateTimeOperationFilterInput)));
    }
    return result;
  }

  @override
  GAPIRequestFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAPIRequestFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'and':
          result.and.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAPIRequestFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'or':
          result.or.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAPIRequestFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'iPAddress':
          result.iPAddress.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'uAString':
          result.uAString.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'languages':
          result.languages.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'path':
          result.path.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'statusCode':
          result.statusCode.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'createdOn':
          result.createdOn.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableDateTimeOperationFilterInput))!
              as GComparableDateTimeOperationFilterInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAPIRequestSortInputSerializer
    implements StructuredSerializer<GAPIRequestSortInput> {
  @override
  final Iterable<Type> types = const [
    GAPIRequestSortInput,
    _$GAPIRequestSortInput
  ];
  @override
  final String wireName = 'GAPIRequestSortInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAPIRequestSortInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.iPAddress;
    if (value != null) {
      result
        ..add('iPAddress')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.uAString;
    if (value != null) {
      result
        ..add('uAString')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.languages;
    if (value != null) {
      result
        ..add('languages')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.path;
    if (value != null) {
      result
        ..add('path')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.statusCode;
    if (value != null) {
      result
        ..add('statusCode')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.createdOn;
    if (value != null) {
      result
        ..add('createdOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    return result;
  }

  @override
  GAPIRequestSortInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAPIRequestSortInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'iPAddress':
          result.iPAddress = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'uAString':
          result.uAString = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'languages':
          result.languages = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'path':
          result.path = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'statusCode':
          result.statusCode = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'createdOn':
          result.createdOn = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
      }
    }

    return result.build();
  }
}

class _$GRideFilterInputSerializer
    implements StructuredSerializer<GRideFilterInput> {
  @override
  final Iterable<Type> types = const [GRideFilterInput, _$GRideFilterInput];
  @override
  final String wireName = 'GRideFilterInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GRideFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.and;
    if (value != null) {
      result
        ..add('and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GRideFilterInput)])));
    }
    value = object.or;
    if (value != null) {
      result
        ..add('or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GRideFilterInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.placeofStart;
    if (value != null) {
      result
        ..add('placeofStart')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.destination;
    if (value != null) {
      result
        ..add('destination')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.driverId;
    if (value != null) {
      result
        ..add('driverId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.estimatePrice;
    if (value != null) {
      result
        ..add('estimatePrice')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableSingleOperationFilterInput)));
    }
    value = object.estimatedDistance;
    if (value != null) {
      result
        ..add('estimatedDistance')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.numberOfPeople;
    if (value != null) {
      result
        ..add('numberOfPeople')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.maximumCarryWeight;
    if (value != null) {
      result
        ..add('maximumCarryWeight')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.departureDate;
    if (value != null) {
      result
        ..add('departureDate')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableDateTimeOperationFilterInput)));
    }
    value = object.duration;
    if (value != null) {
      result
        ..add('duration')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.status;
    if (value != null) {
      result
        ..add('status')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.seat;
    if (value != null) {
      result
        ..add('seat')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSeatFilterInput)));
    }
    value = object.seatCount;
    if (value != null) {
      result
        ..add('seatCount')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.seatCapacity;
    if (value != null) {
      result
        ..add('seatCapacity')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.maxTotalPay;
    if (value != null) {
      result
        ..add('maxTotalPay')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableSingleOperationFilterInput)));
    }
    value = object.totalPay;
    if (value != null) {
      result
        ..add('totalPay')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableSingleOperationFilterInput)));
    }
    value = object.amountCashedOut;
    if (value != null) {
      result
        ..add('amountCashedOut')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableDecimalOperationFilterInput)));
    }
    value = object.departureTime;
    if (value != null) {
      result
        ..add('departureTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfTimeSpanOperationFilterInput)));
    }
    value = object.arrivalTime;
    if (value != null) {
      result
        ..add('arrivalTime')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableDateTimeOperationFilterInput)));
    }
    value = object.allowedBehDesc;
    if (value != null) {
      result
        ..add('allowedBehDesc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.exactPickupLocation;
    if (value != null) {
      result
        ..add('exactPickupLocation')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.routeIndex;
    if (value != null) {
      result
        ..add('routeIndex')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfInt32OperationFilterInput)));
    }
    value = object.mpesaReceiptNumber;
    if (value != null) {
      result
        ..add('mpesaReceiptNumber')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.transactionDate;
    if (value != null) {
      result
        ..add('transactionDate')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableDateTimeOperationFilterInput)));
    }
    value = object.merchantRequestId;
    if (value != null) {
      result
        ..add('merchantRequestId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.checkoutRequestId;
    if (value != null) {
      result
        ..add('checkoutRequestId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.compensatedFromPassengerCancel;
    if (value != null) {
      result
        ..add('compensatedFromPassengerCancel')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableSingleOperationFilterInput)));
    }
    value = object.driverPaymentTime;
    if (value != null) {
      result
        ..add('driverPaymentTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfDateTimeOperationFilterInput)));
    }
    value = object.exactDropOffLocation;
    if (value != null) {
      result
        ..add('exactDropOffLocation')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.isRecurring;
    if (value != null) {
      result
        ..add('isRecurring')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GBooleanOperationFilterInput)));
    }
    value = object.carId;
    if (value != null) {
      result
        ..add('carId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.car;
    if (value != null) {
      result
        ..add('car')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCarFilterInput)));
    }
    value = object.users;
    if (value != null) {
      result
        ..add('users')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GListFilterInputTypeOfUserRidesFilterInput)));
    }
    value = object.transactions;
    if (value != null) {
      result
        ..add('transactions')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GListFilterInputTypeOfRideTransactionFilterInput)));
    }
    return result;
  }

  @override
  GRideFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GRideFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'and':
          result.and.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GRideFilterInput)]))!
              as BuiltList<Object?>);
          break;
        case 'or':
          result.or.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GRideFilterInput)]))!
              as BuiltList<Object?>);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'name':
          result.name.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'placeofStart':
          result.placeofStart.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'destination':
          result.destination.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'driverId':
          result.driverId.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'estimatePrice':
          result.estimatePrice.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableSingleOperationFilterInput))!
              as GComparableSingleOperationFilterInput);
          break;
        case 'estimatedDistance':
          result.estimatedDistance.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'numberOfPeople':
          result.numberOfPeople.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'maximumCarryWeight':
          result.maximumCarryWeight.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'departureDate':
          result.departureDate.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableDateTimeOperationFilterInput))!
              as GComparableDateTimeOperationFilterInput);
          break;
        case 'duration':
          result.duration.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'status':
          result.status.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'seat':
          result.seat.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GSeatFilterInput))!
              as GSeatFilterInput);
          break;
        case 'seatCount':
          result.seatCount.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'seatCapacity':
          result.seatCapacity.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'maxTotalPay':
          result.maxTotalPay.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableSingleOperationFilterInput))!
              as GComparableSingleOperationFilterInput);
          break;
        case 'totalPay':
          result.totalPay.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableSingleOperationFilterInput))!
              as GComparableSingleOperationFilterInput);
          break;
        case 'amountCashedOut':
          result.amountCashedOut.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableDecimalOperationFilterInput))!
              as GComparableDecimalOperationFilterInput);
          break;
        case 'departureTime':
          result.departureTime.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfTimeSpanOperationFilterInput))!
              as GComparableNullableOfTimeSpanOperationFilterInput);
          break;
        case 'arrivalTime':
          result.arrivalTime.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableDateTimeOperationFilterInput))!
              as GComparableDateTimeOperationFilterInput);
          break;
        case 'allowedBehDesc':
          result.allowedBehDesc.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'exactPickupLocation':
          result.exactPickupLocation.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'routeIndex':
          result.routeIndex.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfInt32OperationFilterInput))!
              as GComparableNullableOfInt32OperationFilterInput);
          break;
        case 'mpesaReceiptNumber':
          result.mpesaReceiptNumber.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'transactionDate':
          result.transactionDate.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableDateTimeOperationFilterInput))!
              as GComparableDateTimeOperationFilterInput);
          break;
        case 'merchantRequestId':
          result.merchantRequestId.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'checkoutRequestId':
          result.checkoutRequestId.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'compensatedFromPassengerCancel':
          result.compensatedFromPassengerCancel.replace(serializers.deserialize(
                  value,
                  specifiedType:
                      const FullType(GComparableSingleOperationFilterInput))!
              as GComparableSingleOperationFilterInput);
          break;
        case 'driverPaymentTime':
          result.driverPaymentTime.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfDateTimeOperationFilterInput))!
              as GComparableNullableOfDateTimeOperationFilterInput);
          break;
        case 'exactDropOffLocation':
          result.exactDropOffLocation.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'isRecurring':
          result.isRecurring.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBooleanOperationFilterInput))!
              as GBooleanOperationFilterInput);
          break;
        case 'carId':
          result.carId.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'car':
          result.car.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCarFilterInput))!
              as GCarFilterInput);
          break;
        case 'users':
          result.users.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GListFilterInputTypeOfUserRidesFilterInput))!
              as GListFilterInputTypeOfUserRidesFilterInput);
          break;
        case 'transactions':
          result.transactions.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GListFilterInputTypeOfRideTransactionFilterInput))!
              as GListFilterInputTypeOfRideTransactionFilterInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GRideSortInputSerializer
    implements StructuredSerializer<GRideSortInput> {
  @override
  final Iterable<Type> types = const [GRideSortInput, _$GRideSortInput];
  @override
  final String wireName = 'GRideSortInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GRideSortInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.placeofStart;
    if (value != null) {
      result
        ..add('placeofStart')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.destination;
    if (value != null) {
      result
        ..add('destination')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.driverId;
    if (value != null) {
      result
        ..add('driverId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.estimatePrice;
    if (value != null) {
      result
        ..add('estimatePrice')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.estimatedDistance;
    if (value != null) {
      result
        ..add('estimatedDistance')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.numberOfPeople;
    if (value != null) {
      result
        ..add('numberOfPeople')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.maximumCarryWeight;
    if (value != null) {
      result
        ..add('maximumCarryWeight')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.departureDate;
    if (value != null) {
      result
        ..add('departureDate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.duration;
    if (value != null) {
      result
        ..add('duration')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.status;
    if (value != null) {
      result
        ..add('status')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.seat;
    if (value != null) {
      result
        ..add('seat')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSeatSortInput)));
    }
    value = object.seatCount;
    if (value != null) {
      result
        ..add('seatCount')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.seatCapacity;
    if (value != null) {
      result
        ..add('seatCapacity')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.maxTotalPay;
    if (value != null) {
      result
        ..add('maxTotalPay')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.totalPay;
    if (value != null) {
      result
        ..add('totalPay')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.amountCashedOut;
    if (value != null) {
      result
        ..add('amountCashedOut')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.departureTime;
    if (value != null) {
      result
        ..add('departureTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.arrivalTime;
    if (value != null) {
      result
        ..add('arrivalTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.allowedBehDesc;
    if (value != null) {
      result
        ..add('allowedBehDesc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.exactPickupLocation;
    if (value != null) {
      result
        ..add('exactPickupLocation')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.routeIndex;
    if (value != null) {
      result
        ..add('routeIndex')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.mpesaReceiptNumber;
    if (value != null) {
      result
        ..add('mpesaReceiptNumber')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.transactionDate;
    if (value != null) {
      result
        ..add('transactionDate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.merchantRequestId;
    if (value != null) {
      result
        ..add('merchantRequestId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.checkoutRequestId;
    if (value != null) {
      result
        ..add('checkoutRequestId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.compensatedFromPassengerCancel;
    if (value != null) {
      result
        ..add('compensatedFromPassengerCancel')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.driverPaymentTime;
    if (value != null) {
      result
        ..add('driverPaymentTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.exactDropOffLocation;
    if (value != null) {
      result
        ..add('exactDropOffLocation')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.isRecurring;
    if (value != null) {
      result
        ..add('isRecurring')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.carId;
    if (value != null) {
      result
        ..add('carId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.car;
    if (value != null) {
      result
        ..add('car')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCarSortInput)));
    }
    return result;
  }

  @override
  GRideSortInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GRideSortInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'placeofStart':
          result.placeofStart = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'destination':
          result.destination = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'driverId':
          result.driverId = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'estimatePrice':
          result.estimatePrice = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'estimatedDistance':
          result.estimatedDistance = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'numberOfPeople':
          result.numberOfPeople = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'maximumCarryWeight':
          result.maximumCarryWeight = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'departureDate':
          result.departureDate = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'duration':
          result.duration = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'status':
          result.status = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'seat':
          result.seat.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GSeatSortInput))!
              as GSeatSortInput);
          break;
        case 'seatCount':
          result.seatCount = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'seatCapacity':
          result.seatCapacity = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'maxTotalPay':
          result.maxTotalPay = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'totalPay':
          result.totalPay = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'amountCashedOut':
          result.amountCashedOut = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'departureTime':
          result.departureTime = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'arrivalTime':
          result.arrivalTime = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'allowedBehDesc':
          result.allowedBehDesc = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'exactPickupLocation':
          result.exactPickupLocation = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'routeIndex':
          result.routeIndex = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'mpesaReceiptNumber':
          result.mpesaReceiptNumber = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'transactionDate':
          result.transactionDate = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'merchantRequestId':
          result.merchantRequestId = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'checkoutRequestId':
          result.checkoutRequestId = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'compensatedFromPassengerCancel':
          result.compensatedFromPassengerCancel = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'driverPaymentTime':
          result.driverPaymentTime = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'exactDropOffLocation':
          result.exactDropOffLocation = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'isRecurring':
          result.isRecurring = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'carId':
          result.carId = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'car':
          result.car.replace(serializers.deserialize(value,
              specifiedType: const FullType(GCarSortInput))! as GCarSortInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserRidesFilterInputSerializer
    implements StructuredSerializer<GUserRidesFilterInput> {
  @override
  final Iterable<Type> types = const [
    GUserRidesFilterInput,
    _$GUserRidesFilterInput
  ];
  @override
  final String wireName = 'GUserRidesFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserRidesFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.and;
    if (value != null) {
      result
        ..add('and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserRidesFilterInput)])));
    }
    value = object.or;
    if (value != null) {
      result
        ..add('or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserRidesFilterInput)])));
    }
    value = object.userId;
    if (value != null) {
      result
        ..add('userId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.user;
    if (value != null) {
      result
        ..add('user')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSafiriCarUserFilterInput)));
    }
    value = object.rideId;
    if (value != null) {
      result
        ..add('rideId')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.ride;
    if (value != null) {
      result
        ..add('ride')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GRideFilterInput)));
    }
    value = object.transactions;
    if (value != null) {
      result
        ..add('transactions')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GListFilterInputTypeOfRideTransactionFilterInput)));
    }
    return result;
  }

  @override
  GUserRidesFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserRidesFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'and':
          result.and.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GUserRidesFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'or':
          result.or.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GUserRidesFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'userId':
          result.userId.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'user':
          result.user.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GSafiriCarUserFilterInput))!
              as GSafiriCarUserFilterInput);
          break;
        case 'rideId':
          result.rideId.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'ride':
          result.ride.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GRideFilterInput))!
              as GRideFilterInput);
          break;
        case 'transactions':
          result.transactions.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GListFilterInputTypeOfRideTransactionFilterInput))!
              as GListFilterInputTypeOfRideTransactionFilterInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserRidesSortInputSerializer
    implements StructuredSerializer<GUserRidesSortInput> {
  @override
  final Iterable<Type> types = const [
    GUserRidesSortInput,
    _$GUserRidesSortInput
  ];
  @override
  final String wireName = 'GUserRidesSortInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserRidesSortInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.userId;
    if (value != null) {
      result
        ..add('userId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.user;
    if (value != null) {
      result
        ..add('user')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSafiriCarUserSortInput)));
    }
    value = object.rideId;
    if (value != null) {
      result
        ..add('rideId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.ride;
    if (value != null) {
      result
        ..add('ride')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GRideSortInput)));
    }
    return result;
  }

  @override
  GUserRidesSortInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserRidesSortInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'userId':
          result.userId = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'user':
          result.user.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GSafiriCarUserSortInput))!
              as GSafiriCarUserSortInput);
          break;
        case 'rideId':
          result.rideId = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'ride':
          result.ride.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GRideSortInput))!
              as GRideSortInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GRideTransactionFilterInputSerializer
    implements StructuredSerializer<GRideTransactionFilterInput> {
  @override
  final Iterable<Type> types = const [
    GRideTransactionFilterInput,
    _$GRideTransactionFilterInput
  ];
  @override
  final String wireName = 'GRideTransactionFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GRideTransactionFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.and;
    if (value != null) {
      result
        ..add('and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GRideTransactionFilterInput)])));
    }
    value = object.or;
    if (value != null) {
      result
        ..add('or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GRideTransactionFilterInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.phoneNumber;
    if (value != null) {
      result
        ..add('phoneNumber')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.amount;
    if (value != null) {
      result
        ..add('amount')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableSingleOperationFilterInput)));
    }
    value = object.isReversed;
    if (value != null) {
      result
        ..add('isReversed')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GBooleanOperationFilterInput)));
    }
    value = object.status;
    if (value != null) {
      result
        ..add('status')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.bookedRideId;
    if (value != null) {
      result
        ..add('bookedRideId')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.passengerId;
    if (value != null) {
      result
        ..add('passengerId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.driverId;
    if (value != null) {
      result
        ..add('driverId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.transactionCode;
    if (value != null) {
      result
        ..add('transactionCode')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.merchantRequestId;
    if (value != null) {
      result
        ..add('merchantRequestId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.checkoutRequestId;
    if (value != null) {
      result
        ..add('checkoutRequestId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.transactionDate;
    if (value != null) {
      result
        ..add('transactionDate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfDateTimeOperationFilterInput)));
    }
    value = object.transactionTime;
    if (value != null) {
      result
        ..add('transactionTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfTimeSpanOperationFilterInput)));
    }
    value = object.approvedDateTime;
    if (value != null) {
      result
        ..add('approvedDateTime')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableDateTimeOperationFilterInput)));
    }
    value = object.transactionID;
    if (value != null) {
      result
        ..add('transactionID')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.conversationID;
    if (value != null) {
      result
        ..add('conversationID')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.originatorConversationID;
    if (value != null) {
      result
        ..add('originatorConversationID')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.reversedDate;
    if (value != null) {
      result
        ..add('reversedDate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.reversedTime;
    if (value != null) {
      result
        ..add('reversedTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.reseaonForReversal;
    if (value != null) {
      result
        ..add('reseaonForReversal')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.seatsStr;
    if (value != null) {
      result
        ..add('seatsStr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.paymentMethod;
    if (value != null) {
      result
        ..add('paymentMethod')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.exactDropOffLocation;
    if (value != null) {
      result
        ..add('exactDropOffLocation')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    return result;
  }

  @override
  GRideTransactionFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GRideTransactionFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'and':
          result.and.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GRideTransactionFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'or':
          result.or.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GRideTransactionFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'phoneNumber':
          result.phoneNumber.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'amount':
          result.amount.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableSingleOperationFilterInput))!
              as GComparableSingleOperationFilterInput);
          break;
        case 'isReversed':
          result.isReversed.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBooleanOperationFilterInput))!
              as GBooleanOperationFilterInput);
          break;
        case 'status':
          result.status.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'bookedRideId':
          result.bookedRideId.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'passengerId':
          result.passengerId.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'driverId':
          result.driverId.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'transactionCode':
          result.transactionCode.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'merchantRequestId':
          result.merchantRequestId.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'checkoutRequestId':
          result.checkoutRequestId.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'transactionDate':
          result.transactionDate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfDateTimeOperationFilterInput))!
              as GComparableNullableOfDateTimeOperationFilterInput);
          break;
        case 'transactionTime':
          result.transactionTime.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfTimeSpanOperationFilterInput))!
              as GComparableNullableOfTimeSpanOperationFilterInput);
          break;
        case 'approvedDateTime':
          result.approvedDateTime.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableDateTimeOperationFilterInput))!
              as GComparableDateTimeOperationFilterInput);
          break;
        case 'transactionID':
          result.transactionID.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'conversationID':
          result.conversationID.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'originatorConversationID':
          result.originatorConversationID.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'reversedDate':
          result.reversedDate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'reversedTime':
          result.reversedTime.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'reseaonForReversal':
          result.reseaonForReversal.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'seatsStr':
          result.seatsStr.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'paymentMethod':
          result.paymentMethod.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'exactDropOffLocation':
          result.exactDropOffLocation.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GRideTransactionSortInputSerializer
    implements StructuredSerializer<GRideTransactionSortInput> {
  @override
  final Iterable<Type> types = const [
    GRideTransactionSortInput,
    _$GRideTransactionSortInput
  ];
  @override
  final String wireName = 'GRideTransactionSortInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GRideTransactionSortInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.phoneNumber;
    if (value != null) {
      result
        ..add('phoneNumber')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.amount;
    if (value != null) {
      result
        ..add('amount')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.isReversed;
    if (value != null) {
      result
        ..add('isReversed')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.status;
    if (value != null) {
      result
        ..add('status')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.bookedRideId;
    if (value != null) {
      result
        ..add('bookedRideId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.passengerId;
    if (value != null) {
      result
        ..add('passengerId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.driverId;
    if (value != null) {
      result
        ..add('driverId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.transactionCode;
    if (value != null) {
      result
        ..add('transactionCode')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.merchantRequestId;
    if (value != null) {
      result
        ..add('merchantRequestId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.checkoutRequestId;
    if (value != null) {
      result
        ..add('checkoutRequestId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.transactionDate;
    if (value != null) {
      result
        ..add('transactionDate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.transactionTime;
    if (value != null) {
      result
        ..add('transactionTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.approvedDateTime;
    if (value != null) {
      result
        ..add('approvedDateTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.transactionID;
    if (value != null) {
      result
        ..add('transactionID')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.conversationID;
    if (value != null) {
      result
        ..add('conversationID')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.originatorConversationID;
    if (value != null) {
      result
        ..add('originatorConversationID')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.reversedDate;
    if (value != null) {
      result
        ..add('reversedDate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.reversedTime;
    if (value != null) {
      result
        ..add('reversedTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.reseaonForReversal;
    if (value != null) {
      result
        ..add('reseaonForReversal')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.seatsStr;
    if (value != null) {
      result
        ..add('seatsStr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.paymentMethod;
    if (value != null) {
      result
        ..add('paymentMethod')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.exactDropOffLocation;
    if (value != null) {
      result
        ..add('exactDropOffLocation')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    return result;
  }

  @override
  GRideTransactionSortInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GRideTransactionSortInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'phoneNumber':
          result.phoneNumber = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'amount':
          result.amount = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'isReversed':
          result.isReversed = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'status':
          result.status = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'bookedRideId':
          result.bookedRideId = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'passengerId':
          result.passengerId = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'driverId':
          result.driverId = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'transactionCode':
          result.transactionCode = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'merchantRequestId':
          result.merchantRequestId = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'checkoutRequestId':
          result.checkoutRequestId = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'transactionDate':
          result.transactionDate = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'transactionTime':
          result.transactionTime = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'approvedDateTime':
          result.approvedDateTime = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'transactionID':
          result.transactionID = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'conversationID':
          result.conversationID = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'originatorConversationID':
          result.originatorConversationID = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'reversedDate':
          result.reversedDate = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'reversedTime':
          result.reversedTime = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'reseaonForReversal':
          result.reseaonForReversal = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'seatsStr':
          result.seatsStr = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'paymentMethod':
          result.paymentMethod = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'exactDropOffLocation':
          result.exactDropOffLocation = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
      }
    }

    return result.build();
  }
}

class _$GPamrideMessageFilterInputSerializer
    implements StructuredSerializer<GPamrideMessageFilterInput> {
  @override
  final Iterable<Type> types = const [
    GPamrideMessageFilterInput,
    _$GPamrideMessageFilterInput
  ];
  @override
  final String wireName = 'GPamrideMessageFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GPamrideMessageFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.and;
    if (value != null) {
      result
        ..add('and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GPamrideMessageFilterInput)])));
    }
    value = object.or;
    if (value != null) {
      result
        ..add('or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GPamrideMessageFilterInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.from;
    if (value != null) {
      result
        ..add('from')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.to;
    if (value != null) {
      result
        ..add('to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.dateSend;
    if (value != null) {
      result
        ..add('dateSend')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfDateTimeOperationFilterInput)));
    }
    value = object.message;
    if (value != null) {
      result
        ..add('message')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.topic;
    if (value != null) {
      result
        ..add('topic')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.updated;
    if (value != null) {
      result
        ..add('updated')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfDateTimeOperationFilterInput)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfTimeSpanOperationFilterInput)));
    }
    return result;
  }

  @override
  GPamrideMessageFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GPamrideMessageFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'and':
          result.and.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GPamrideMessageFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'or':
          result.or.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GPamrideMessageFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'from':
          result.from.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'to':
          result.to.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'dateSend':
          result.dateSend.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfDateTimeOperationFilterInput))!
              as GComparableNullableOfDateTimeOperationFilterInput);
          break;
        case 'message':
          result.message.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'topic':
          result.topic.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'updated':
          result.updated.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfDateTimeOperationFilterInput))!
              as GComparableNullableOfDateTimeOperationFilterInput);
          break;
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfTimeSpanOperationFilterInput))!
              as GComparableNullableOfTimeSpanOperationFilterInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GPamrideMessageSortInputSerializer
    implements StructuredSerializer<GPamrideMessageSortInput> {
  @override
  final Iterable<Type> types = const [
    GPamrideMessageSortInput,
    _$GPamrideMessageSortInput
  ];
  @override
  final String wireName = 'GPamrideMessageSortInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GPamrideMessageSortInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.from;
    if (value != null) {
      result
        ..add('from')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.to;
    if (value != null) {
      result
        ..add('to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.dateSend;
    if (value != null) {
      result
        ..add('dateSend')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.message;
    if (value != null) {
      result
        ..add('message')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.topic;
    if (value != null) {
      result
        ..add('topic')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.updated;
    if (value != null) {
      result
        ..add('updated')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    return result;
  }

  @override
  GPamrideMessageSortInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GPamrideMessageSortInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'from':
          result.from = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'to':
          result.to = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'dateSend':
          result.dateSend = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'message':
          result.message = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'topic':
          result.topic = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'updated':
          result.updated = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
      }
    }

    return result.build();
  }
}

class _$GCarFilterInputSerializer
    implements StructuredSerializer<GCarFilterInput> {
  @override
  final Iterable<Type> types = const [GCarFilterInput, _$GCarFilterInput];
  @override
  final String wireName = 'GCarFilterInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GCarFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.and;
    if (value != null) {
      result
        ..add('and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCarFilterInput)])));
    }
    value = object.or;
    if (value != null) {
      result
        ..add('or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCarFilterInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.color;
    if (value != null) {
      result
        ..add('color')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.model;
    if (value != null) {
      result
        ..add('model')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.licensePlate;
    if (value != null) {
      result
        ..add('licensePlate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.imageUrl;
    if (value != null) {
      result
        ..add('imageUrl')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.active;
    if (value != null) {
      result
        ..add('active')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GBooleanOperationFilterInput)));
    }
    value = object.ownerId;
    if (value != null) {
      result
        ..add('ownerId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.owner;
    if (value != null) {
      result
        ..add('owner')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSafiriCarUserFilterInput)));
    }
    value = object.rides;
    if (value != null) {
      result
        ..add('rides')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GListFilterInputTypeOfRideFilterInput)));
    }
    return result;
  }

  @override
  GCarFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCarFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'and':
          result.and.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCarFilterInput)]))!
              as BuiltList<Object?>);
          break;
        case 'or':
          result.or.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCarFilterInput)]))!
              as BuiltList<Object?>);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'color':
          result.color.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'model':
          result.model.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'licensePlate':
          result.licensePlate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'imageUrl':
          result.imageUrl.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'active':
          result.active.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBooleanOperationFilterInput))!
              as GBooleanOperationFilterInput);
          break;
        case 'ownerId':
          result.ownerId.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'owner':
          result.owner.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GSafiriCarUserFilterInput))!
              as GSafiriCarUserFilterInput);
          break;
        case 'rides':
          result.rides.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GListFilterInputTypeOfRideFilterInput))!
              as GListFilterInputTypeOfRideFilterInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCarSortInputSerializer implements StructuredSerializer<GCarSortInput> {
  @override
  final Iterable<Type> types = const [GCarSortInput, _$GCarSortInput];
  @override
  final String wireName = 'GCarSortInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GCarSortInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.color;
    if (value != null) {
      result
        ..add('color')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.model;
    if (value != null) {
      result
        ..add('model')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.licensePlate;
    if (value != null) {
      result
        ..add('licensePlate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.imageUrl;
    if (value != null) {
      result
        ..add('imageUrl')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.active;
    if (value != null) {
      result
        ..add('active')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.ownerId;
    if (value != null) {
      result
        ..add('ownerId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.owner;
    if (value != null) {
      result
        ..add('owner')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSafiriCarUserSortInput)));
    }
    return result;
  }

  @override
  GCarSortInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCarSortInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'color':
          result.color = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'model':
          result.model = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'licensePlate':
          result.licensePlate = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'imageUrl':
          result.imageUrl = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'active':
          result.active = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'ownerId':
          result.ownerId = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'owner':
          result.owner.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GSafiriCarUserSortInput))!
              as GSafiriCarUserSortInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GStringOperationFilterInputSerializer
    implements StructuredSerializer<GStringOperationFilterInput> {
  @override
  final Iterable<Type> types = const [
    GStringOperationFilterInput,
    _$GStringOperationFilterInput
  ];
  @override
  final String wireName = 'GStringOperationFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GStringOperationFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.and;
    if (value != null) {
      result
        ..add('and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GStringOperationFilterInput)])));
    }
    value = object.or;
    if (value != null) {
      result
        ..add('or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GStringOperationFilterInput)])));
    }
    value = object.eq;
    if (value != null) {
      result
        ..add('eq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.neq;
    if (value != null) {
      result
        ..add('neq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.contains;
    if (value != null) {
      result
        ..add('contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.ncontains;
    if (value != null) {
      result
        ..add('ncontains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.Gin;
    if (value != null) {
      result
        ..add('in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.nin;
    if (value != null) {
      result
        ..add('nin')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.startsWith;
    if (value != null) {
      result
        ..add('startsWith')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.nstartsWith;
    if (value != null) {
      result
        ..add('nstartsWith')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.endsWith;
    if (value != null) {
      result
        ..add('endsWith')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.nendsWith;
    if (value != null) {
      result
        ..add('nendsWith')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GStringOperationFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GStringOperationFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'and':
          result.and.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GStringOperationFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'or':
          result.or.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GStringOperationFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'eq':
          result.eq = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'neq':
          result.neq = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'contains':
          result.contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'ncontains':
          result.ncontains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'in':
          result.Gin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object?>);
          break;
        case 'nin':
          result.nin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object?>);
          break;
        case 'startsWith':
          result.startsWith = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'nstartsWith':
          result.nstartsWith = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'endsWith':
          result.endsWith = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'nendsWith':
          result.nendsWith = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GListFilterInputTypeOfCarFilterInputSerializer
    implements StructuredSerializer<GListFilterInputTypeOfCarFilterInput> {
  @override
  final Iterable<Type> types = const [
    GListFilterInputTypeOfCarFilterInput,
    _$GListFilterInputTypeOfCarFilterInput
  ];
  @override
  final String wireName = 'GListFilterInputTypeOfCarFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GListFilterInputTypeOfCarFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.all;
    if (value != null) {
      result
        ..add('all')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCarFilterInput)));
    }
    value = object.none;
    if (value != null) {
      result
        ..add('none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCarFilterInput)));
    }
    value = object.some;
    if (value != null) {
      result
        ..add('some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCarFilterInput)));
    }
    value = object.any;
    if (value != null) {
      result
        ..add('any')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GListFilterInputTypeOfCarFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GListFilterInputTypeOfCarFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'all':
          result.all.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCarFilterInput))!
              as GCarFilterInput);
          break;
        case 'none':
          result.none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCarFilterInput))!
              as GCarFilterInput);
          break;
        case 'some':
          result.some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCarFilterInput))!
              as GCarFilterInput);
          break;
        case 'any':
          result.any = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GIdentificationDocumentFilterInputSerializer
    implements StructuredSerializer<GIdentificationDocumentFilterInput> {
  @override
  final Iterable<Type> types = const [
    GIdentificationDocumentFilterInput,
    _$GIdentificationDocumentFilterInput
  ];
  @override
  final String wireName = 'GIdentificationDocumentFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GIdentificationDocumentFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.and;
    if (value != null) {
      result
        ..add('and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GIdentificationDocumentFilterInput)])));
    }
    value = object.or;
    if (value != null) {
      result
        ..add('or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GIdentificationDocumentFilterInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.nationalIdFront;
    if (value != null) {
      result
        ..add('nationalIdFront')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.nationalIdRear;
    if (value != null) {
      result
        ..add('nationalIdRear')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.drivingLicenceFront;
    if (value != null) {
      result
        ..add('drivingLicenceFront')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.drivingLicenceRear;
    if (value != null) {
      result
        ..add('drivingLicenceRear')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    return result;
  }

  @override
  GIdentificationDocumentFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GIdentificationDocumentFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'and':
          result.and.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GIdentificationDocumentFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'or':
          result.or.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GIdentificationDocumentFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'nationalIdFront':
          result.nationalIdFront.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'nationalIdRear':
          result.nationalIdRear.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'drivingLicenceFront':
          result.drivingLicenceFront.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'drivingLicenceRear':
          result.drivingLicenceRear.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GComparableNullableOfDateTimeOperationFilterInputSerializer
    implements
        StructuredSerializer<
            GComparableNullableOfDateTimeOperationFilterInput> {
  @override
  final Iterable<Type> types = const [
    GComparableNullableOfDateTimeOperationFilterInput,
    _$GComparableNullableOfDateTimeOperationFilterInput
  ];
  @override
  final String wireName = 'GComparableNullableOfDateTimeOperationFilterInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GComparableNullableOfDateTimeOperationFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.eq;
    if (value != null) {
      result
        ..add('eq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.neq;
    if (value != null) {
      result
        ..add('neq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.Gin;
    if (value != null) {
      result
        ..add('in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GDateTime)])));
    }
    value = object.nin;
    if (value != null) {
      result
        ..add('nin')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GDateTime)])));
    }
    value = object.gt;
    if (value != null) {
      result
        ..add('gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.ngt;
    if (value != null) {
      result
        ..add('ngt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.gte;
    if (value != null) {
      result
        ..add('gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.ngte;
    if (value != null) {
      result
        ..add('ngte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.lt;
    if (value != null) {
      result
        ..add('lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.nlt;
    if (value != null) {
      result
        ..add('nlt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.lte;
    if (value != null) {
      result
        ..add('lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.nlte;
    if (value != null) {
      result
        ..add('nlte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    return result;
  }

  @override
  GComparableNullableOfDateTimeOperationFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new GComparableNullableOfDateTimeOperationFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'eq':
          result.eq.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'neq':
          result.neq.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'in':
          result.Gin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'nin':
          result.nin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'gt':
          result.gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'ngt':
          result.ngt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'gte':
          result.gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'ngte':
          result.ngte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'lt':
          result.lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'nlt':
          result.nlt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'lte':
          result.lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'nlte':
          result.nlte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
      }
    }

    return result.build();
  }
}

class _$GBooleanOperationFilterInputSerializer
    implements StructuredSerializer<GBooleanOperationFilterInput> {
  @override
  final Iterable<Type> types = const [
    GBooleanOperationFilterInput,
    _$GBooleanOperationFilterInput
  ];
  @override
  final String wireName = 'GBooleanOperationFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GBooleanOperationFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.eq;
    if (value != null) {
      result
        ..add('eq')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.neq;
    if (value != null) {
      result
        ..add('neq')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GBooleanOperationFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GBooleanOperationFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'eq':
          result.eq = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'neq':
          result.neq = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GComparableInt32OperationFilterInputSerializer
    implements StructuredSerializer<GComparableInt32OperationFilterInput> {
  @override
  final Iterable<Type> types = const [
    GComparableInt32OperationFilterInput,
    _$GComparableInt32OperationFilterInput
  ];
  @override
  final String wireName = 'GComparableInt32OperationFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GComparableInt32OperationFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.eq;
    if (value != null) {
      result
        ..add('eq')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.neq;
    if (value != null) {
      result
        ..add('neq')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.Gin;
    if (value != null) {
      result
        ..add('in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(int)])));
    }
    value = object.nin;
    if (value != null) {
      result
        ..add('nin')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(int)])));
    }
    value = object.gt;
    if (value != null) {
      result
        ..add('gt')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.ngt;
    if (value != null) {
      result
        ..add('ngt')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.gte;
    if (value != null) {
      result
        ..add('gte')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.ngte;
    if (value != null) {
      result
        ..add('ngte')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.lt;
    if (value != null) {
      result
        ..add('lt')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.nlt;
    if (value != null) {
      result
        ..add('nlt')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.lte;
    if (value != null) {
      result
        ..add('lte')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.nlte;
    if (value != null) {
      result
        ..add('nlte')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  GComparableInt32OperationFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GComparableInt32OperationFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'eq':
          result.eq = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'neq':
          result.neq = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'in':
          result.Gin.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(BuiltList, const [const FullType(int)]))!
              as BuiltList<Object?>);
          break;
        case 'nin':
          result.nin.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(BuiltList, const [const FullType(int)]))!
              as BuiltList<Object?>);
          break;
        case 'gt':
          result.gt = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'ngt':
          result.ngt = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'gte':
          result.gte = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'ngte':
          result.ngte = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'lt':
          result.lt = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'nlt':
          result.nlt = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'lte':
          result.lte = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'nlte':
          result.nlte = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$GComparableDoubleOperationFilterInputSerializer
    implements StructuredSerializer<GComparableDoubleOperationFilterInput> {
  @override
  final Iterable<Type> types = const [
    GComparableDoubleOperationFilterInput,
    _$GComparableDoubleOperationFilterInput
  ];
  @override
  final String wireName = 'GComparableDoubleOperationFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GComparableDoubleOperationFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.eq;
    if (value != null) {
      result
        ..add('eq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.neq;
    if (value != null) {
      result
        ..add('neq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.Gin;
    if (value != null) {
      result
        ..add('in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(double)])));
    }
    value = object.nin;
    if (value != null) {
      result
        ..add('nin')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(double)])));
    }
    value = object.gt;
    if (value != null) {
      result
        ..add('gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.ngt;
    if (value != null) {
      result
        ..add('ngt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.gte;
    if (value != null) {
      result
        ..add('gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.ngte;
    if (value != null) {
      result
        ..add('ngte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.lt;
    if (value != null) {
      result
        ..add('lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.nlt;
    if (value != null) {
      result
        ..add('nlt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.lte;
    if (value != null) {
      result
        ..add('lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.nlte;
    if (value != null) {
      result
        ..add('nlte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    return result;
  }

  @override
  GComparableDoubleOperationFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GComparableDoubleOperationFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'eq':
          result.eq = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'neq':
          result.neq = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'in':
          result.Gin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(double)]))!
              as BuiltList<Object?>);
          break;
        case 'nin':
          result.nin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(double)]))!
              as BuiltList<Object?>);
          break;
        case 'gt':
          result.gt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'ngt':
          result.ngt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'gte':
          result.gte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'ngte':
          result.ngte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'lt':
          result.lt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'nlt':
          result.nlt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'lte':
          result.lte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'nlte':
          result.nlte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
      }
    }

    return result.build();
  }
}

class _$GComparableSingleOperationFilterInputSerializer
    implements StructuredSerializer<GComparableSingleOperationFilterInput> {
  @override
  final Iterable<Type> types = const [
    GComparableSingleOperationFilterInput,
    _$GComparableSingleOperationFilterInput
  ];
  @override
  final String wireName = 'GComparableSingleOperationFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GComparableSingleOperationFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.eq;
    if (value != null) {
      result
        ..add('eq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.neq;
    if (value != null) {
      result
        ..add('neq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.Gin;
    if (value != null) {
      result
        ..add('in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(double)])));
    }
    value = object.nin;
    if (value != null) {
      result
        ..add('nin')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(double)])));
    }
    value = object.gt;
    if (value != null) {
      result
        ..add('gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.ngt;
    if (value != null) {
      result
        ..add('ngt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.gte;
    if (value != null) {
      result
        ..add('gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.ngte;
    if (value != null) {
      result
        ..add('ngte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.lt;
    if (value != null) {
      result
        ..add('lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.nlt;
    if (value != null) {
      result
        ..add('nlt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.lte;
    if (value != null) {
      result
        ..add('lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.nlte;
    if (value != null) {
      result
        ..add('nlte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    return result;
  }

  @override
  GComparableSingleOperationFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GComparableSingleOperationFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'eq':
          result.eq = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'neq':
          result.neq = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'in':
          result.Gin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(double)]))!
              as BuiltList<Object?>);
          break;
        case 'nin':
          result.nin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(double)]))!
              as BuiltList<Object?>);
          break;
        case 'gt':
          result.gt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'ngt':
          result.ngt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'gte':
          result.gte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'ngte':
          result.ngte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'lt':
          result.lt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'nlt':
          result.nlt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'lte':
          result.lte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'nlte':
          result.nlte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
      }
    }

    return result.build();
  }
}

class _$GDeviceFilterInputSerializer
    implements StructuredSerializer<GDeviceFilterInput> {
  @override
  final Iterable<Type> types = const [GDeviceFilterInput, _$GDeviceFilterInput];
  @override
  final String wireName = 'GDeviceFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GDeviceFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.and;
    if (value != null) {
      result
        ..add('and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GDeviceFilterInput)])));
    }
    value = object.or;
    if (value != null) {
      result
        ..add('or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GDeviceFilterInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.deviceRegToken;
    if (value != null) {
      result
        ..add('deviceRegToken')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.createdOn;
    if (value != null) {
      result
        ..add('createdOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfDateTimeOperationFilterInput)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.lastModifiedOn;
    if (value != null) {
      result
        ..add('lastModifiedOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfDateTimeOperationFilterInput)));
    }
    value = object.lastModifiedBy;
    if (value != null) {
      result
        ..add('lastModifiedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    return result;
  }

  @override
  GDeviceFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GDeviceFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'and':
          result.and.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GDeviceFilterInput)]))!
              as BuiltList<Object?>);
          break;
        case 'or':
          result.or.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GDeviceFilterInput)]))!
              as BuiltList<Object?>);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'deviceRegToken':
          result.deviceRegToken.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'createdOn':
          result.createdOn.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfDateTimeOperationFilterInput))!
              as GComparableNullableOfDateTimeOperationFilterInput);
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'lastModifiedOn':
          result.lastModifiedOn.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfDateTimeOperationFilterInput))!
              as GComparableNullableOfDateTimeOperationFilterInput);
          break;
        case 'lastModifiedBy':
          result.lastModifiedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GListFilterInputTypeOfUserRidesFilterInputSerializer
    implements
        StructuredSerializer<GListFilterInputTypeOfUserRidesFilterInput> {
  @override
  final Iterable<Type> types = const [
    GListFilterInputTypeOfUserRidesFilterInput,
    _$GListFilterInputTypeOfUserRidesFilterInput
  ];
  @override
  final String wireName = 'GListFilterInputTypeOfUserRidesFilterInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GListFilterInputTypeOfUserRidesFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.all;
    if (value != null) {
      result
        ..add('all')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserRidesFilterInput)));
    }
    value = object.none;
    if (value != null) {
      result
        ..add('none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserRidesFilterInput)));
    }
    value = object.some;
    if (value != null) {
      result
        ..add('some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserRidesFilterInput)));
    }
    value = object.any;
    if (value != null) {
      result
        ..add('any')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GListFilterInputTypeOfUserRidesFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GListFilterInputTypeOfUserRidesFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'all':
          result.all.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserRidesFilterInput))!
              as GUserRidesFilterInput);
          break;
        case 'none':
          result.none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserRidesFilterInput))!
              as GUserRidesFilterInput);
          break;
        case 'some':
          result.some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserRidesFilterInput))!
              as GUserRidesFilterInput);
          break;
        case 'any':
          result.any = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GListFilterInputTypeOfUserRatingFilterInputSerializer
    implements
        StructuredSerializer<GListFilterInputTypeOfUserRatingFilterInput> {
  @override
  final Iterable<Type> types = const [
    GListFilterInputTypeOfUserRatingFilterInput,
    _$GListFilterInputTypeOfUserRatingFilterInput
  ];
  @override
  final String wireName = 'GListFilterInputTypeOfUserRatingFilterInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GListFilterInputTypeOfUserRatingFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.all;
    if (value != null) {
      result
        ..add('all')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserRatingFilterInput)));
    }
    value = object.none;
    if (value != null) {
      result
        ..add('none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserRatingFilterInput)));
    }
    value = object.some;
    if (value != null) {
      result
        ..add('some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserRatingFilterInput)));
    }
    value = object.any;
    if (value != null) {
      result
        ..add('any')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GListFilterInputTypeOfUserRatingFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GListFilterInputTypeOfUserRatingFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'all':
          result.all.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserRatingFilterInput))!
              as GUserRatingFilterInput);
          break;
        case 'none':
          result.none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserRatingFilterInput))!
              as GUserRatingFilterInput);
          break;
        case 'some':
          result.some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserRatingFilterInput))!
              as GUserRatingFilterInput);
          break;
        case 'any':
          result.any = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GListFilterInputTypeOfFrequentRouteFilterInputSerializer
    implements
        StructuredSerializer<GListFilterInputTypeOfFrequentRouteFilterInput> {
  @override
  final Iterable<Type> types = const [
    GListFilterInputTypeOfFrequentRouteFilterInput,
    _$GListFilterInputTypeOfFrequentRouteFilterInput
  ];
  @override
  final String wireName = 'GListFilterInputTypeOfFrequentRouteFilterInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GListFilterInputTypeOfFrequentRouteFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.all;
    if (value != null) {
      result
        ..add('all')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFrequentRouteFilterInput)));
    }
    value = object.none;
    if (value != null) {
      result
        ..add('none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFrequentRouteFilterInput)));
    }
    value = object.some;
    if (value != null) {
      result
        ..add('some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFrequentRouteFilterInput)));
    }
    value = object.any;
    if (value != null) {
      result
        ..add('any')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GListFilterInputTypeOfFrequentRouteFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GListFilterInputTypeOfFrequentRouteFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'all':
          result.all.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFrequentRouteFilterInput))!
              as GFrequentRouteFilterInput);
          break;
        case 'none':
          result.none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFrequentRouteFilterInput))!
              as GFrequentRouteFilterInput);
          break;
        case 'some':
          result.some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFrequentRouteFilterInput))!
              as GFrequentRouteFilterInput);
          break;
        case 'any':
          result.any = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GListFilterInputTypeOfSafiriCarUserFilterInputSerializer
    implements
        StructuredSerializer<GListFilterInputTypeOfSafiriCarUserFilterInput> {
  @override
  final Iterable<Type> types = const [
    GListFilterInputTypeOfSafiriCarUserFilterInput,
    _$GListFilterInputTypeOfSafiriCarUserFilterInput
  ];
  @override
  final String wireName = 'GListFilterInputTypeOfSafiriCarUserFilterInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GListFilterInputTypeOfSafiriCarUserFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.all;
    if (value != null) {
      result
        ..add('all')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSafiriCarUserFilterInput)));
    }
    value = object.none;
    if (value != null) {
      result
        ..add('none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSafiriCarUserFilterInput)));
    }
    value = object.some;
    if (value != null) {
      result
        ..add('some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSafiriCarUserFilterInput)));
    }
    value = object.any;
    if (value != null) {
      result
        ..add('any')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GListFilterInputTypeOfSafiriCarUserFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GListFilterInputTypeOfSafiriCarUserFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'all':
          result.all.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GSafiriCarUserFilterInput))!
              as GSafiriCarUserFilterInput);
          break;
        case 'none':
          result.none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GSafiriCarUserFilterInput))!
              as GSafiriCarUserFilterInput);
          break;
        case 'some':
          result.some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GSafiriCarUserFilterInput))!
              as GSafiriCarUserFilterInput);
          break;
        case 'any':
          result.any = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GComparableNullableOfDateTimeOffsetOperationFilterInputSerializer
    implements
        StructuredSerializer<
            GComparableNullableOfDateTimeOffsetOperationFilterInput> {
  @override
  final Iterable<Type> types = const [
    GComparableNullableOfDateTimeOffsetOperationFilterInput,
    _$GComparableNullableOfDateTimeOffsetOperationFilterInput
  ];
  @override
  final String wireName =
      'GComparableNullableOfDateTimeOffsetOperationFilterInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GComparableNullableOfDateTimeOffsetOperationFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.eq;
    if (value != null) {
      result
        ..add('eq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.neq;
    if (value != null) {
      result
        ..add('neq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.Gin;
    if (value != null) {
      result
        ..add('in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GDateTime)])));
    }
    value = object.nin;
    if (value != null) {
      result
        ..add('nin')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GDateTime)])));
    }
    value = object.gt;
    if (value != null) {
      result
        ..add('gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.ngt;
    if (value != null) {
      result
        ..add('ngt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.gte;
    if (value != null) {
      result
        ..add('gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.ngte;
    if (value != null) {
      result
        ..add('ngte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.lt;
    if (value != null) {
      result
        ..add('lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.nlt;
    if (value != null) {
      result
        ..add('nlt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.lte;
    if (value != null) {
      result
        ..add('lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.nlte;
    if (value != null) {
      result
        ..add('nlte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    return result;
  }

  @override
  GComparableNullableOfDateTimeOffsetOperationFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new GComparableNullableOfDateTimeOffsetOperationFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'eq':
          result.eq.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'neq':
          result.neq.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'in':
          result.Gin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'nin':
          result.nin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'gt':
          result.gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'ngt':
          result.ngt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'gte':
          result.gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'ngte':
          result.ngte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'lt':
          result.lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'nlt':
          result.nlt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'lte':
          result.lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'nlte':
          result.nlte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
      }
    }

    return result.build();
  }
}

class _$GSortEnumTypeSerializer implements PrimitiveSerializer<GSortEnumType> {
  @override
  final Iterable<Type> types = const <Type>[GSortEnumType];
  @override
  final String wireName = 'GSortEnumType';

  @override
  Object serialize(Serializers serializers, GSortEnumType object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GSortEnumType deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GSortEnumType.valueOf(serialized as String);
}

class _$GIdentificationDocumentSortInputSerializer
    implements StructuredSerializer<GIdentificationDocumentSortInput> {
  @override
  final Iterable<Type> types = const [
    GIdentificationDocumentSortInput,
    _$GIdentificationDocumentSortInput
  ];
  @override
  final String wireName = 'GIdentificationDocumentSortInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GIdentificationDocumentSortInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.nationalIdFront;
    if (value != null) {
      result
        ..add('nationalIdFront')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.nationalIdRear;
    if (value != null) {
      result
        ..add('nationalIdRear')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.drivingLicenceFront;
    if (value != null) {
      result
        ..add('drivingLicenceFront')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.drivingLicenceRear;
    if (value != null) {
      result
        ..add('drivingLicenceRear')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    return result;
  }

  @override
  GIdentificationDocumentSortInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GIdentificationDocumentSortInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'nationalIdFront':
          result.nationalIdFront = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'nationalIdRear':
          result.nationalIdRear = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'drivingLicenceFront':
          result.drivingLicenceFront = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'drivingLicenceRear':
          result.drivingLicenceRear = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
      }
    }

    return result.build();
  }
}

class _$GDeviceSortInputSerializer
    implements StructuredSerializer<GDeviceSortInput> {
  @override
  final Iterable<Type> types = const [GDeviceSortInput, _$GDeviceSortInput];
  @override
  final String wireName = 'GDeviceSortInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GDeviceSortInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.deviceRegToken;
    if (value != null) {
      result
        ..add('deviceRegToken')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.createdOn;
    if (value != null) {
      result
        ..add('createdOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.lastModifiedOn;
    if (value != null) {
      result
        ..add('lastModifiedOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.lastModifiedBy;
    if (value != null) {
      result
        ..add('lastModifiedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    return result;
  }

  @override
  GDeviceSortInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GDeviceSortInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'deviceRegToken':
          result.deviceRegToken = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'createdOn':
          result.createdOn = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'createdBy':
          result.createdBy = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'lastModifiedOn':
          result.lastModifiedOn = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'lastModifiedBy':
          result.lastModifiedBy = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
      }
    }

    return result.build();
  }
}

class _$GCountryFilterInputSerializer
    implements StructuredSerializer<GCountryFilterInput> {
  @override
  final Iterable<Type> types = const [
    GCountryFilterInput,
    _$GCountryFilterInput
  ];
  @override
  final String wireName = 'GCountryFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCountryFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.and;
    if (value != null) {
      result
        ..add('and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCountryFilterInput)])));
    }
    value = object.or;
    if (value != null) {
      result
        ..add('or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCountryFilterInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.code;
    if (value != null) {
      result
        ..add('code')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.abbrev;
    if (value != null) {
      result
        ..add('abbrev')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    return result;
  }

  @override
  GCountryFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCountryFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'and':
          result.and.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCountryFilterInput)]))!
              as BuiltList<Object?>);
          break;
        case 'or':
          result.or.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCountryFilterInput)]))!
              as BuiltList<Object?>);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'name':
          result.name.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'code':
          result.code.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'abbrev':
          result.abbrev.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCountrySortInputSerializer
    implements StructuredSerializer<GCountrySortInput> {
  @override
  final Iterable<Type> types = const [GCountrySortInput, _$GCountrySortInput];
  @override
  final String wireName = 'GCountrySortInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GCountrySortInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.code;
    if (value != null) {
      result
        ..add('code')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.abbrev;
    if (value != null) {
      result
        ..add('abbrev')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    return result;
  }

  @override
  GCountrySortInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCountrySortInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'code':
          result.code = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'abbrev':
          result.abbrev = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
      }
    }

    return result.build();
  }
}

class _$GComparableDateTimeOperationFilterInputSerializer
    implements StructuredSerializer<GComparableDateTimeOperationFilterInput> {
  @override
  final Iterable<Type> types = const [
    GComparableDateTimeOperationFilterInput,
    _$GComparableDateTimeOperationFilterInput
  ];
  @override
  final String wireName = 'GComparableDateTimeOperationFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GComparableDateTimeOperationFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.eq;
    if (value != null) {
      result
        ..add('eq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.neq;
    if (value != null) {
      result
        ..add('neq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.Gin;
    if (value != null) {
      result
        ..add('in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GDateTime)])));
    }
    value = object.nin;
    if (value != null) {
      result
        ..add('nin')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GDateTime)])));
    }
    value = object.gt;
    if (value != null) {
      result
        ..add('gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.ngt;
    if (value != null) {
      result
        ..add('ngt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.gte;
    if (value != null) {
      result
        ..add('gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.ngte;
    if (value != null) {
      result
        ..add('ngte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.lt;
    if (value != null) {
      result
        ..add('lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.nlt;
    if (value != null) {
      result
        ..add('nlt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.lte;
    if (value != null) {
      result
        ..add('lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.nlte;
    if (value != null) {
      result
        ..add('nlte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    return result;
  }

  @override
  GComparableDateTimeOperationFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GComparableDateTimeOperationFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'eq':
          result.eq.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'neq':
          result.neq.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'in':
          result.Gin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'nin':
          result.nin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'gt':
          result.gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'ngt':
          result.ngt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'gte':
          result.gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'ngte':
          result.ngte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'lt':
          result.lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'nlt':
          result.nlt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'lte':
          result.lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'nlte':
          result.nlte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
      }
    }

    return result.build();
  }
}

class _$GSeatFilterInputSerializer
    implements StructuredSerializer<GSeatFilterInput> {
  @override
  final Iterable<Type> types = const [GSeatFilterInput, _$GSeatFilterInput];
  @override
  final String wireName = 'GSeatFilterInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GSeatFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.and;
    if (value != null) {
      result
        ..add('and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GSeatFilterInput)])));
    }
    value = object.or;
    if (value != null) {
      result
        ..add('or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GSeatFilterInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.frontLeft;
    if (value != null) {
      result
        ..add('frontLeft')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.middleLeft;
    if (value != null) {
      result
        ..add('middleLeft')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.middleCentre;
    if (value != null) {
      result
        ..add('middleCentre')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.middleRight;
    if (value != null) {
      result
        ..add('middleRight')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.backLeft;
    if (value != null) {
      result
        ..add('backLeft')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.backCentre;
    if (value != null) {
      result
        ..add('backCentre')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.backRight;
    if (value != null) {
      result
        ..add('backRight')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    return result;
  }

  @override
  GSeatFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GSeatFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'and':
          result.and.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GSeatFilterInput)]))!
              as BuiltList<Object?>);
          break;
        case 'or':
          result.or.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GSeatFilterInput)]))!
              as BuiltList<Object?>);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'frontLeft':
          result.frontLeft.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'middleLeft':
          result.middleLeft.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'middleCentre':
          result.middleCentre.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'middleRight':
          result.middleRight.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'backLeft':
          result.backLeft.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'backCentre':
          result.backCentre.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'backRight':
          result.backRight.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GComparableDecimalOperationFilterInputSerializer
    implements StructuredSerializer<GComparableDecimalOperationFilterInput> {
  @override
  final Iterable<Type> types = const [
    GComparableDecimalOperationFilterInput,
    _$GComparableDecimalOperationFilterInput
  ];
  @override
  final String wireName = 'GComparableDecimalOperationFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GComparableDecimalOperationFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.eq;
    if (value != null) {
      result
        ..add('eq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDecimal)));
    }
    value = object.neq;
    if (value != null) {
      result
        ..add('neq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDecimal)));
    }
    value = object.Gin;
    if (value != null) {
      result
        ..add('in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GDecimal)])));
    }
    value = object.nin;
    if (value != null) {
      result
        ..add('nin')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GDecimal)])));
    }
    value = object.gt;
    if (value != null) {
      result
        ..add('gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDecimal)));
    }
    value = object.ngt;
    if (value != null) {
      result
        ..add('ngt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDecimal)));
    }
    value = object.gte;
    if (value != null) {
      result
        ..add('gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDecimal)));
    }
    value = object.ngte;
    if (value != null) {
      result
        ..add('ngte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDecimal)));
    }
    value = object.lt;
    if (value != null) {
      result
        ..add('lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDecimal)));
    }
    value = object.nlt;
    if (value != null) {
      result
        ..add('nlt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDecimal)));
    }
    value = object.lte;
    if (value != null) {
      result
        ..add('lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDecimal)));
    }
    value = object.nlte;
    if (value != null) {
      result
        ..add('nlte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDecimal)));
    }
    return result;
  }

  @override
  GComparableDecimalOperationFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GComparableDecimalOperationFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'eq':
          result.eq.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDecimal))! as GDecimal);
          break;
        case 'neq':
          result.neq.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDecimal))! as GDecimal);
          break;
        case 'in':
          result.Gin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GDecimal)]))!
              as BuiltList<Object?>);
          break;
        case 'nin':
          result.nin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GDecimal)]))!
              as BuiltList<Object?>);
          break;
        case 'gt':
          result.gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDecimal))! as GDecimal);
          break;
        case 'ngt':
          result.ngt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDecimal))! as GDecimal);
          break;
        case 'gte':
          result.gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDecimal))! as GDecimal);
          break;
        case 'ngte':
          result.ngte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDecimal))! as GDecimal);
          break;
        case 'lt':
          result.lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDecimal))! as GDecimal);
          break;
        case 'nlt':
          result.nlt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDecimal))! as GDecimal);
          break;
        case 'lte':
          result.lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDecimal))! as GDecimal);
          break;
        case 'nlte':
          result.nlte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDecimal))! as GDecimal);
          break;
      }
    }

    return result.build();
  }
}

class _$GComparableNullableOfTimeSpanOperationFilterInputSerializer
    implements
        StructuredSerializer<
            GComparableNullableOfTimeSpanOperationFilterInput> {
  @override
  final Iterable<Type> types = const [
    GComparableNullableOfTimeSpanOperationFilterInput,
    _$GComparableNullableOfTimeSpanOperationFilterInput
  ];
  @override
  final String wireName = 'GComparableNullableOfTimeSpanOperationFilterInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GComparableNullableOfTimeSpanOperationFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.eq;
    if (value != null) {
      result
        ..add('eq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.neq;
    if (value != null) {
      result
        ..add('neq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.Gin;
    if (value != null) {
      result
        ..add('in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GTimeSpan)])));
    }
    value = object.nin;
    if (value != null) {
      result
        ..add('nin')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GTimeSpan)])));
    }
    value = object.gt;
    if (value != null) {
      result
        ..add('gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.ngt;
    if (value != null) {
      result
        ..add('ngt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.gte;
    if (value != null) {
      result
        ..add('gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.ngte;
    if (value != null) {
      result
        ..add('ngte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.lt;
    if (value != null) {
      result
        ..add('lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.nlt;
    if (value != null) {
      result
        ..add('nlt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.lte;
    if (value != null) {
      result
        ..add('lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.nlte;
    if (value != null) {
      result
        ..add('nlte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    return result;
  }

  @override
  GComparableNullableOfTimeSpanOperationFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new GComparableNullableOfTimeSpanOperationFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'eq':
          result.eq.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'neq':
          result.neq.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'in':
          result.Gin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GTimeSpan)]))!
              as BuiltList<Object?>);
          break;
        case 'nin':
          result.nin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GTimeSpan)]))!
              as BuiltList<Object?>);
          break;
        case 'gt':
          result.gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'ngt':
          result.ngt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'gte':
          result.gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'ngte':
          result.ngte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'lt':
          result.lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'nlt':
          result.nlt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'lte':
          result.lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'nlte':
          result.nlte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
      }
    }

    return result.build();
  }
}

class _$GComparableNullableOfInt32OperationFilterInputSerializer
    implements
        StructuredSerializer<GComparableNullableOfInt32OperationFilterInput> {
  @override
  final Iterable<Type> types = const [
    GComparableNullableOfInt32OperationFilterInput,
    _$GComparableNullableOfInt32OperationFilterInput
  ];
  @override
  final String wireName = 'GComparableNullableOfInt32OperationFilterInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GComparableNullableOfInt32OperationFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.eq;
    if (value != null) {
      result
        ..add('eq')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.neq;
    if (value != null) {
      result
        ..add('neq')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.Gin;
    if (value != null) {
      result
        ..add('in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(int)])));
    }
    value = object.nin;
    if (value != null) {
      result
        ..add('nin')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(int)])));
    }
    value = object.gt;
    if (value != null) {
      result
        ..add('gt')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.ngt;
    if (value != null) {
      result
        ..add('ngt')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.gte;
    if (value != null) {
      result
        ..add('gte')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.ngte;
    if (value != null) {
      result
        ..add('ngte')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.lt;
    if (value != null) {
      result
        ..add('lt')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.nlt;
    if (value != null) {
      result
        ..add('nlt')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.lte;
    if (value != null) {
      result
        ..add('lte')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.nlte;
    if (value != null) {
      result
        ..add('nlte')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  GComparableNullableOfInt32OperationFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GComparableNullableOfInt32OperationFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'eq':
          result.eq = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'neq':
          result.neq = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'in':
          result.Gin.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(BuiltList, const [const FullType(int)]))!
              as BuiltList<Object?>);
          break;
        case 'nin':
          result.nin.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(BuiltList, const [const FullType(int)]))!
              as BuiltList<Object?>);
          break;
        case 'gt':
          result.gt = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'ngt':
          result.ngt = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'gte':
          result.gte = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'ngte':
          result.ngte = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'lt':
          result.lt = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'nlt':
          result.nlt = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'lte':
          result.lte = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'nlte':
          result.nlte = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$GListFilterInputTypeOfRideTransactionFilterInputSerializer
    implements
        StructuredSerializer<GListFilterInputTypeOfRideTransactionFilterInput> {
  @override
  final Iterable<Type> types = const [
    GListFilterInputTypeOfRideTransactionFilterInput,
    _$GListFilterInputTypeOfRideTransactionFilterInput
  ];
  @override
  final String wireName = 'GListFilterInputTypeOfRideTransactionFilterInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GListFilterInputTypeOfRideTransactionFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.all;
    if (value != null) {
      result
        ..add('all')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GRideTransactionFilterInput)));
    }
    value = object.none;
    if (value != null) {
      result
        ..add('none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GRideTransactionFilterInput)));
    }
    value = object.some;
    if (value != null) {
      result
        ..add('some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GRideTransactionFilterInput)));
    }
    value = object.any;
    if (value != null) {
      result
        ..add('any')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GListFilterInputTypeOfRideTransactionFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new GListFilterInputTypeOfRideTransactionFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'all':
          result.all.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GRideTransactionFilterInput))!
              as GRideTransactionFilterInput);
          break;
        case 'none':
          result.none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GRideTransactionFilterInput))!
              as GRideTransactionFilterInput);
          break;
        case 'some':
          result.some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GRideTransactionFilterInput))!
              as GRideTransactionFilterInput);
          break;
        case 'any':
          result.any = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GSeatSortInputSerializer
    implements StructuredSerializer<GSeatSortInput> {
  @override
  final Iterable<Type> types = const [GSeatSortInput, _$GSeatSortInput];
  @override
  final String wireName = 'GSeatSortInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GSeatSortInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.frontLeft;
    if (value != null) {
      result
        ..add('frontLeft')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.middleLeft;
    if (value != null) {
      result
        ..add('middleLeft')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.middleCentre;
    if (value != null) {
      result
        ..add('middleCentre')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.middleRight;
    if (value != null) {
      result
        ..add('middleRight')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.backLeft;
    if (value != null) {
      result
        ..add('backLeft')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.backCentre;
    if (value != null) {
      result
        ..add('backCentre')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    value = object.backRight;
    if (value != null) {
      result
        ..add('backRight')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSortEnumType)));
    }
    return result;
  }

  @override
  GSeatSortInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GSeatSortInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'frontLeft':
          result.frontLeft = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'middleLeft':
          result.middleLeft = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'middleCentre':
          result.middleCentre = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'middleRight':
          result.middleRight = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'backLeft':
          result.backLeft = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'backCentre':
          result.backCentre = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
        case 'backRight':
          result.backRight = serializers.deserialize(value,
              specifiedType: const FullType(GSortEnumType)) as GSortEnumType?;
          break;
      }
    }

    return result.build();
  }
}

class _$GListFilterInputTypeOfRideFilterInputSerializer
    implements StructuredSerializer<GListFilterInputTypeOfRideFilterInput> {
  @override
  final Iterable<Type> types = const [
    GListFilterInputTypeOfRideFilterInput,
    _$GListFilterInputTypeOfRideFilterInput
  ];
  @override
  final String wireName = 'GListFilterInputTypeOfRideFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GListFilterInputTypeOfRideFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.all;
    if (value != null) {
      result
        ..add('all')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GRideFilterInput)));
    }
    value = object.none;
    if (value != null) {
      result
        ..add('none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GRideFilterInput)));
    }
    value = object.some;
    if (value != null) {
      result
        ..add('some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GRideFilterInput)));
    }
    value = object.any;
    if (value != null) {
      result
        ..add('any')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GListFilterInputTypeOfRideFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GListFilterInputTypeOfRideFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'all':
          result.all.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GRideFilterInput))!
              as GRideFilterInput);
          break;
        case 'none':
          result.none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GRideFilterInput))!
              as GRideFilterInput);
          break;
        case 'some':
          result.some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GRideFilterInput))!
              as GRideFilterInput);
          break;
        case 'any':
          result.any = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GUserRatingFilterInputSerializer
    implements StructuredSerializer<GUserRatingFilterInput> {
  @override
  final Iterable<Type> types = const [
    GUserRatingFilterInput,
    _$GUserRatingFilterInput
  ];
  @override
  final String wireName = 'GUserRatingFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserRatingFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.and;
    if (value != null) {
      result
        ..add('and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserRatingFilterInput)])));
    }
    value = object.or;
    if (value != null) {
      result
        ..add('or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserRatingFilterInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.userThatRate;
    if (value != null) {
      result
        ..add('userThatRate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.userToRate;
    if (value != null) {
      result
        ..add('userToRate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.ratingValue;
    if (value != null) {
      result
        ..add('ratingValue')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableDoubleOperationFilterInput)));
    }
    value = object.rideId;
    if (value != null) {
      result
        ..add('rideId')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    value = object.levelOfSatisfaction;
    if (value != null) {
      result
        ..add('levelOfSatisfaction')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.comment;
    if (value != null) {
      result
        ..add('comment')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.dateOfRating;
    if (value != null) {
      result
        ..add('dateOfRating')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableDateTimeOperationFilterInput)));
    }
    value = object.timeOfRating;
    if (value != null) {
      result
        ..add('timeOfRating')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableTimeSpanOperationFilterInput)));
    }
    value = object.dateOfLastUpadte;
    if (value != null) {
      result
        ..add('dateOfLastUpadte')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableDateTimeOperationFilterInput)));
    }
    value = object.timeOfLastUpdate;
    if (value != null) {
      result
        ..add('timeOfLastUpdate')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableTimeSpanOperationFilterInput)));
    }
    value = object.reviewer;
    if (value != null) {
      result
        ..add('reviewer')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSafiriCarUserFilterInput)));
    }
    return result;
  }

  @override
  GUserRatingFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserRatingFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'and':
          result.and.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GUserRatingFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'or':
          result.or.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GUserRatingFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'userThatRate':
          result.userThatRate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'userToRate':
          result.userToRate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'ratingValue':
          result.ratingValue.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableDoubleOperationFilterInput))!
              as GComparableDoubleOperationFilterInput);
          break;
        case 'rideId':
          result.rideId.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
        case 'levelOfSatisfaction':
          result.levelOfSatisfaction.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'comment':
          result.comment.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'dateOfRating':
          result.dateOfRating.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableDateTimeOperationFilterInput))!
              as GComparableDateTimeOperationFilterInput);
          break;
        case 'timeOfRating':
          result.timeOfRating.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableTimeSpanOperationFilterInput))!
              as GComparableTimeSpanOperationFilterInput);
          break;
        case 'dateOfLastUpadte':
          result.dateOfLastUpadte.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableDateTimeOperationFilterInput))!
              as GComparableDateTimeOperationFilterInput);
          break;
        case 'timeOfLastUpdate':
          result.timeOfLastUpdate.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableTimeSpanOperationFilterInput))!
              as GComparableTimeSpanOperationFilterInput);
          break;
        case 'reviewer':
          result.reviewer.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GSafiriCarUserFilterInput))!
              as GSafiriCarUserFilterInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFrequentRouteFilterInputSerializer
    implements StructuredSerializer<GFrequentRouteFilterInput> {
  @override
  final Iterable<Type> types = const [
    GFrequentRouteFilterInput,
    _$GFrequentRouteFilterInput
  ];
  @override
  final String wireName = 'GFrequentRouteFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFrequentRouteFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.and;
    if (value != null) {
      result
        ..add('and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GFrequentRouteFilterInput)])));
    }
    value = object.or;
    if (value != null) {
      result
        ..add('or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GFrequentRouteFilterInput)])));
    }
    value = object.origin;
    if (value != null) {
      result
        ..add('origin')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.destination;
    if (value != null) {
      result
        ..add('destination')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.image;
    if (value != null) {
      result
        ..add('image')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.color;
    if (value != null) {
      result
        ..add('color')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GColorCustomFilterInput)));
    }
    value = object.userId;
    if (value != null) {
      result
        ..add('userId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.createdDate;
    if (value != null) {
      result
        ..add('createdDate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GComparableNullableOfDateTimeOperationFilterInput)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    return result;
  }

  @override
  GFrequentRouteFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFrequentRouteFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'and':
          result.and.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFrequentRouteFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'or':
          result.or.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFrequentRouteFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'origin':
          result.origin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'destination':
          result.destination.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'image':
          result.image.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'color':
          result.color.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GColorCustomFilterInput))!
              as GColorCustomFilterInput);
          break;
        case 'userId':
          result.userId.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'createdDate':
          result.createdDate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GComparableNullableOfDateTimeOperationFilterInput))!
              as GComparableNullableOfDateTimeOperationFilterInput);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GComparableTimeSpanOperationFilterInputSerializer
    implements StructuredSerializer<GComparableTimeSpanOperationFilterInput> {
  @override
  final Iterable<Type> types = const [
    GComparableTimeSpanOperationFilterInput,
    _$GComparableTimeSpanOperationFilterInput
  ];
  @override
  final String wireName = 'GComparableTimeSpanOperationFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GComparableTimeSpanOperationFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.eq;
    if (value != null) {
      result
        ..add('eq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.neq;
    if (value != null) {
      result
        ..add('neq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.Gin;
    if (value != null) {
      result
        ..add('in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GTimeSpan)])));
    }
    value = object.nin;
    if (value != null) {
      result
        ..add('nin')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GTimeSpan)])));
    }
    value = object.gt;
    if (value != null) {
      result
        ..add('gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.ngt;
    if (value != null) {
      result
        ..add('ngt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.gte;
    if (value != null) {
      result
        ..add('gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.ngte;
    if (value != null) {
      result
        ..add('ngte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.lt;
    if (value != null) {
      result
        ..add('lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.nlt;
    if (value != null) {
      result
        ..add('nlt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.lte;
    if (value != null) {
      result
        ..add('lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.nlte;
    if (value != null) {
      result
        ..add('nlte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    return result;
  }

  @override
  GComparableTimeSpanOperationFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GComparableTimeSpanOperationFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'eq':
          result.eq.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'neq':
          result.neq.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'in':
          result.Gin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GTimeSpan)]))!
              as BuiltList<Object?>);
          break;
        case 'nin':
          result.nin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GTimeSpan)]))!
              as BuiltList<Object?>);
          break;
        case 'gt':
          result.gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'ngt':
          result.ngt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'gte':
          result.gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'ngte':
          result.ngte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'lt':
          result.lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'nlt':
          result.nlt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'lte':
          result.lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'nlte':
          result.nlte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
      }
    }

    return result.build();
  }
}

class _$GColorCustomFilterInputSerializer
    implements StructuredSerializer<GColorCustomFilterInput> {
  @override
  final Iterable<Type> types = const [
    GColorCustomFilterInput,
    _$GColorCustomFilterInput
  ];
  @override
  final String wireName = 'GColorCustomFilterInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GColorCustomFilterInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.and;
    if (value != null) {
      result
        ..add('and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GColorCustomFilterInput)])));
    }
    value = object.or;
    if (value != null) {
      result
        ..add('or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GColorCustomFilterInput)])));
    }
    value = object.r;
    if (value != null) {
      result
        ..add('r')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.g;
    if (value != null) {
      result
        ..add('g')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.b;
    if (value != null) {
      result
        ..add('b')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.a;
    if (value != null) {
      result
        ..add('a')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStringOperationFilterInput)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GComparableInt32OperationFilterInput)));
    }
    return result;
  }

  @override
  GColorCustomFilterInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GColorCustomFilterInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'and':
          result.and.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GColorCustomFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'or':
          result.or.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GColorCustomFilterInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'r':
          result.r.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'g':
          result.g.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'b':
          result.b.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'a':
          result.a.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GStringOperationFilterInput))!
              as GStringOperationFilterInput);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GComparableInt32OperationFilterInput))!
              as GComparableInt32OperationFilterInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCreateRideRequestInputSerializer
    implements StructuredSerializer<GCreateRideRequestInput> {
  @override
  final Iterable<Type> types = const [
    GCreateRideRequestInput,
    _$GCreateRideRequestInput
  ];
  @override
  final String wireName = 'GCreateRideRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCreateRideRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'name',
      serializers.serialize(object.name, specifiedType: const FullType(String)),
      'placeofStart',
      serializers.serialize(object.placeofStart,
          specifiedType: const FullType(String)),
      'destination',
      serializers.serialize(object.destination,
          specifiedType: const FullType(String)),
      'departureDate',
      serializers.serialize(object.departureDate,
          specifiedType: const FullType(String)),
      'duration',
      serializers.serialize(object.duration,
          specifiedType: const FullType(String)),
      'estimatePrice',
      serializers.serialize(object.estimatePrice,
          specifiedType: const FullType(double)),
      'estimateDistance',
      serializers.serialize(object.estimateDistance,
          specifiedType: const FullType(String)),
      'numberOfPeople',
      serializers.serialize(object.numberOfPeople,
          specifiedType: const FullType(int)),
      'maximumCarryWeight',
      serializers.serialize(object.maximumCarryWeight,
          specifiedType: const FullType(int)),
      'carId',
      serializers.serialize(object.carId,
          specifiedType: const FullType(String)),
      'seat',
      serializers.serialize(object.seat,
          specifiedType: const FullType(GSeatInput)),
      'departureTime',
      serializers.serialize(object.departureTime,
          specifiedType: const FullType(String)),
    ];
    Object? value;
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.allowedBehDesc;
    if (value != null) {
      result
        ..add('allowedBehDesc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.rideIndex;
    if (value != null) {
      result
        ..add('rideIndex')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.exactPickupLocation;
    if (value != null) {
      result
        ..add('exactPickupLocation')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.exactDropOffLocation;
    if (value != null) {
      result
        ..add('exactDropOffLocation')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.isRecurring;
    if (value != null) {
      result
        ..add('isRecurring')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GCreateRideRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCreateRideRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'placeofStart':
          result.placeofStart = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'destination':
          result.destination = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'departureDate':
          result.departureDate = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'duration':
          result.duration = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'estimatePrice':
          result.estimatePrice = serializers.deserialize(value,
              specifiedType: const FullType(double))! as double;
          break;
        case 'estimateDistance':
          result.estimateDistance = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'numberOfPeople':
          result.numberOfPeople = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'maximumCarryWeight':
          result.maximumCarryWeight = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'carId':
          result.carId = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'seat':
          result.seat.replace(serializers.deserialize(value,
              specifiedType: const FullType(GSeatInput))! as GSeatInput);
          break;
        case 'departureTime':
          result.departureTime = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'allowedBehDesc':
          result.allowedBehDesc = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'rideIndex':
          result.rideIndex = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'exactPickupLocation':
          result.exactPickupLocation = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'exactDropOffLocation':
          result.exactDropOffLocation = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'isRecurring':
          result.isRecurring = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GContactUsRequestInputSerializer
    implements StructuredSerializer<GContactUsRequestInput> {
  @override
  final Iterable<Type> types = const [
    GContactUsRequestInput,
    _$GContactUsRequestInput
  ];
  @override
  final String wireName = 'GContactUsRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GContactUsRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'name',
      serializers.serialize(object.name, specifiedType: const FullType(String)),
      'email',
      serializers.serialize(object.email,
          specifiedType: const FullType(String)),
      'message',
      serializers.serialize(object.message,
          specifiedType: const FullType(String)),
    ];

    return result;
  }

  @override
  GContactUsRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GContactUsRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'message':
          result.message = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GToggleUserStatusRequestInputSerializer
    implements StructuredSerializer<GToggleUserStatusRequestInput> {
  @override
  final Iterable<Type> types = const [
    GToggleUserStatusRequestInput,
    _$GToggleUserStatusRequestInput
  ];
  @override
  final String wireName = 'GToggleUserStatusRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GToggleUserStatusRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'activateUser',
      serializers.serialize(object.activateUser,
          specifiedType: const FullType(bool)),
      'userId',
      serializers.serialize(object.userId,
          specifiedType: const FullType(String)),
    ];

    return result;
  }

  @override
  GToggleUserStatusRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GToggleUserStatusRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'activateUser':
          result.activateUser = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
        case 'userId':
          result.userId = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GUpdateIdentificationDocumentRequestInputSerializer
    implements StructuredSerializer<GUpdateIdentificationDocumentRequestInput> {
  @override
  final Iterable<Type> types = const [
    GUpdateIdentificationDocumentRequestInput,
    _$GUpdateIdentificationDocumentRequestInput
  ];
  @override
  final String wireName = 'GUpdateIdentificationDocumentRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUpdateIdentificationDocumentRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'email',
      serializers.serialize(object.email,
          specifiedType: const FullType(String)),
    ];
    Object? value;
    value = object.identificationDocument;
    if (value != null) {
      result
        ..add('identificationDocument')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GIdentificationDocumentInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GUpdateIdentificationDocumentRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUpdateIdentificationDocumentRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'identificationDocument':
          result.identificationDocument.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GIdentificationDocumentInput))!
              as GIdentificationDocumentInput);
          break;
        case 'updatedBy':
          result.updatedBy = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GUpdateRequestInputSerializer
    implements StructuredSerializer<GUpdateRequestInput> {
  @override
  final Iterable<Type> types = const [
    GUpdateRequestInput,
    _$GUpdateRequestInput
  ];
  @override
  final String wireName = 'GUpdateRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUpdateRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'email',
      serializers.serialize(object.email,
          specifiedType: const FullType(String)),
    ];
    Object? value;
    value = object.firstName;
    if (value != null) {
      result
        ..add('firstName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.lastName;
    if (value != null) {
      result
        ..add('lastName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.userName;
    if (value != null) {
      result
        ..add('userName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.aboutMe;
    if (value != null) {
      result
        ..add('aboutMe')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.phoneNumber;
    if (value != null) {
      result
        ..add('phoneNumber')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GUpdateRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUpdateRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'firstName':
          result.firstName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'lastName':
          result.lastName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'userName':
          result.userName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'aboutMe':
          result.aboutMe = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'phoneNumber':
          result.phoneNumber = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'updatedBy':
          result.updatedBy = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GRegisterRequestInputSerializer
    implements StructuredSerializer<GRegisterRequestInput> {
  @override
  final Iterable<Type> types = const [
    GRegisterRequestInput,
    _$GRegisterRequestInput
  ];
  @override
  final String wireName = 'GRegisterRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GRegisterRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'firstName',
      serializers.serialize(object.firstName,
          specifiedType: const FullType(String)),
      'lastName',
      serializers.serialize(object.lastName,
          specifiedType: const FullType(String)),
      'email',
      serializers.serialize(object.email,
          specifiedType: const FullType(String)),
      'nationalId',
      serializers.serialize(object.nationalId,
          specifiedType: const FullType(String)),
      'userName',
      serializers.serialize(object.userName,
          specifiedType: const FullType(String)),
      'password',
      serializers.serialize(object.password,
          specifiedType: const FullType(String)),
      'confirmPassword',
      serializers.serialize(object.confirmPassword,
          specifiedType: const FullType(String)),
      'phoneNumber',
      serializers.serialize(object.phoneNumber,
          specifiedType: const FullType(String)),
      'role',
      serializers.serialize(object.role, specifiedType: const FullType(String)),
      'activateUser',
      serializers.serialize(object.activateUser,
          specifiedType: const FullType(bool)),
      'autoConfirmEmail',
      serializers.serialize(object.autoConfirmEmail,
          specifiedType: const FullType(bool)),
      'createdBy',
      serializers.serialize(object.createdBy,
          specifiedType: const FullType(String)),
      'totalRating',
      serializers.serialize(object.totalRating,
          specifiedType: const FullType(int)),
      'averageRating',
      serializers.serialize(object.averageRating,
          specifiedType: const FullType(double)),
      'locationDto',
      serializers.serialize(object.locationDto,
          specifiedType: const FullType(GLocationDtoInput)),
    ];
    Object? value;
    value = object.identificationDocument;
    if (value != null) {
      result
        ..add('identificationDocument')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GIdentificationDocumentInput)));
    }
    value = object.referalCode;
    if (value != null) {
      result
        ..add('referalCode')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.deviceDto;
    if (value != null) {
      result
        ..add('deviceDto')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDeviceDtoInput)));
    }
    return result;
  }

  @override
  GRegisterRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GRegisterRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'firstName':
          result.firstName = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'lastName':
          result.lastName = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'nationalId':
          result.nationalId = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'userName':
          result.userName = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'password':
          result.password = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'confirmPassword':
          result.confirmPassword = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'phoneNumber':
          result.phoneNumber = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'role':
          result.role = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'activateUser':
          result.activateUser = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
        case 'autoConfirmEmail':
          result.autoConfirmEmail = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
        case 'createdBy':
          result.createdBy = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'identificationDocument':
          result.identificationDocument.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GIdentificationDocumentInput))!
              as GIdentificationDocumentInput);
          break;
        case 'totalRating':
          result.totalRating = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'averageRating':
          result.averageRating = serializers.deserialize(value,
              specifiedType: const FullType(double))! as double;
          break;
        case 'referalCode':
          result.referalCode = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'locationDto':
          result.locationDto.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GLocationDtoInput))!
              as GLocationDtoInput);
          break;
        case 'deviceDto':
          result.deviceDto.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GDeviceDtoInput))!
              as GDeviceDtoInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GResetPasswordRequestInputSerializer
    implements StructuredSerializer<GResetPasswordRequestInput> {
  @override
  final Iterable<Type> types = const [
    GResetPasswordRequestInput,
    _$GResetPasswordRequestInput
  ];
  @override
  final String wireName = 'GResetPasswordRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GResetPasswordRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'email',
      serializers.serialize(object.email,
          specifiedType: const FullType(String)),
      'password',
      serializers.serialize(object.password,
          specifiedType: const FullType(String)),
      'confirmPassword',
      serializers.serialize(object.confirmPassword,
          specifiedType: const FullType(String)),
      'token',
      serializers.serialize(object.token,
          specifiedType: const FullType(String)),
    ];

    return result;
  }

  @override
  GResetPasswordRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GResetPasswordRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'password':
          result.password = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'confirmPassword':
          result.confirmPassword = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'token':
          result.token = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GForgotPasswordRequestInputSerializer
    implements StructuredSerializer<GForgotPasswordRequestInput> {
  @override
  final Iterable<Type> types = const [
    GForgotPasswordRequestInput,
    _$GForgotPasswordRequestInput
  ];
  @override
  final String wireName = 'GForgotPasswordRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GForgotPasswordRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'email',
      serializers.serialize(object.email,
          specifiedType: const FullType(String)),
    ];

    return result;
  }

  @override
  GForgotPasswordRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GForgotPasswordRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GUpdateUserRolesRequestInputSerializer
    implements StructuredSerializer<GUpdateUserRolesRequestInput> {
  @override
  final Iterable<Type> types = const [
    GUpdateUserRolesRequestInput,
    _$GUpdateUserRolesRequestInput
  ];
  @override
  final String wireName = 'GUpdateUserRolesRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUpdateUserRolesRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'userId',
      serializers.serialize(object.userId,
          specifiedType: const FullType(String)),
      'userRoles',
      serializers.serialize(object.userRoles,
          specifiedType: const FullType(
              BuiltList, const [const FullType(GUserRoleModelInput)])),
    ];

    return result;
  }

  @override
  GUpdateUserRolesRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUpdateUserRolesRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'userId':
          result.userId = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'userRoles':
          result.userRoles.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserRoleModelInput)]))!
              as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GRoleClaimRequestInputSerializer
    implements StructuredSerializer<GRoleClaimRequestInput> {
  @override
  final Iterable<Type> types = const [
    GRoleClaimRequestInput,
    _$GRoleClaimRequestInput
  ];
  @override
  final String wireName = 'GRoleClaimRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GRoleClaimRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(int)),
      'roleId',
      serializers.serialize(object.roleId,
          specifiedType: const FullType(String)),
      'type',
      serializers.serialize(object.type, specifiedType: const FullType(String)),
      'value',
      serializers.serialize(object.value,
          specifiedType: const FullType(String)),
      'description',
      serializers.serialize(object.description,
          specifiedType: const FullType(String)),
      'group',
      serializers.serialize(object.group,
          specifiedType: const FullType(String)),
      'selected',
      serializers.serialize(object.selected,
          specifiedType: const FullType(bool)),
    ];

    return result;
  }

  @override
  GRoleClaimRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GRoleClaimRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'roleId':
          result.roleId = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'type':
          result.type = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'value':
          result.value = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'description':
          result.description = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'group':
          result.group = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'selected':
          result.selected = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
      }
    }

    return result.build();
  }
}

class _$GPermissionRequestInputSerializer
    implements StructuredSerializer<GPermissionRequestInput> {
  @override
  final Iterable<Type> types = const [
    GPermissionRequestInput,
    _$GPermissionRequestInput
  ];
  @override
  final String wireName = 'GPermissionRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GPermissionRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'roleId',
      serializers.serialize(object.roleId,
          specifiedType: const FullType(String)),
      'roleClaims',
      serializers.serialize(object.roleClaims,
          specifiedType: const FullType(
              BuiltList, const [const FullType(GRoleClaimRequestInput)])),
    ];

    return result;
  }

  @override
  GPermissionRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GPermissionRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'roleId':
          result.roleId = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'roleClaims':
          result.roleClaims.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GRoleClaimRequestInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GRoleRequestInputSerializer
    implements StructuredSerializer<GRoleRequestInput> {
  @override
  final Iterable<Type> types = const [GRoleRequestInput, _$GRoleRequestInput];
  @override
  final String wireName = 'GRoleRequestInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GRoleRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(String)),
      'name',
      serializers.serialize(object.name, specifiedType: const FullType(String)),
      'description',
      serializers.serialize(object.description,
          specifiedType: const FullType(String)),
    ];

    return result;
  }

  @override
  GRoleRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GRoleRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'description':
          result.description = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GFrequentRouteInputSerializer
    implements StructuredSerializer<GFrequentRouteInput> {
  @override
  final Iterable<Type> types = const [
    GFrequentRouteInput,
    _$GFrequentRouteInput
  ];
  @override
  final String wireName = 'GFrequentRouteInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFrequentRouteInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'origin',
      serializers.serialize(object.origin,
          specifiedType: const FullType(String)),
      'destination',
      serializers.serialize(object.destination,
          specifiedType: const FullType(String)),
      'image',
      serializers.serialize(object.image,
          specifiedType: const FullType(String)),
      'color',
      serializers.serialize(object.color,
          specifiedType: const FullType(GColorCustomInput)),
      'userId',
      serializers.serialize(object.userId,
          specifiedType: const FullType(String)),
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(int)),
    ];
    Object? value;
    value = object.createdDate;
    if (value != null) {
      result
        ..add('createdDate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    return result;
  }

  @override
  GFrequentRouteInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFrequentRouteInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'origin':
          result.origin = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'destination':
          result.destination = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'image':
          result.image = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'color':
          result.color.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GColorCustomInput))!
              as GColorCustomInput);
          break;
        case 'userId':
          result.userId = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'createdDate':
          result.createdDate.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$GResfreshTokenRequestInputSerializer
    implements StructuredSerializer<GResfreshTokenRequestInput> {
  @override
  final Iterable<Type> types = const [
    GResfreshTokenRequestInput,
    _$GResfreshTokenRequestInput
  ];
  @override
  final String wireName = 'GResfreshTokenRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GResfreshTokenRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'token',
      serializers.serialize(object.token,
          specifiedType: const FullType(String)),
      'refreshToken',
      serializers.serialize(object.refreshToken,
          specifiedType: const FullType(String)),
    ];

    return result;
  }

  @override
  GResfreshTokenRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GResfreshTokenRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'token':
          result.token = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'refreshToken':
          result.refreshToken = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GTokenRequestInputSerializer
    implements StructuredSerializer<GTokenRequestInput> {
  @override
  final Iterable<Type> types = const [GTokenRequestInput, _$GTokenRequestInput];
  @override
  final String wireName = 'GTokenRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GTokenRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'email',
      serializers.serialize(object.email,
          specifiedType: const FullType(String)),
      'password',
      serializers.serialize(object.password,
          specifiedType: const FullType(String)),
    ];

    return result;
  }

  @override
  GTokenRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GTokenRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'password':
          result.password = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GUpdateProfileRequestInputSerializer
    implements StructuredSerializer<GUpdateProfileRequestInput> {
  @override
  final Iterable<Type> types = const [
    GUpdateProfileRequestInput,
    _$GUpdateProfileRequestInput
  ];
  @override
  final String wireName = 'GUpdateProfileRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUpdateProfileRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'firstName',
      serializers.serialize(object.firstName,
          specifiedType: const FullType(String)),
      'lastName',
      serializers.serialize(object.lastName,
          specifiedType: const FullType(String)),
      'email',
      serializers.serialize(object.email,
          specifiedType: const FullType(String)),
      'identificationDocumentUrl',
      serializers.serialize(object.identificationDocumentUrl,
          specifiedType: const FullType(String)),
    ];
    Object? value;
    value = object.phoneNumber;
    if (value != null) {
      result
        ..add('phoneNumber')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GUpdateProfileRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUpdateProfileRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'phoneNumber':
          result.phoneNumber = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'firstName':
          result.firstName = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'lastName':
          result.lastName = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'identificationDocumentUrl':
          result.identificationDocumentUrl = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GPasswordResetRequestByPhoneInputSerializer
    implements StructuredSerializer<GPasswordResetRequestByPhoneInput> {
  @override
  final Iterable<Type> types = const [
    GPasswordResetRequestByPhoneInput,
    _$GPasswordResetRequestByPhoneInput
  ];
  @override
  final String wireName = 'GPasswordResetRequestByPhoneInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GPasswordResetRequestByPhoneInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'password',
      serializers.serialize(object.password,
          specifiedType: const FullType(String)),
      'confirmPassword',
      serializers.serialize(object.confirmPassword,
          specifiedType: const FullType(String)),
      'phoneNumber',
      serializers.serialize(object.phoneNumber,
          specifiedType: const FullType(String)),
    ];

    return result;
  }

  @override
  GPasswordResetRequestByPhoneInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GPasswordResetRequestByPhoneInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'password':
          result.password = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'confirmPassword':
          result.confirmPassword = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'phoneNumber':
          result.phoneNumber = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GChangePasswordRequestInputSerializer
    implements StructuredSerializer<GChangePasswordRequestInput> {
  @override
  final Iterable<Type> types = const [
    GChangePasswordRequestInput,
    _$GChangePasswordRequestInput
  ];
  @override
  final String wireName = 'GChangePasswordRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GChangePasswordRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'password',
      serializers.serialize(object.password,
          specifiedType: const FullType(String)),
      'newPassword',
      serializers.serialize(object.newPassword,
          specifiedType: const FullType(String)),
      'phoneNumber',
      serializers.serialize(object.phoneNumber,
          specifiedType: const FullType(String)),
    ];

    return result;
  }

  @override
  GChangePasswordRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GChangePasswordRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'password':
          result.password = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'newPassword':
          result.newPassword = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'phoneNumber':
          result.phoneNumber = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GTransactRequestInputSerializer
    implements StructuredSerializer<GTransactRequestInput> {
  @override
  final Iterable<Type> types = const [
    GTransactRequestInput,
    _$GTransactRequestInput
  ];
  @override
  final String wireName = 'GTransactRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GTransactRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'phoneNumber',
      serializers.serialize(object.phoneNumber,
          specifiedType: const FullType(String)),
      'amount',
      serializers.serialize(object.amount,
          specifiedType: const FullType(String)),
      'callBackUrl',
      serializers.serialize(object.callBackUrl,
          specifiedType: const FullType(String)),
    ];

    return result;
  }

  @override
  GTransactRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GTransactRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'phoneNumber':
          result.phoneNumber = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'amount':
          result.amount = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'callBackUrl':
          result.callBackUrl = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GTransactB2CRequestInputSerializer
    implements StructuredSerializer<GTransactB2CRequestInput> {
  @override
  final Iterable<Type> types = const [
    GTransactB2CRequestInput,
    _$GTransactB2CRequestInput
  ];
  @override
  final String wireName = 'GTransactB2CRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GTransactB2CRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'phoneNumber',
      serializers.serialize(object.phoneNumber,
          specifiedType: const FullType(String)),
      'amount',
      serializers.serialize(object.amount,
          specifiedType: const FullType(String)),
      'callBackUrl',
      serializers.serialize(object.callBackUrl,
          specifiedType: const FullType(String)),
      'occassion',
      serializers.serialize(object.occassion,
          specifiedType: const FullType(String)),
      'remarks',
      serializers.serialize(object.remarks,
          specifiedType: const FullType(String)),
      'queueTimeOutURL',
      serializers.serialize(object.queueTimeOutURL,
          specifiedType: const FullType(String)),
      'rideId',
      serializers.serialize(object.rideId, specifiedType: const FullType(int)),
    ];
    Object? value;
    value = object.userId;
    if (value != null) {
      result
        ..add('userId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GTransactB2CRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GTransactB2CRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'phoneNumber':
          result.phoneNumber = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'amount':
          result.amount = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'callBackUrl':
          result.callBackUrl = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'occassion':
          result.occassion = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'remarks':
          result.remarks = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'queueTimeOutURL':
          result.queueTimeOutURL = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'rideId':
          result.rideId = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'userId':
          result.userId = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GTransactionStatusRequestDtoInputSerializer
    implements StructuredSerializer<GTransactionStatusRequestDtoInput> {
  @override
  final Iterable<Type> types = const [
    GTransactionStatusRequestDtoInput,
    _$GTransactionStatusRequestDtoInput
  ];
  @override
  final String wireName = 'GTransactionStatusRequestDtoInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GTransactionStatusRequestDtoInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'transactionID',
      serializers.serialize(object.transactionID,
          specifiedType: const FullType(String)),
    ];
    Object? value;
    value = object.resultURL;
    if (value != null) {
      result
        ..add('resultURL')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.queueTimeOutURL;
    if (value != null) {
      result
        ..add('queueTimeOutURL')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.remarks;
    if (value != null) {
      result
        ..add('remarks')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.occasion;
    if (value != null) {
      result
        ..add('occasion')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GTransactionStatusRequestDtoInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GTransactionStatusRequestDtoInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'transactionID':
          result.transactionID = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'resultURL':
          result.resultURL = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'queueTimeOutURL':
          result.queueTimeOutURL = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'remarks':
          result.remarks = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'occasion':
          result.occasion = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GReverseRequestInputSerializer
    implements StructuredSerializer<GReverseRequestInput> {
  @override
  final Iterable<Type> types = const [
    GReverseRequestInput,
    _$GReverseRequestInput
  ];
  @override
  final String wireName = 'GReverseRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GReverseRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.initiator;
    if (value != null) {
      result
        ..add('initiator')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.securityCredential;
    if (value != null) {
      result
        ..add('securityCredential')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.commandID;
    if (value != null) {
      result
        ..add('commandID')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCommandType)));
    }
    value = object.transactionID;
    if (value != null) {
      result
        ..add('transactionID')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.amount;
    if (value != null) {
      result
        ..add('amount')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.receiverParty;
    if (value != null) {
      result
        ..add('receiverParty')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.recieverIdentifierType;
    if (value != null) {
      result
        ..add('recieverIdentifierType')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.remarks;
    if (value != null) {
      result
        ..add('remarks')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.queueTimeOutURL;
    if (value != null) {
      result
        ..add('queueTimeOutURL')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.resultURL;
    if (value != null) {
      result
        ..add('resultURL')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.occassion;
    if (value != null) {
      result
        ..add('occassion')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GReverseRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GReverseRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'initiator':
          result.initiator = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'securityCredential':
          result.securityCredential = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'commandID':
          result.commandID = serializers.deserialize(value,
              specifiedType: const FullType(GCommandType)) as GCommandType?;
          break;
        case 'transactionID':
          result.transactionID = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'amount':
          result.amount = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'receiverParty':
          result.receiverParty = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'recieverIdentifierType':
          result.recieverIdentifierType = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'remarks':
          result.remarks = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'queueTimeOutURL':
          result.queueTimeOutURL = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'resultURL':
          result.resultURL = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'occassion':
          result.occassion = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GChartDtoInputSerializer
    implements StructuredSerializer<GChartDtoInput> {
  @override
  final Iterable<Type> types = const [GChartDtoInput, _$GChartDtoInput];
  @override
  final String wireName = 'GChartDtoInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GChartDtoInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(String)),
      'from',
      serializers.serialize(object.from, specifiedType: const FullType(String)),
      'to',
      serializers.serialize(object.to, specifiedType: const FullType(String)),
      'dateSend',
      serializers.serialize(object.dateSend,
          specifiedType: const FullType(String)),
      'message',
      serializers.serialize(object.message,
          specifiedType: const FullType(String)),
      'topic',
      serializers.serialize(object.topic,
          specifiedType: const FullType(String)),
    ];
    Object? value;
    value = object.deviceRegToken;
    if (value != null) {
      result
        ..add('deviceRegToken')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GChartDtoInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GChartDtoInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'from':
          result.from = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'to':
          result.to = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'dateSend':
          result.dateSend = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'message':
          result.message = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'topic':
          result.topic = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'deviceRegToken':
          result.deviceRegToken = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GSubscriberEmailInputSerializer
    implements StructuredSerializer<GSubscriberEmailInput> {
  @override
  final Iterable<Type> types = const [
    GSubscriberEmailInput,
    _$GSubscriberEmailInput
  ];
  @override
  final String wireName = 'GSubscriberEmailInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GSubscriberEmailInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GSubscriberEmailInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GSubscriberEmailInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GUploadRequestInputSerializer
    implements StructuredSerializer<GUploadRequestInput> {
  @override
  final Iterable<Type> types = const [
    GUploadRequestInput,
    _$GUploadRequestInput
  ];
  @override
  final String wireName = 'GUploadRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUploadRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.fileName;
    if (value != null) {
      result
        ..add('fileName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.extension;
    if (value != null) {
      result
        ..add('extension')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.uploadType;
    if (value != null) {
      result
        ..add('uploadType')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUploadType)));
    }
    value = object.data;
    if (value != null) {
      result
        ..add('data')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GByte)])));
    }
    return result;
  }

  @override
  GUploadRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUploadRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'extension':
          result.extension = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'uploadType':
          result.uploadType = serializers.deserialize(value,
              specifiedType: const FullType(GUploadType)) as GUploadType?;
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(BuiltList, const [const FullType(GByte)]))!
              as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GUploadRequestFlInputSerializer
    implements StructuredSerializer<GUploadRequestFlInput> {
  @override
  final Iterable<Type> types = const [
    GUploadRequestFlInput,
    _$GUploadRequestFlInput
  ];
  @override
  final String wireName = 'GUploadRequestFlInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUploadRequestFlInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.fileName;
    if (value != null) {
      result
        ..add('fileName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.extension;
    if (value != null) {
      result
        ..add('extension')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.uploadType;
    if (value != null) {
      result
        ..add('uploadType')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUploadType)));
    }
    value = object.data;
    if (value != null) {
      result
        ..add('data')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GUploadRequestFlInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUploadRequestFlInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'extension':
          result.extension = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'uploadType':
          result.uploadType = serializers.deserialize(value,
              specifiedType: const FullType(GUploadType)) as GUploadType?;
          break;
        case 'data':
          result.data = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GDownloadRequestInputSerializer
    implements StructuredSerializer<GDownloadRequestInput> {
  @override
  final Iterable<Type> types = const [
    GDownloadRequestInput,
    _$GDownloadRequestInput
  ];
  @override
  final String wireName = 'GDownloadRequestInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GDownloadRequestInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.fileName;
    if (value != null) {
      result
        ..add('fileName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.downloadType;
    if (value != null) {
      result
        ..add('downloadType')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUploadType)));
    }
    return result;
  }

  @override
  GDownloadRequestInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GDownloadRequestInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'downloadType':
          result.downloadType = serializers.deserialize(value,
              specifiedType: const FullType(GUploadType)) as GUploadType?;
          break;
      }
    }

    return result.build();
  }
}

class _$GCarInputSerializer implements StructuredSerializer<GCarInput> {
  @override
  final Iterable<Type> types = const [GCarInput, _$GCarInput];
  @override
  final String wireName = 'GCarInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GCarInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(String)),
      'color',
      serializers.serialize(object.color,
          specifiedType: const FullType(String)),
      'model',
      serializers.serialize(object.model,
          specifiedType: const FullType(String)),
      'licensePlate',
      serializers.serialize(object.licensePlate,
          specifiedType: const FullType(String)),
      'imageUrl',
      serializers.serialize(object.imageUrl,
          specifiedType: const FullType(String)),
      'active',
      serializers.serialize(object.active, specifiedType: const FullType(bool)),
      'ownerId',
      serializers.serialize(object.ownerId,
          specifiedType: const FullType(String)),
    ];
    Object? value;
    value = object.owner;
    if (value != null) {
      result
        ..add('owner')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSafiriCarUserInput)));
    }
    value = object.rides;
    if (value != null) {
      result
        ..add('rides')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GRideInput)])));
    }
    return result;
  }

  @override
  GCarInput deserialize(Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCarInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'color':
          result.color = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'model':
          result.model = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'licensePlate':
          result.licensePlate = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'imageUrl':
          result.imageUrl = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'active':
          result.active = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
        case 'ownerId':
          result.ownerId = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'owner':
          result.owner.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GSafiriCarUserInput))!
              as GSafiriCarUserInput);
          break;
        case 'rides':
          result.rides.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GRideInput)]))!
              as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GCarUpdateDtoInputSerializer
    implements StructuredSerializer<GCarUpdateDtoInput> {
  @override
  final Iterable<Type> types = const [GCarUpdateDtoInput, _$GCarUpdateDtoInput];
  @override
  final String wireName = 'GCarUpdateDtoInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCarUpdateDtoInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'active',
      serializers.serialize(object.active, specifiedType: const FullType(bool)),
    ];
    Object? value;
    value = object.color;
    if (value != null) {
      result
        ..add('color')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.model;
    if (value != null) {
      result
        ..add('model')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.licensePlate;
    if (value != null) {
      result
        ..add('licensePlate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.imageUrl;
    if (value != null) {
      result
        ..add('imageUrl')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.ownerId;
    if (value != null) {
      result
        ..add('ownerId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GCarUpdateDtoInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCarUpdateDtoInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'color':
          result.color = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'model':
          result.model = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'licensePlate':
          result.licensePlate = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'imageUrl':
          result.imageUrl = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'active':
          result.active = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
        case 'ownerId':
          result.ownerId = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GRideInputSerializer implements StructuredSerializer<GRideInput> {
  @override
  final Iterable<Type> types = const [GRideInput, _$GRideInput];
  @override
  final String wireName = 'GRideInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GRideInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(int)),
      'estimatePrice',
      serializers.serialize(object.estimatePrice,
          specifiedType: const FullType(double)),
      'numberOfPeople',
      serializers.serialize(object.numberOfPeople,
          specifiedType: const FullType(int)),
      'maximumCarryWeight',
      serializers.serialize(object.maximumCarryWeight,
          specifiedType: const FullType(int)),
      'departureDate',
      serializers.serialize(object.departureDate,
          specifiedType: const FullType(GDateTime)),
      'seatCount',
      serializers.serialize(object.seatCount,
          specifiedType: const FullType(int)),
      'seatCapacity',
      serializers.serialize(object.seatCapacity,
          specifiedType: const FullType(int)),
      'maxTotalPay',
      serializers.serialize(object.maxTotalPay,
          specifiedType: const FullType(double)),
      'totalPay',
      serializers.serialize(object.totalPay,
          specifiedType: const FullType(double)),
      'amountCashedOut',
      serializers.serialize(object.amountCashedOut,
          specifiedType: const FullType(GDecimal)),
      'arrivalTime',
      serializers.serialize(object.arrivalTime,
          specifiedType: const FullType(GDateTime)),
      'mpesaReceiptNumber',
      serializers.serialize(object.mpesaReceiptNumber,
          specifiedType: const FullType(String)),
      'transactionDate',
      serializers.serialize(object.transactionDate,
          specifiedType: const FullType(GDateTime)),
      'merchantRequestId',
      serializers.serialize(object.merchantRequestId,
          specifiedType: const FullType(String)),
      'checkoutRequestId',
      serializers.serialize(object.checkoutRequestId,
          specifiedType: const FullType(String)),
      'compensatedFromPassengerCancel',
      serializers.serialize(object.compensatedFromPassengerCancel,
          specifiedType: const FullType(double)),
      'carId',
      serializers.serialize(object.carId,
          specifiedType: const FullType(String)),
    ];
    Object? value;
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.placeofStart;
    if (value != null) {
      result
        ..add('placeofStart')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.destination;
    if (value != null) {
      result
        ..add('destination')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.driverId;
    if (value != null) {
      result
        ..add('driverId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.estimatedDistance;
    if (value != null) {
      result
        ..add('estimatedDistance')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.duration;
    if (value != null) {
      result
        ..add('duration')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.status;
    if (value != null) {
      result
        ..add('status')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.seat;
    if (value != null) {
      result
        ..add('seat')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSeatInput)));
    }
    value = object.departureTime;
    if (value != null) {
      result
        ..add('departureTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.allowedBehDesc;
    if (value != null) {
      result
        ..add('allowedBehDesc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.exactPickupLocation;
    if (value != null) {
      result
        ..add('exactPickupLocation')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.routeIndex;
    if (value != null) {
      result
        ..add('routeIndex')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.driverPaymentTime;
    if (value != null) {
      result
        ..add('driverPaymentTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.exactDropOffLocation;
    if (value != null) {
      result
        ..add('exactDropOffLocation')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.isRecurring;
    if (value != null) {
      result
        ..add('isRecurring')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.car;
    if (value != null) {
      result
        ..add('car')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCarInput)));
    }
    value = object.users;
    if (value != null) {
      result
        ..add('users')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserRidesInput)])));
    }
    value = object.transactions;
    if (value != null) {
      result
        ..add('transactions')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GRideTransactionInput)])));
    }
    return result;
  }

  @override
  GRideInput deserialize(Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GRideInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'placeofStart':
          result.placeofStart = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'destination':
          result.destination = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'driverId':
          result.driverId = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'estimatePrice':
          result.estimatePrice = serializers.deserialize(value,
              specifiedType: const FullType(double))! as double;
          break;
        case 'estimatedDistance':
          result.estimatedDistance = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'numberOfPeople':
          result.numberOfPeople = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'maximumCarryWeight':
          result.maximumCarryWeight = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'departureDate':
          result.departureDate.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'duration':
          result.duration = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'status':
          result.status = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'seat':
          result.seat.replace(serializers.deserialize(value,
              specifiedType: const FullType(GSeatInput))! as GSeatInput);
          break;
        case 'seatCount':
          result.seatCount = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'seatCapacity':
          result.seatCapacity = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'maxTotalPay':
          result.maxTotalPay = serializers.deserialize(value,
              specifiedType: const FullType(double))! as double;
          break;
        case 'totalPay':
          result.totalPay = serializers.deserialize(value,
              specifiedType: const FullType(double))! as double;
          break;
        case 'amountCashedOut':
          result.amountCashedOut.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDecimal))! as GDecimal);
          break;
        case 'departureTime':
          result.departureTime.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'arrivalTime':
          result.arrivalTime.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'allowedBehDesc':
          result.allowedBehDesc = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'exactPickupLocation':
          result.exactPickupLocation = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'routeIndex':
          result.routeIndex = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'mpesaReceiptNumber':
          result.mpesaReceiptNumber = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'transactionDate':
          result.transactionDate.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'merchantRequestId':
          result.merchantRequestId = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'checkoutRequestId':
          result.checkoutRequestId = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'compensatedFromPassengerCancel':
          result.compensatedFromPassengerCancel = serializers.deserialize(value,
              specifiedType: const FullType(double))! as double;
          break;
        case 'driverPaymentTime':
          result.driverPaymentTime.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'exactDropOffLocation':
          result.exactDropOffLocation = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'isRecurring':
          result.isRecurring = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'carId':
          result.carId = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'car':
          result.car.replace(serializers.deserialize(value,
              specifiedType: const FullType(GCarInput))! as GCarInput);
          break;
        case 'users':
          result.users.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserRidesInput)]))!
              as BuiltList<Object?>);
          break;
        case 'transactions':
          result.transactions.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GRideTransactionInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GSafiriCarUserInputSerializer
    implements StructuredSerializer<GSafiriCarUserInput> {
  @override
  final Iterable<Type> types = const [
    GSafiriCarUserInput,
    _$GSafiriCarUserInput
  ];
  @override
  final String wireName = 'GSafiriCarUserInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GSafiriCarUserInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'firstName',
      serializers.serialize(object.firstName,
          specifiedType: const FullType(String)),
      'lastName',
      serializers.serialize(object.lastName,
          specifiedType: const FullType(String)),
      'nationalId',
      serializers.serialize(object.nationalId,
          specifiedType: const FullType(String)),
      'ownedCars',
      serializers.serialize(object.ownedCars,
          specifiedType:
              const FullType(BuiltList, const [const FullType(GCarInput)])),
      'createdBy',
      serializers.serialize(object.createdBy,
          specifiedType: const FullType(String)),
      'profilePictureDataUrl',
      serializers.serialize(object.profilePictureDataUrl,
          specifiedType: const FullType(String)),
      'isDeleted',
      serializers.serialize(object.isDeleted,
          specifiedType: const FullType(bool)),
      'isActive',
      serializers.serialize(object.isActive,
          specifiedType: const FullType(bool)),
      'totalRating',
      serializers.serialize(object.totalRating,
          specifiedType: const FullType(int)),
      'averageRating',
      serializers.serialize(object.averageRating,
          specifiedType: const FullType(double)),
      'tripsCreated',
      serializers.serialize(object.tripsCreated,
          specifiedType: const FullType(int)),
      'tripsCompleted',
      serializers.serialize(object.tripsCompleted,
          specifiedType: const FullType(int)),
      'tripsCancelled',
      serializers.serialize(object.tripsCancelled,
          specifiedType: const FullType(int)),
      'isVerified',
      serializers.serialize(object.isVerified,
          specifiedType: const FullType(bool)),
      'loyaltyPoints',
      serializers.serialize(object.loyaltyPoints,
          specifiedType: const FullType(double)),
      'rides',
      serializers.serialize(object.rides,
          specifiedType: const FullType(
              BuiltList, const [const FullType(GUserRidesInput)])),
      'userRatings',
      serializers.serialize(object.userRatings,
          specifiedType: const FullType(
              BuiltList, const [const FullType(GUserRatingInput)])),
      'frequentRoutes',
      serializers.serialize(object.frequentRoutes,
          specifiedType: const FullType(
              BuiltList, const [const FullType(GFrequentRouteInput)])),
      'emailConfirmed',
      serializers.serialize(object.emailConfirmed,
          specifiedType: const FullType(bool)),
      'phoneNumberConfirmed',
      serializers.serialize(object.phoneNumberConfirmed,
          specifiedType: const FullType(bool)),
      'twoFactorEnabled',
      serializers.serialize(object.twoFactorEnabled,
          specifiedType: const FullType(bool)),
      'lockoutEnabled',
      serializers.serialize(object.lockoutEnabled,
          specifiedType: const FullType(bool)),
      'accessFailedCount',
      serializers.serialize(object.accessFailedCount,
          specifiedType: const FullType(int)),
    ];
    Object? value;
    value = object.referalCode;
    if (value != null) {
      result
        ..add('referalCode')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.identificationDocument;
    if (value != null) {
      result
        ..add('identificationDocument')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GIdentificationDocumentInput)));
    }
    value = object.createdOn;
    if (value != null) {
      result
        ..add('createdOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.lastModifiedBy;
    if (value != null) {
      result
        ..add('lastModifiedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.lastModifiedOn;
    if (value != null) {
      result
        ..add('lastModifiedOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.deletedOn;
    if (value != null) {
      result
        ..add('deletedOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.refreshToken;
    if (value != null) {
      result
        ..add('refreshToken')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.role;
    if (value != null) {
      result
        ..add('role')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.refreshTokenExpiryTime;
    if (value != null) {
      result
        ..add('refreshTokenExpiryTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.aboutMe;
    if (value != null) {
      result
        ..add('aboutMe')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.location;
    if (value != null) {
      result
        ..add('location')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GLocationInput)));
    }
    value = object.device;
    if (value != null) {
      result
        ..add('device')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDeviceInput)));
    }
    value = object.userReferals;
    if (value != null) {
      result
        ..add('userReferals')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GSafiriCarUserInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.userName;
    if (value != null) {
      result
        ..add('userName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.normalizedUserName;
    if (value != null) {
      result
        ..add('normalizedUserName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.normalizedEmail;
    if (value != null) {
      result
        ..add('normalizedEmail')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.passwordHash;
    if (value != null) {
      result
        ..add('passwordHash')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.securityStamp;
    if (value != null) {
      result
        ..add('securityStamp')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.concurrencyStamp;
    if (value != null) {
      result
        ..add('concurrencyStamp')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.phoneNumber;
    if (value != null) {
      result
        ..add('phoneNumber')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.lockoutEnd;
    if (value != null) {
      result
        ..add('lockoutEnd')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    return result;
  }

  @override
  GSafiriCarUserInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GSafiriCarUserInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'firstName':
          result.firstName = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'lastName':
          result.lastName = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'nationalId':
          result.nationalId = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'ownedCars':
          result.ownedCars.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCarInput)]))!
              as BuiltList<Object?>);
          break;
        case 'createdBy':
          result.createdBy = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'profilePictureDataUrl':
          result.profilePictureDataUrl = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'referalCode':
          result.referalCode = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'identificationDocument':
          result.identificationDocument.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GIdentificationDocumentInput))!
              as GIdentificationDocumentInput);
          break;
        case 'createdOn':
          result.createdOn.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'lastModifiedBy':
          result.lastModifiedBy = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'lastModifiedOn':
          result.lastModifiedOn.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'isDeleted':
          result.isDeleted = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
        case 'deletedOn':
          result.deletedOn.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
        case 'refreshToken':
          result.refreshToken = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'role':
          result.role = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'refreshTokenExpiryTime':
          result.refreshTokenExpiryTime.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'totalRating':
          result.totalRating = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'averageRating':
          result.averageRating = serializers.deserialize(value,
              specifiedType: const FullType(double))! as double;
          break;
        case 'tripsCreated':
          result.tripsCreated = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'tripsCompleted':
          result.tripsCompleted = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'tripsCancelled':
          result.tripsCancelled = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'isVerified':
          result.isVerified = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
        case 'aboutMe':
          result.aboutMe = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'loyaltyPoints':
          result.loyaltyPoints = serializers.deserialize(value,
              specifiedType: const FullType(double))! as double;
          break;
        case 'location':
          result.location.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GLocationInput))!
              as GLocationInput);
          break;
        case 'device':
          result.device.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDeviceInput))! as GDeviceInput);
          break;
        case 'rides':
          result.rides.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserRidesInput)]))!
              as BuiltList<Object?>);
          break;
        case 'userRatings':
          result.userRatings.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserRatingInput)]))!
              as BuiltList<Object?>);
          break;
        case 'frequentRoutes':
          result.frequentRoutes.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GFrequentRouteInput)]))!
              as BuiltList<Object?>);
          break;
        case 'userReferals':
          result.userReferals.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GSafiriCarUserInput)]))!
              as BuiltList<Object?>);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'userName':
          result.userName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'normalizedUserName':
          result.normalizedUserName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'normalizedEmail':
          result.normalizedEmail = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'emailConfirmed':
          result.emailConfirmed = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
        case 'passwordHash':
          result.passwordHash = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'securityStamp':
          result.securityStamp = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'concurrencyStamp':
          result.concurrencyStamp = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'phoneNumber':
          result.phoneNumber = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'phoneNumberConfirmed':
          result.phoneNumberConfirmed = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
        case 'twoFactorEnabled':
          result.twoFactorEnabled = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
        case 'lockoutEnd':
          result.lockoutEnd.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'lockoutEnabled':
          result.lockoutEnabled = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
        case 'accessFailedCount':
          result.accessFailedCount = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$GUploadTypeSerializer implements PrimitiveSerializer<GUploadType> {
  @override
  final Iterable<Type> types = const <Type>[GUploadType];
  @override
  final String wireName = 'GUploadType';

  @override
  Object serialize(Serializers serializers, GUploadType object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GUploadType deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GUploadType.valueOf(serialized as String);
}

class _$GCommandTypeSerializer implements PrimitiveSerializer<GCommandType> {
  @override
  final Iterable<Type> types = const <Type>[GCommandType];
  @override
  final String wireName = 'GCommandType';

  @override
  Object serialize(Serializers serializers, GCommandType object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GCommandType deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GCommandType.valueOf(serialized as String);
}

class _$GColorCustomInputSerializer
    implements StructuredSerializer<GColorCustomInput> {
  @override
  final Iterable<Type> types = const [GColorCustomInput, _$GColorCustomInput];
  @override
  final String wireName = 'GColorCustomInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GColorCustomInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'r',
      serializers.serialize(object.r, specifiedType: const FullType(String)),
      'g',
      serializers.serialize(object.g, specifiedType: const FullType(String)),
      'b',
      serializers.serialize(object.b, specifiedType: const FullType(String)),
      'a',
      serializers.serialize(object.a, specifiedType: const FullType(String)),
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  GColorCustomInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GColorCustomInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'r':
          result.r = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'g':
          result.g = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'b':
          result.b = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'a':
          result.a = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$GUserRoleModelInputSerializer
    implements StructuredSerializer<GUserRoleModelInput> {
  @override
  final Iterable<Type> types = const [
    GUserRoleModelInput,
    _$GUserRoleModelInput
  ];
  @override
  final String wireName = 'GUserRoleModelInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserRoleModelInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'roleName',
      serializers.serialize(object.roleName,
          specifiedType: const FullType(String)),
      'roleDescription',
      serializers.serialize(object.roleDescription,
          specifiedType: const FullType(String)),
      'selected',
      serializers.serialize(object.selected,
          specifiedType: const FullType(bool)),
    ];

    return result;
  }

  @override
  GUserRoleModelInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserRoleModelInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'roleName':
          result.roleName = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'roleDescription':
          result.roleDescription = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'selected':
          result.selected = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
      }
    }

    return result.build();
  }
}

class _$GDeviceDtoInputSerializer
    implements StructuredSerializer<GDeviceDtoInput> {
  @override
  final Iterable<Type> types = const [GDeviceDtoInput, _$GDeviceDtoInput];
  @override
  final String wireName = 'GDeviceDtoInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GDeviceDtoInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'deviceRegToken',
      serializers.serialize(object.deviceRegToken,
          specifiedType: const FullType(String)),
    ];

    return result;
  }

  @override
  GDeviceDtoInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GDeviceDtoInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'deviceRegToken':
          result.deviceRegToken = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GLocationDtoInputSerializer
    implements StructuredSerializer<GLocationDtoInput> {
  @override
  final Iterable<Type> types = const [GLocationDtoInput, _$GLocationDtoInput];
  @override
  final String wireName = 'GLocationDtoInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GLocationDtoInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'town',
      serializers.serialize(object.town, specifiedType: const FullType(String)),
      'countryDto',
      serializers.serialize(object.countryDto,
          specifiedType: const FullType(GCountryDtoInput)),
    ];

    return result;
  }

  @override
  GLocationDtoInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GLocationDtoInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'town':
          result.town = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'countryDto':
          result.countryDto.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCountryDtoInput))!
              as GCountryDtoInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GIdentificationDocumentInputSerializer
    implements StructuredSerializer<GIdentificationDocumentInput> {
  @override
  final Iterable<Type> types = const [
    GIdentificationDocumentInput,
    _$GIdentificationDocumentInput
  ];
  @override
  final String wireName = 'GIdentificationDocumentInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GIdentificationDocumentInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(int)),
    ];
    Object? value;
    value = object.nationalIdFront;
    if (value != null) {
      result
        ..add('nationalIdFront')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.nationalIdRear;
    if (value != null) {
      result
        ..add('nationalIdRear')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.drivingLicenceFront;
    if (value != null) {
      result
        ..add('drivingLicenceFront')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.drivingLicenceRear;
    if (value != null) {
      result
        ..add('drivingLicenceRear')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GIdentificationDocumentInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GIdentificationDocumentInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'nationalIdFront':
          result.nationalIdFront = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'nationalIdRear':
          result.nationalIdRear = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'drivingLicenceFront':
          result.drivingLicenceFront = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'drivingLicenceRear':
          result.drivingLicenceRear = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GSeatInputSerializer implements StructuredSerializer<GSeatInput> {
  @override
  final Iterable<Type> types = const [GSeatInput, _$GSeatInput];
  @override
  final String wireName = 'GSeatInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GSeatInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.frontLeft;
    if (value != null) {
      result
        ..add('frontLeft')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.middleLeft;
    if (value != null) {
      result
        ..add('middleLeft')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.middleCentre;
    if (value != null) {
      result
        ..add('middleCentre')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.middleRight;
    if (value != null) {
      result
        ..add('middleRight')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.backLeft;
    if (value != null) {
      result
        ..add('backLeft')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.backCentre;
    if (value != null) {
      result
        ..add('backCentre')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.backRight;
    if (value != null) {
      result
        ..add('backRight')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GSeatInput deserialize(Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GSeatInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'frontLeft':
          result.frontLeft = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'middleLeft':
          result.middleLeft = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'middleCentre':
          result.middleCentre = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'middleRight':
          result.middleRight = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'backLeft':
          result.backLeft = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'backCentre':
          result.backCentre = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'backRight':
          result.backRight = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GApplyPolicySerializer implements PrimitiveSerializer<GApplyPolicy> {
  @override
  final Iterable<Type> types = const <Type>[GApplyPolicy];
  @override
  final String wireName = 'GApplyPolicy';

  @override
  Object serialize(Serializers serializers, GApplyPolicy object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GApplyPolicy deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GApplyPolicy.valueOf(serialized as String);
}

class _$GCountryDtoInputSerializer
    implements StructuredSerializer<GCountryDtoInput> {
  @override
  final Iterable<Type> types = const [GCountryDtoInput, _$GCountryDtoInput];
  @override
  final String wireName = 'GCountryDtoInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GCountryDtoInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'name',
      serializers.serialize(object.name, specifiedType: const FullType(String)),
      'code',
      serializers.serialize(object.code, specifiedType: const FullType(String)),
      'abbrev',
      serializers.serialize(object.abbrev,
          specifiedType: const FullType(String)),
    ];

    return result;
  }

  @override
  GCountryDtoInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCountryDtoInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'code':
          result.code = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'abbrev':
          result.abbrev = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GUserRatingInputSerializer
    implements StructuredSerializer<GUserRatingInput> {
  @override
  final Iterable<Type> types = const [GUserRatingInput, _$GUserRatingInput];
  @override
  final String wireName = 'GUserRatingInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GUserRatingInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(int)),
      'ratingValue',
      serializers.serialize(object.ratingValue,
          specifiedType: const FullType(double)),
      'rideId',
      serializers.serialize(object.rideId, specifiedType: const FullType(int)),
      'dateOfRating',
      serializers.serialize(object.dateOfRating,
          specifiedType: const FullType(GDateTime)),
      'timeOfRating',
      serializers.serialize(object.timeOfRating,
          specifiedType: const FullType(GTimeSpan)),
      'dateOfLastUpadte',
      serializers.serialize(object.dateOfLastUpadte,
          specifiedType: const FullType(GDateTime)),
      'timeOfLastUpdate',
      serializers.serialize(object.timeOfLastUpdate,
          specifiedType: const FullType(GTimeSpan)),
      'reviewer',
      serializers.serialize(object.reviewer,
          specifiedType: const FullType(GSafiriCarUserInput)),
    ];
    Object? value;
    value = object.userThatRate;
    if (value != null) {
      result
        ..add('userThatRate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.userToRate;
    if (value != null) {
      result
        ..add('userToRate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.levelOfSatisfaction;
    if (value != null) {
      result
        ..add('levelOfSatisfaction')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.comment;
    if (value != null) {
      result
        ..add('comment')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GUserRatingInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserRatingInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'userThatRate':
          result.userThatRate = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'userToRate':
          result.userToRate = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'ratingValue':
          result.ratingValue = serializers.deserialize(value,
              specifiedType: const FullType(double))! as double;
          break;
        case 'rideId':
          result.rideId = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'levelOfSatisfaction':
          result.levelOfSatisfaction = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'comment':
          result.comment = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'dateOfRating':
          result.dateOfRating.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'timeOfRating':
          result.timeOfRating.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'dateOfLastUpadte':
          result.dateOfLastUpadte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'timeOfLastUpdate':
          result.timeOfLastUpdate.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'reviewer':
          result.reviewer.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GSafiriCarUserInput))!
              as GSafiriCarUserInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GDeviceInputSerializer implements StructuredSerializer<GDeviceInput> {
  @override
  final Iterable<Type> types = const [GDeviceInput, _$GDeviceInput];
  @override
  final String wireName = 'GDeviceInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GDeviceInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(int)),
      'deviceRegToken',
      serializers.serialize(object.deviceRegToken,
          specifiedType: const FullType(String)),
    ];
    Object? value;
    value = object.createdOn;
    if (value != null) {
      result
        ..add('createdOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.lastModifiedOn;
    if (value != null) {
      result
        ..add('lastModifiedOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.lastModifiedBy;
    if (value != null) {
      result
        ..add('lastModifiedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GDeviceInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GDeviceInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'deviceRegToken':
          result.deviceRegToken = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'createdOn':
          result.createdOn.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdBy':
          result.createdBy = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'lastModifiedOn':
          result.lastModifiedOn.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'lastModifiedBy':
          result.lastModifiedBy = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GLocationInputSerializer
    implements StructuredSerializer<GLocationInput> {
  @override
  final Iterable<Type> types = const [GLocationInput, _$GLocationInput];
  @override
  final String wireName = 'GLocationInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GLocationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(int)),
      'town',
      serializers.serialize(object.town, specifiedType: const FullType(String)),
      'isPopular',
      serializers.serialize(object.isPopular,
          specifiedType: const FullType(bool)),
      'country',
      serializers.serialize(object.country,
          specifiedType: const FullType(GCountryInput)),
    ];
    Object? value;
    value = object.createdOn;
    if (value != null) {
      result
        ..add('createdOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.lastModifiedOn;
    if (value != null) {
      result
        ..add('lastModifiedOn')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.lastModifiedBy;
    if (value != null) {
      result
        ..add('lastModifiedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GLocationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GLocationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'town':
          result.town = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'isPopular':
          result.isPopular = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
        case 'country':
          result.country.replace(serializers.deserialize(value,
              specifiedType: const FullType(GCountryInput))! as GCountryInput);
          break;
        case 'createdOn':
          result.createdOn.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdBy':
          result.createdBy = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'lastModifiedOn':
          result.lastModifiedOn.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'lastModifiedBy':
          result.lastModifiedBy = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GRideTransactionInputSerializer
    implements StructuredSerializer<GRideTransactionInput> {
  @override
  final Iterable<Type> types = const [
    GRideTransactionInput,
    _$GRideTransactionInput
  ];
  @override
  final String wireName = 'GRideTransactionInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GRideTransactionInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'amount',
      serializers.serialize(object.amount,
          specifiedType: const FullType(double)),
      'isReversed',
      serializers.serialize(object.isReversed,
          specifiedType: const FullType(bool)),
      'bookedRideId',
      serializers.serialize(object.bookedRideId,
          specifiedType: const FullType(int)),
      'approvedDateTime',
      serializers.serialize(object.approvedDateTime,
          specifiedType: const FullType(GDateTime)),
    ];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.phoneNumber;
    if (value != null) {
      result
        ..add('phoneNumber')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.status;
    if (value != null) {
      result
        ..add('status')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.passengerId;
    if (value != null) {
      result
        ..add('passengerId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.driverId;
    if (value != null) {
      result
        ..add('driverId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.transactionCode;
    if (value != null) {
      result
        ..add('transactionCode')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.merchantRequestId;
    if (value != null) {
      result
        ..add('merchantRequestId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.checkoutRequestId;
    if (value != null) {
      result
        ..add('checkoutRequestId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.transactionDate;
    if (value != null) {
      result
        ..add('transactionDate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.transactionTime;
    if (value != null) {
      result
        ..add('transactionTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GTimeSpan)));
    }
    value = object.transactionID;
    if (value != null) {
      result
        ..add('transactionID')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.conversationID;
    if (value != null) {
      result
        ..add('conversationID')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.originatorConversationID;
    if (value != null) {
      result
        ..add('originatorConversationID')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.reversedDate;
    if (value != null) {
      result
        ..add('reversedDate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.reversedTime;
    if (value != null) {
      result
        ..add('reversedTime')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.reseaonForReversal;
    if (value != null) {
      result
        ..add('reseaonForReversal')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.seatsStr;
    if (value != null) {
      result
        ..add('seatsStr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.paymentMethod;
    if (value != null) {
      result
        ..add('paymentMethod')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.exactDropOffLocation;
    if (value != null) {
      result
        ..add('exactDropOffLocation')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GRideTransactionInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GRideTransactionInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'phoneNumber':
          result.phoneNumber = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'amount':
          result.amount = serializers.deserialize(value,
              specifiedType: const FullType(double))! as double;
          break;
        case 'isReversed':
          result.isReversed = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
        case 'status':
          result.status = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'bookedRideId':
          result.bookedRideId = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'passengerId':
          result.passengerId = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'driverId':
          result.driverId = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'transactionCode':
          result.transactionCode = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'merchantRequestId':
          result.merchantRequestId = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'checkoutRequestId':
          result.checkoutRequestId = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'transactionDate':
          result.transactionDate.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'transactionTime':
          result.transactionTime.replace(serializers.deserialize(value,
              specifiedType: const FullType(GTimeSpan))! as GTimeSpan);
          break;
        case 'approvedDateTime':
          result.approvedDateTime.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'transactionID':
          result.transactionID = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'conversationID':
          result.conversationID = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'originatorConversationID':
          result.originatorConversationID = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'reversedDate':
          result.reversedDate = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'reversedTime':
          result.reversedTime = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'reseaonForReversal':
          result.reseaonForReversal = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'seatsStr':
          result.seatsStr = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'paymentMethod':
          result.paymentMethod = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'exactDropOffLocation':
          result.exactDropOffLocation = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GUserRidesInputSerializer
    implements StructuredSerializer<GUserRidesInput> {
  @override
  final Iterable<Type> types = const [GUserRidesInput, _$GUserRidesInput];
  @override
  final String wireName = 'GUserRidesInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GUserRidesInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'rideId',
      serializers.serialize(object.rideId, specifiedType: const FullType(int)),
    ];
    Object? value;
    value = object.userId;
    if (value != null) {
      result
        ..add('userId')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.user;
    if (value != null) {
      result
        ..add('user')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GSafiriCarUserInput)));
    }
    value = object.ride;
    if (value != null) {
      result
        ..add('ride')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GRideInput)));
    }
    value = object.transactions;
    if (value != null) {
      result
        ..add('transactions')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GRideTransactionInput)])));
    }
    return result;
  }

  @override
  GUserRidesInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserRidesInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'userId':
          result.userId = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'user':
          result.user.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GSafiriCarUserInput))!
              as GSafiriCarUserInput);
          break;
        case 'rideId':
          result.rideId = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'ride':
          result.ride.replace(serializers.deserialize(value,
              specifiedType: const FullType(GRideInput))! as GRideInput);
          break;
        case 'transactions':
          result.transactions.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GRideTransactionInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GCountryInputSerializer implements StructuredSerializer<GCountryInput> {
  @override
  final Iterable<Type> types = const [GCountryInput, _$GCountryInput];
  @override
  final String wireName = 'GCountryInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GCountryInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(int)),
      'name',
      serializers.serialize(object.name, specifiedType: const FullType(String)),
      'code',
      serializers.serialize(object.code, specifiedType: const FullType(String)),
      'abbrev',
      serializers.serialize(object.abbrev,
          specifiedType: const FullType(String)),
    ];

    return result;
  }

  @override
  GCountryInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCountryInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'code':
          result.code = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'abbrev':
          result.abbrev = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GDateTime extends GDateTime {
  @override
  final String value;

  factory _$GDateTime([void Function(GDateTimeBuilder)? updates]) =>
      (new GDateTimeBuilder()..update(updates))._build();

  _$GDateTime._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, r'GDateTime', 'value');
  }

  @override
  GDateTime rebuild(void Function(GDateTimeBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GDateTimeBuilder toBuilder() => new GDateTimeBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GDateTime && value == other.value;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, value.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GDateTime')..add('value', value))
        .toString();
  }
}

class GDateTimeBuilder implements Builder<GDateTime, GDateTimeBuilder> {
  _$GDateTime? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GDateTimeBuilder();

  GDateTimeBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GDateTime other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GDateTime;
  }

  @override
  void update(void Function(GDateTimeBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GDateTime build() => _build();

  _$GDateTime _build() {
    final _$result = _$v ??
        new _$GDateTime._(
            value: BuiltValueNullFieldError.checkNotNull(
                value, r'GDateTime', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GSafiriCarUserFilterInput extends GSafiriCarUserFilterInput {
  @override
  final BuiltList<GSafiriCarUserFilterInput>? and;
  @override
  final BuiltList<GSafiriCarUserFilterInput>? or;
  @override
  final GStringOperationFilterInput? firstName;
  @override
  final GStringOperationFilterInput? lastName;
  @override
  final GStringOperationFilterInput? nationalId;
  @override
  final GListFilterInputTypeOfCarFilterInput? ownedCars;
  @override
  final GStringOperationFilterInput? createdBy;
  @override
  final GStringOperationFilterInput? profilePictureDataUrl;
  @override
  final GStringOperationFilterInput? referalCode;
  @override
  final GIdentificationDocumentFilterInput? identificationDocument;
  @override
  final GComparableNullableOfDateTimeOperationFilterInput? createdOn;
  @override
  final GStringOperationFilterInput? lastModifiedBy;
  @override
  final GComparableNullableOfDateTimeOperationFilterInput? lastModifiedOn;
  @override
  final GBooleanOperationFilterInput? isDeleted;
  @override
  final GComparableNullableOfDateTimeOperationFilterInput? deletedOn;
  @override
  final GBooleanOperationFilterInput? isActive;
  @override
  final GStringOperationFilterInput? refreshToken;
  @override
  final GStringOperationFilterInput? role;
  @override
  final GComparableNullableOfDateTimeOperationFilterInput?
      refreshTokenExpiryTime;
  @override
  final GComparableInt32OperationFilterInput? totalRating;
  @override
  final GComparableDoubleOperationFilterInput? averageRating;
  @override
  final GComparableInt32OperationFilterInput? tripsCreated;
  @override
  final GComparableInt32OperationFilterInput? tripsCompleted;
  @override
  final GComparableInt32OperationFilterInput? tripsCancelled;
  @override
  final GBooleanOperationFilterInput? isVerified;
  @override
  final GStringOperationFilterInput? aboutMe;
  @override
  final GComparableSingleOperationFilterInput? loyaltyPoints;
  @override
  final GLocationFilterInput? location;
  @override
  final GDeviceFilterInput? device;
  @override
  final GListFilterInputTypeOfUserRidesFilterInput? rides;
  @override
  final GListFilterInputTypeOfUserRatingFilterInput? userRatings;
  @override
  final GListFilterInputTypeOfFrequentRouteFilterInput? frequentRoutes;
  @override
  final GListFilterInputTypeOfSafiriCarUserFilterInput? userReferals;
  @override
  final GStringOperationFilterInput? id;
  @override
  final GStringOperationFilterInput? userName;
  @override
  final GStringOperationFilterInput? normalizedUserName;
  @override
  final GStringOperationFilterInput? email;
  @override
  final GStringOperationFilterInput? normalizedEmail;
  @override
  final GBooleanOperationFilterInput? emailConfirmed;
  @override
  final GStringOperationFilterInput? passwordHash;
  @override
  final GStringOperationFilterInput? securityStamp;
  @override
  final GStringOperationFilterInput? concurrencyStamp;
  @override
  final GStringOperationFilterInput? phoneNumber;
  @override
  final GBooleanOperationFilterInput? phoneNumberConfirmed;
  @override
  final GBooleanOperationFilterInput? twoFactorEnabled;
  @override
  final GComparableNullableOfDateTimeOffsetOperationFilterInput? lockoutEnd;
  @override
  final GBooleanOperationFilterInput? lockoutEnabled;
  @override
  final GComparableInt32OperationFilterInput? accessFailedCount;

  factory _$GSafiriCarUserFilterInput(
          [void Function(GSafiriCarUserFilterInputBuilder)? updates]) =>
      (new GSafiriCarUserFilterInputBuilder()..update(updates))._build();

  _$GSafiriCarUserFilterInput._(
      {this.and,
      this.or,
      this.firstName,
      this.lastName,
      this.nationalId,
      this.ownedCars,
      this.createdBy,
      this.profilePictureDataUrl,
      this.referalCode,
      this.identificationDocument,
      this.createdOn,
      this.lastModifiedBy,
      this.lastModifiedOn,
      this.isDeleted,
      this.deletedOn,
      this.isActive,
      this.refreshToken,
      this.role,
      this.refreshTokenExpiryTime,
      this.totalRating,
      this.averageRating,
      this.tripsCreated,
      this.tripsCompleted,
      this.tripsCancelled,
      this.isVerified,
      this.aboutMe,
      this.loyaltyPoints,
      this.location,
      this.device,
      this.rides,
      this.userRatings,
      this.frequentRoutes,
      this.userReferals,
      this.id,
      this.userName,
      this.normalizedUserName,
      this.email,
      this.normalizedEmail,
      this.emailConfirmed,
      this.passwordHash,
      this.securityStamp,
      this.concurrencyStamp,
      this.phoneNumber,
      this.phoneNumberConfirmed,
      this.twoFactorEnabled,
      this.lockoutEnd,
      this.lockoutEnabled,
      this.accessFailedCount})
      : super._();

  @override
  GSafiriCarUserFilterInput rebuild(
          void Function(GSafiriCarUserFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GSafiriCarUserFilterInputBuilder toBuilder() =>
      new GSafiriCarUserFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GSafiriCarUserFilterInput &&
        and == other.and &&
        or == other.or &&
        firstName == other.firstName &&
        lastName == other.lastName &&
        nationalId == other.nationalId &&
        ownedCars == other.ownedCars &&
        createdBy == other.createdBy &&
        profilePictureDataUrl == other.profilePictureDataUrl &&
        referalCode == other.referalCode &&
        identificationDocument == other.identificationDocument &&
        createdOn == other.createdOn &&
        lastModifiedBy == other.lastModifiedBy &&
        lastModifiedOn == other.lastModifiedOn &&
        isDeleted == other.isDeleted &&
        deletedOn == other.deletedOn &&
        isActive == other.isActive &&
        refreshToken == other.refreshToken &&
        role == other.role &&
        refreshTokenExpiryTime == other.refreshTokenExpiryTime &&
        totalRating == other.totalRating &&
        averageRating == other.averageRating &&
        tripsCreated == other.tripsCreated &&
        tripsCompleted == other.tripsCompleted &&
        tripsCancelled == other.tripsCancelled &&
        isVerified == other.isVerified &&
        aboutMe == other.aboutMe &&
        loyaltyPoints == other.loyaltyPoints &&
        location == other.location &&
        device == other.device &&
        rides == other.rides &&
        userRatings == other.userRatings &&
        frequentRoutes == other.frequentRoutes &&
        userReferals == other.userReferals &&
        id == other.id &&
        userName == other.userName &&
        normalizedUserName == other.normalizedUserName &&
        email == other.email &&
        normalizedEmail == other.normalizedEmail &&
        emailConfirmed == other.emailConfirmed &&
        passwordHash == other.passwordHash &&
        securityStamp == other.securityStamp &&
        concurrencyStamp == other.concurrencyStamp &&
        phoneNumber == other.phoneNumber &&
        phoneNumberConfirmed == other.phoneNumberConfirmed &&
        twoFactorEnabled == other.twoFactorEnabled &&
        lockoutEnd == other.lockoutEnd &&
        lockoutEnabled == other.lockoutEnabled &&
        accessFailedCount == other.accessFailedCount;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, and.hashCode);
    _$hash = $jc(_$hash, or.hashCode);
    _$hash = $jc(_$hash, firstName.hashCode);
    _$hash = $jc(_$hash, lastName.hashCode);
    _$hash = $jc(_$hash, nationalId.hashCode);
    _$hash = $jc(_$hash, ownedCars.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, profilePictureDataUrl.hashCode);
    _$hash = $jc(_$hash, referalCode.hashCode);
    _$hash = $jc(_$hash, identificationDocument.hashCode);
    _$hash = $jc(_$hash, createdOn.hashCode);
    _$hash = $jc(_$hash, lastModifiedBy.hashCode);
    _$hash = $jc(_$hash, lastModifiedOn.hashCode);
    _$hash = $jc(_$hash, isDeleted.hashCode);
    _$hash = $jc(_$hash, deletedOn.hashCode);
    _$hash = $jc(_$hash, isActive.hashCode);
    _$hash = $jc(_$hash, refreshToken.hashCode);
    _$hash = $jc(_$hash, role.hashCode);
    _$hash = $jc(_$hash, refreshTokenExpiryTime.hashCode);
    _$hash = $jc(_$hash, totalRating.hashCode);
    _$hash = $jc(_$hash, averageRating.hashCode);
    _$hash = $jc(_$hash, tripsCreated.hashCode);
    _$hash = $jc(_$hash, tripsCompleted.hashCode);
    _$hash = $jc(_$hash, tripsCancelled.hashCode);
    _$hash = $jc(_$hash, isVerified.hashCode);
    _$hash = $jc(_$hash, aboutMe.hashCode);
    _$hash = $jc(_$hash, loyaltyPoints.hashCode);
    _$hash = $jc(_$hash, location.hashCode);
    _$hash = $jc(_$hash, device.hashCode);
    _$hash = $jc(_$hash, rides.hashCode);
    _$hash = $jc(_$hash, userRatings.hashCode);
    _$hash = $jc(_$hash, frequentRoutes.hashCode);
    _$hash = $jc(_$hash, userReferals.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, userName.hashCode);
    _$hash = $jc(_$hash, normalizedUserName.hashCode);
    _$hash = $jc(_$hash, email.hashCode);
    _$hash = $jc(_$hash, normalizedEmail.hashCode);
    _$hash = $jc(_$hash, emailConfirmed.hashCode);
    _$hash = $jc(_$hash, passwordHash.hashCode);
    _$hash = $jc(_$hash, securityStamp.hashCode);
    _$hash = $jc(_$hash, concurrencyStamp.hashCode);
    _$hash = $jc(_$hash, phoneNumber.hashCode);
    _$hash = $jc(_$hash, phoneNumberConfirmed.hashCode);
    _$hash = $jc(_$hash, twoFactorEnabled.hashCode);
    _$hash = $jc(_$hash, lockoutEnd.hashCode);
    _$hash = $jc(_$hash, lockoutEnabled.hashCode);
    _$hash = $jc(_$hash, accessFailedCount.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GSafiriCarUserFilterInput')
          ..add('and', and)
          ..add('or', or)
          ..add('firstName', firstName)
          ..add('lastName', lastName)
          ..add('nationalId', nationalId)
          ..add('ownedCars', ownedCars)
          ..add('createdBy', createdBy)
          ..add('profilePictureDataUrl', profilePictureDataUrl)
          ..add('referalCode', referalCode)
          ..add('identificationDocument', identificationDocument)
          ..add('createdOn', createdOn)
          ..add('lastModifiedBy', lastModifiedBy)
          ..add('lastModifiedOn', lastModifiedOn)
          ..add('isDeleted', isDeleted)
          ..add('deletedOn', deletedOn)
          ..add('isActive', isActive)
          ..add('refreshToken', refreshToken)
          ..add('role', role)
          ..add('refreshTokenExpiryTime', refreshTokenExpiryTime)
          ..add('totalRating', totalRating)
          ..add('averageRating', averageRating)
          ..add('tripsCreated', tripsCreated)
          ..add('tripsCompleted', tripsCompleted)
          ..add('tripsCancelled', tripsCancelled)
          ..add('isVerified', isVerified)
          ..add('aboutMe', aboutMe)
          ..add('loyaltyPoints', loyaltyPoints)
          ..add('location', location)
          ..add('device', device)
          ..add('rides', rides)
          ..add('userRatings', userRatings)
          ..add('frequentRoutes', frequentRoutes)
          ..add('userReferals', userReferals)
          ..add('id', id)
          ..add('userName', userName)
          ..add('normalizedUserName', normalizedUserName)
          ..add('email', email)
          ..add('normalizedEmail', normalizedEmail)
          ..add('emailConfirmed', emailConfirmed)
          ..add('passwordHash', passwordHash)
          ..add('securityStamp', securityStamp)
          ..add('concurrencyStamp', concurrencyStamp)
          ..add('phoneNumber', phoneNumber)
          ..add('phoneNumberConfirmed', phoneNumberConfirmed)
          ..add('twoFactorEnabled', twoFactorEnabled)
          ..add('lockoutEnd', lockoutEnd)
          ..add('lockoutEnabled', lockoutEnabled)
          ..add('accessFailedCount', accessFailedCount))
        .toString();
  }
}

class GSafiriCarUserFilterInputBuilder
    implements
        Builder<GSafiriCarUserFilterInput, GSafiriCarUserFilterInputBuilder> {
  _$GSafiriCarUserFilterInput? _$v;

  ListBuilder<GSafiriCarUserFilterInput>? _and;
  ListBuilder<GSafiriCarUserFilterInput> get and =>
      _$this._and ??= new ListBuilder<GSafiriCarUserFilterInput>();
  set and(ListBuilder<GSafiriCarUserFilterInput>? and) => _$this._and = and;

  ListBuilder<GSafiriCarUserFilterInput>? _or;
  ListBuilder<GSafiriCarUserFilterInput> get or =>
      _$this._or ??= new ListBuilder<GSafiriCarUserFilterInput>();
  set or(ListBuilder<GSafiriCarUserFilterInput>? or) => _$this._or = or;

  GStringOperationFilterInputBuilder? _firstName;
  GStringOperationFilterInputBuilder get firstName =>
      _$this._firstName ??= new GStringOperationFilterInputBuilder();
  set firstName(GStringOperationFilterInputBuilder? firstName) =>
      _$this._firstName = firstName;

  GStringOperationFilterInputBuilder? _lastName;
  GStringOperationFilterInputBuilder get lastName =>
      _$this._lastName ??= new GStringOperationFilterInputBuilder();
  set lastName(GStringOperationFilterInputBuilder? lastName) =>
      _$this._lastName = lastName;

  GStringOperationFilterInputBuilder? _nationalId;
  GStringOperationFilterInputBuilder get nationalId =>
      _$this._nationalId ??= new GStringOperationFilterInputBuilder();
  set nationalId(GStringOperationFilterInputBuilder? nationalId) =>
      _$this._nationalId = nationalId;

  GListFilterInputTypeOfCarFilterInputBuilder? _ownedCars;
  GListFilterInputTypeOfCarFilterInputBuilder get ownedCars =>
      _$this._ownedCars ??= new GListFilterInputTypeOfCarFilterInputBuilder();
  set ownedCars(GListFilterInputTypeOfCarFilterInputBuilder? ownedCars) =>
      _$this._ownedCars = ownedCars;

  GStringOperationFilterInputBuilder? _createdBy;
  GStringOperationFilterInputBuilder get createdBy =>
      _$this._createdBy ??= new GStringOperationFilterInputBuilder();
  set createdBy(GStringOperationFilterInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GStringOperationFilterInputBuilder? _profilePictureDataUrl;
  GStringOperationFilterInputBuilder get profilePictureDataUrl =>
      _$this._profilePictureDataUrl ??=
          new GStringOperationFilterInputBuilder();
  set profilePictureDataUrl(
          GStringOperationFilterInputBuilder? profilePictureDataUrl) =>
      _$this._profilePictureDataUrl = profilePictureDataUrl;

  GStringOperationFilterInputBuilder? _referalCode;
  GStringOperationFilterInputBuilder get referalCode =>
      _$this._referalCode ??= new GStringOperationFilterInputBuilder();
  set referalCode(GStringOperationFilterInputBuilder? referalCode) =>
      _$this._referalCode = referalCode;

  GIdentificationDocumentFilterInputBuilder? _identificationDocument;
  GIdentificationDocumentFilterInputBuilder get identificationDocument =>
      _$this._identificationDocument ??=
          new GIdentificationDocumentFilterInputBuilder();
  set identificationDocument(
          GIdentificationDocumentFilterInputBuilder? identificationDocument) =>
      _$this._identificationDocument = identificationDocument;

  GComparableNullableOfDateTimeOperationFilterInputBuilder? _createdOn;
  GComparableNullableOfDateTimeOperationFilterInputBuilder get createdOn =>
      _$this._createdOn ??=
          new GComparableNullableOfDateTimeOperationFilterInputBuilder();
  set createdOn(
          GComparableNullableOfDateTimeOperationFilterInputBuilder?
              createdOn) =>
      _$this._createdOn = createdOn;

  GStringOperationFilterInputBuilder? _lastModifiedBy;
  GStringOperationFilterInputBuilder get lastModifiedBy =>
      _$this._lastModifiedBy ??= new GStringOperationFilterInputBuilder();
  set lastModifiedBy(GStringOperationFilterInputBuilder? lastModifiedBy) =>
      _$this._lastModifiedBy = lastModifiedBy;

  GComparableNullableOfDateTimeOperationFilterInputBuilder? _lastModifiedOn;
  GComparableNullableOfDateTimeOperationFilterInputBuilder get lastModifiedOn =>
      _$this._lastModifiedOn ??=
          new GComparableNullableOfDateTimeOperationFilterInputBuilder();
  set lastModifiedOn(
          GComparableNullableOfDateTimeOperationFilterInputBuilder?
              lastModifiedOn) =>
      _$this._lastModifiedOn = lastModifiedOn;

  GBooleanOperationFilterInputBuilder? _isDeleted;
  GBooleanOperationFilterInputBuilder get isDeleted =>
      _$this._isDeleted ??= new GBooleanOperationFilterInputBuilder();
  set isDeleted(GBooleanOperationFilterInputBuilder? isDeleted) =>
      _$this._isDeleted = isDeleted;

  GComparableNullableOfDateTimeOperationFilterInputBuilder? _deletedOn;
  GComparableNullableOfDateTimeOperationFilterInputBuilder get deletedOn =>
      _$this._deletedOn ??=
          new GComparableNullableOfDateTimeOperationFilterInputBuilder();
  set deletedOn(
          GComparableNullableOfDateTimeOperationFilterInputBuilder?
              deletedOn) =>
      _$this._deletedOn = deletedOn;

  GBooleanOperationFilterInputBuilder? _isActive;
  GBooleanOperationFilterInputBuilder get isActive =>
      _$this._isActive ??= new GBooleanOperationFilterInputBuilder();
  set isActive(GBooleanOperationFilterInputBuilder? isActive) =>
      _$this._isActive = isActive;

  GStringOperationFilterInputBuilder? _refreshToken;
  GStringOperationFilterInputBuilder get refreshToken =>
      _$this._refreshToken ??= new GStringOperationFilterInputBuilder();
  set refreshToken(GStringOperationFilterInputBuilder? refreshToken) =>
      _$this._refreshToken = refreshToken;

  GStringOperationFilterInputBuilder? _role;
  GStringOperationFilterInputBuilder get role =>
      _$this._role ??= new GStringOperationFilterInputBuilder();
  set role(GStringOperationFilterInputBuilder? role) => _$this._role = role;

  GComparableNullableOfDateTimeOperationFilterInputBuilder?
      _refreshTokenExpiryTime;
  GComparableNullableOfDateTimeOperationFilterInputBuilder
      get refreshTokenExpiryTime => _$this._refreshTokenExpiryTime ??=
          new GComparableNullableOfDateTimeOperationFilterInputBuilder();
  set refreshTokenExpiryTime(
          GComparableNullableOfDateTimeOperationFilterInputBuilder?
              refreshTokenExpiryTime) =>
      _$this._refreshTokenExpiryTime = refreshTokenExpiryTime;

  GComparableInt32OperationFilterInputBuilder? _totalRating;
  GComparableInt32OperationFilterInputBuilder get totalRating =>
      _$this._totalRating ??= new GComparableInt32OperationFilterInputBuilder();
  set totalRating(GComparableInt32OperationFilterInputBuilder? totalRating) =>
      _$this._totalRating = totalRating;

  GComparableDoubleOperationFilterInputBuilder? _averageRating;
  GComparableDoubleOperationFilterInputBuilder get averageRating =>
      _$this._averageRating ??=
          new GComparableDoubleOperationFilterInputBuilder();
  set averageRating(
          GComparableDoubleOperationFilterInputBuilder? averageRating) =>
      _$this._averageRating = averageRating;

  GComparableInt32OperationFilterInputBuilder? _tripsCreated;
  GComparableInt32OperationFilterInputBuilder get tripsCreated =>
      _$this._tripsCreated ??=
          new GComparableInt32OperationFilterInputBuilder();
  set tripsCreated(GComparableInt32OperationFilterInputBuilder? tripsCreated) =>
      _$this._tripsCreated = tripsCreated;

  GComparableInt32OperationFilterInputBuilder? _tripsCompleted;
  GComparableInt32OperationFilterInputBuilder get tripsCompleted =>
      _$this._tripsCompleted ??=
          new GComparableInt32OperationFilterInputBuilder();
  set tripsCompleted(
          GComparableInt32OperationFilterInputBuilder? tripsCompleted) =>
      _$this._tripsCompleted = tripsCompleted;

  GComparableInt32OperationFilterInputBuilder? _tripsCancelled;
  GComparableInt32OperationFilterInputBuilder get tripsCancelled =>
      _$this._tripsCancelled ??=
          new GComparableInt32OperationFilterInputBuilder();
  set tripsCancelled(
          GComparableInt32OperationFilterInputBuilder? tripsCancelled) =>
      _$this._tripsCancelled = tripsCancelled;

  GBooleanOperationFilterInputBuilder? _isVerified;
  GBooleanOperationFilterInputBuilder get isVerified =>
      _$this._isVerified ??= new GBooleanOperationFilterInputBuilder();
  set isVerified(GBooleanOperationFilterInputBuilder? isVerified) =>
      _$this._isVerified = isVerified;

  GStringOperationFilterInputBuilder? _aboutMe;
  GStringOperationFilterInputBuilder get aboutMe =>
      _$this._aboutMe ??= new GStringOperationFilterInputBuilder();
  set aboutMe(GStringOperationFilterInputBuilder? aboutMe) =>
      _$this._aboutMe = aboutMe;

  GComparableSingleOperationFilterInputBuilder? _loyaltyPoints;
  GComparableSingleOperationFilterInputBuilder get loyaltyPoints =>
      _$this._loyaltyPoints ??=
          new GComparableSingleOperationFilterInputBuilder();
  set loyaltyPoints(
          GComparableSingleOperationFilterInputBuilder? loyaltyPoints) =>
      _$this._loyaltyPoints = loyaltyPoints;

  GLocationFilterInputBuilder? _location;
  GLocationFilterInputBuilder get location =>
      _$this._location ??= new GLocationFilterInputBuilder();
  set location(GLocationFilterInputBuilder? location) =>
      _$this._location = location;

  GDeviceFilterInputBuilder? _device;
  GDeviceFilterInputBuilder get device =>
      _$this._device ??= new GDeviceFilterInputBuilder();
  set device(GDeviceFilterInputBuilder? device) => _$this._device = device;

  GListFilterInputTypeOfUserRidesFilterInputBuilder? _rides;
  GListFilterInputTypeOfUserRidesFilterInputBuilder get rides =>
      _$this._rides ??= new GListFilterInputTypeOfUserRidesFilterInputBuilder();
  set rides(GListFilterInputTypeOfUserRidesFilterInputBuilder? rides) =>
      _$this._rides = rides;

  GListFilterInputTypeOfUserRatingFilterInputBuilder? _userRatings;
  GListFilterInputTypeOfUserRatingFilterInputBuilder get userRatings =>
      _$this._userRatings ??=
          new GListFilterInputTypeOfUserRatingFilterInputBuilder();
  set userRatings(
          GListFilterInputTypeOfUserRatingFilterInputBuilder? userRatings) =>
      _$this._userRatings = userRatings;

  GListFilterInputTypeOfFrequentRouteFilterInputBuilder? _frequentRoutes;
  GListFilterInputTypeOfFrequentRouteFilterInputBuilder get frequentRoutes =>
      _$this._frequentRoutes ??=
          new GListFilterInputTypeOfFrequentRouteFilterInputBuilder();
  set frequentRoutes(
          GListFilterInputTypeOfFrequentRouteFilterInputBuilder?
              frequentRoutes) =>
      _$this._frequentRoutes = frequentRoutes;

  GListFilterInputTypeOfSafiriCarUserFilterInputBuilder? _userReferals;
  GListFilterInputTypeOfSafiriCarUserFilterInputBuilder get userReferals =>
      _$this._userReferals ??=
          new GListFilterInputTypeOfSafiriCarUserFilterInputBuilder();
  set userReferals(
          GListFilterInputTypeOfSafiriCarUserFilterInputBuilder?
              userReferals) =>
      _$this._userReferals = userReferals;

  GStringOperationFilterInputBuilder? _id;
  GStringOperationFilterInputBuilder get id =>
      _$this._id ??= new GStringOperationFilterInputBuilder();
  set id(GStringOperationFilterInputBuilder? id) => _$this._id = id;

  GStringOperationFilterInputBuilder? _userName;
  GStringOperationFilterInputBuilder get userName =>
      _$this._userName ??= new GStringOperationFilterInputBuilder();
  set userName(GStringOperationFilterInputBuilder? userName) =>
      _$this._userName = userName;

  GStringOperationFilterInputBuilder? _normalizedUserName;
  GStringOperationFilterInputBuilder get normalizedUserName =>
      _$this._normalizedUserName ??= new GStringOperationFilterInputBuilder();
  set normalizedUserName(
          GStringOperationFilterInputBuilder? normalizedUserName) =>
      _$this._normalizedUserName = normalizedUserName;

  GStringOperationFilterInputBuilder? _email;
  GStringOperationFilterInputBuilder get email =>
      _$this._email ??= new GStringOperationFilterInputBuilder();
  set email(GStringOperationFilterInputBuilder? email) => _$this._email = email;

  GStringOperationFilterInputBuilder? _normalizedEmail;
  GStringOperationFilterInputBuilder get normalizedEmail =>
      _$this._normalizedEmail ??= new GStringOperationFilterInputBuilder();
  set normalizedEmail(GStringOperationFilterInputBuilder? normalizedEmail) =>
      _$this._normalizedEmail = normalizedEmail;

  GBooleanOperationFilterInputBuilder? _emailConfirmed;
  GBooleanOperationFilterInputBuilder get emailConfirmed =>
      _$this._emailConfirmed ??= new GBooleanOperationFilterInputBuilder();
  set emailConfirmed(GBooleanOperationFilterInputBuilder? emailConfirmed) =>
      _$this._emailConfirmed = emailConfirmed;

  GStringOperationFilterInputBuilder? _passwordHash;
  GStringOperationFilterInputBuilder get passwordHash =>
      _$this._passwordHash ??= new GStringOperationFilterInputBuilder();
  set passwordHash(GStringOperationFilterInputBuilder? passwordHash) =>
      _$this._passwordHash = passwordHash;

  GStringOperationFilterInputBuilder? _securityStamp;
  GStringOperationFilterInputBuilder get securityStamp =>
      _$this._securityStamp ??= new GStringOperationFilterInputBuilder();
  set securityStamp(GStringOperationFilterInputBuilder? securityStamp) =>
      _$this._securityStamp = securityStamp;

  GStringOperationFilterInputBuilder? _concurrencyStamp;
  GStringOperationFilterInputBuilder get concurrencyStamp =>
      _$this._concurrencyStamp ??= new GStringOperationFilterInputBuilder();
  set concurrencyStamp(GStringOperationFilterInputBuilder? concurrencyStamp) =>
      _$this._concurrencyStamp = concurrencyStamp;

  GStringOperationFilterInputBuilder? _phoneNumber;
  GStringOperationFilterInputBuilder get phoneNumber =>
      _$this._phoneNumber ??= new GStringOperationFilterInputBuilder();
  set phoneNumber(GStringOperationFilterInputBuilder? phoneNumber) =>
      _$this._phoneNumber = phoneNumber;

  GBooleanOperationFilterInputBuilder? _phoneNumberConfirmed;
  GBooleanOperationFilterInputBuilder get phoneNumberConfirmed =>
      _$this._phoneNumberConfirmed ??=
          new GBooleanOperationFilterInputBuilder();
  set phoneNumberConfirmed(
          GBooleanOperationFilterInputBuilder? phoneNumberConfirmed) =>
      _$this._phoneNumberConfirmed = phoneNumberConfirmed;

  GBooleanOperationFilterInputBuilder? _twoFactorEnabled;
  GBooleanOperationFilterInputBuilder get twoFactorEnabled =>
      _$this._twoFactorEnabled ??= new GBooleanOperationFilterInputBuilder();
  set twoFactorEnabled(GBooleanOperationFilterInputBuilder? twoFactorEnabled) =>
      _$this._twoFactorEnabled = twoFactorEnabled;

  GComparableNullableOfDateTimeOffsetOperationFilterInputBuilder? _lockoutEnd;
  GComparableNullableOfDateTimeOffsetOperationFilterInputBuilder
      get lockoutEnd => _$this._lockoutEnd ??=
          new GComparableNullableOfDateTimeOffsetOperationFilterInputBuilder();
  set lockoutEnd(
          GComparableNullableOfDateTimeOffsetOperationFilterInputBuilder?
              lockoutEnd) =>
      _$this._lockoutEnd = lockoutEnd;

  GBooleanOperationFilterInputBuilder? _lockoutEnabled;
  GBooleanOperationFilterInputBuilder get lockoutEnabled =>
      _$this._lockoutEnabled ??= new GBooleanOperationFilterInputBuilder();
  set lockoutEnabled(GBooleanOperationFilterInputBuilder? lockoutEnabled) =>
      _$this._lockoutEnabled = lockoutEnabled;

  GComparableInt32OperationFilterInputBuilder? _accessFailedCount;
  GComparableInt32OperationFilterInputBuilder get accessFailedCount =>
      _$this._accessFailedCount ??=
          new GComparableInt32OperationFilterInputBuilder();
  set accessFailedCount(
          GComparableInt32OperationFilterInputBuilder? accessFailedCount) =>
      _$this._accessFailedCount = accessFailedCount;

  GSafiriCarUserFilterInputBuilder();

  GSafiriCarUserFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _and = $v.and?.toBuilder();
      _or = $v.or?.toBuilder();
      _firstName = $v.firstName?.toBuilder();
      _lastName = $v.lastName?.toBuilder();
      _nationalId = $v.nationalId?.toBuilder();
      _ownedCars = $v.ownedCars?.toBuilder();
      _createdBy = $v.createdBy?.toBuilder();
      _profilePictureDataUrl = $v.profilePictureDataUrl?.toBuilder();
      _referalCode = $v.referalCode?.toBuilder();
      _identificationDocument = $v.identificationDocument?.toBuilder();
      _createdOn = $v.createdOn?.toBuilder();
      _lastModifiedBy = $v.lastModifiedBy?.toBuilder();
      _lastModifiedOn = $v.lastModifiedOn?.toBuilder();
      _isDeleted = $v.isDeleted?.toBuilder();
      _deletedOn = $v.deletedOn?.toBuilder();
      _isActive = $v.isActive?.toBuilder();
      _refreshToken = $v.refreshToken?.toBuilder();
      _role = $v.role?.toBuilder();
      _refreshTokenExpiryTime = $v.refreshTokenExpiryTime?.toBuilder();
      _totalRating = $v.totalRating?.toBuilder();
      _averageRating = $v.averageRating?.toBuilder();
      _tripsCreated = $v.tripsCreated?.toBuilder();
      _tripsCompleted = $v.tripsCompleted?.toBuilder();
      _tripsCancelled = $v.tripsCancelled?.toBuilder();
      _isVerified = $v.isVerified?.toBuilder();
      _aboutMe = $v.aboutMe?.toBuilder();
      _loyaltyPoints = $v.loyaltyPoints?.toBuilder();
      _location = $v.location?.toBuilder();
      _device = $v.device?.toBuilder();
      _rides = $v.rides?.toBuilder();
      _userRatings = $v.userRatings?.toBuilder();
      _frequentRoutes = $v.frequentRoutes?.toBuilder();
      _userReferals = $v.userReferals?.toBuilder();
      _id = $v.id?.toBuilder();
      _userName = $v.userName?.toBuilder();
      _normalizedUserName = $v.normalizedUserName?.toBuilder();
      _email = $v.email?.toBuilder();
      _normalizedEmail = $v.normalizedEmail?.toBuilder();
      _emailConfirmed = $v.emailConfirmed?.toBuilder();
      _passwordHash = $v.passwordHash?.toBuilder();
      _securityStamp = $v.securityStamp?.toBuilder();
      _concurrencyStamp = $v.concurrencyStamp?.toBuilder();
      _phoneNumber = $v.phoneNumber?.toBuilder();
      _phoneNumberConfirmed = $v.phoneNumberConfirmed?.toBuilder();
      _twoFactorEnabled = $v.twoFactorEnabled?.toBuilder();
      _lockoutEnd = $v.lockoutEnd?.toBuilder();
      _lockoutEnabled = $v.lockoutEnabled?.toBuilder();
      _accessFailedCount = $v.accessFailedCount?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GSafiriCarUserFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GSafiriCarUserFilterInput;
  }

  @override
  void update(void Function(GSafiriCarUserFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GSafiriCarUserFilterInput build() => _build();

  _$GSafiriCarUserFilterInput _build() {
    _$GSafiriCarUserFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GSafiriCarUserFilterInput._(
              and: _and?.build(),
              or: _or?.build(),
              firstName: _firstName?.build(),
              lastName: _lastName?.build(),
              nationalId: _nationalId?.build(),
              ownedCars: _ownedCars?.build(),
              createdBy: _createdBy?.build(),
              profilePictureDataUrl: _profilePictureDataUrl?.build(),
              referalCode: _referalCode?.build(),
              identificationDocument: _identificationDocument?.build(),
              createdOn: _createdOn?.build(),
              lastModifiedBy: _lastModifiedBy?.build(),
              lastModifiedOn: _lastModifiedOn?.build(),
              isDeleted: _isDeleted?.build(),
              deletedOn: _deletedOn?.build(),
              isActive: _isActive?.build(),
              refreshToken: _refreshToken?.build(),
              role: _role?.build(),
              refreshTokenExpiryTime: _refreshTokenExpiryTime?.build(),
              totalRating: _totalRating?.build(),
              averageRating: _averageRating?.build(),
              tripsCreated: _tripsCreated?.build(),
              tripsCompleted: _tripsCompleted?.build(),
              tripsCancelled: _tripsCancelled?.build(),
              isVerified: _isVerified?.build(),
              aboutMe: _aboutMe?.build(),
              loyaltyPoints: _loyaltyPoints?.build(),
              location: _location?.build(),
              device: _device?.build(),
              rides: _rides?.build(),
              userRatings: _userRatings?.build(),
              frequentRoutes: _frequentRoutes?.build(),
              userReferals: _userReferals?.build(),
              id: _id?.build(),
              userName: _userName?.build(),
              normalizedUserName: _normalizedUserName?.build(),
              email: _email?.build(),
              normalizedEmail: _normalizedEmail?.build(),
              emailConfirmed: _emailConfirmed?.build(),
              passwordHash: _passwordHash?.build(),
              securityStamp: _securityStamp?.build(),
              concurrencyStamp: _concurrencyStamp?.build(),
              phoneNumber: _phoneNumber?.build(),
              phoneNumberConfirmed: _phoneNumberConfirmed?.build(),
              twoFactorEnabled: _twoFactorEnabled?.build(),
              lockoutEnd: _lockoutEnd?.build(),
              lockoutEnabled: _lockoutEnabled?.build(),
              accessFailedCount: _accessFailedCount?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'and';
        _and?.build();
        _$failedField = 'or';
        _or?.build();
        _$failedField = 'firstName';
        _firstName?.build();
        _$failedField = 'lastName';
        _lastName?.build();
        _$failedField = 'nationalId';
        _nationalId?.build();
        _$failedField = 'ownedCars';
        _ownedCars?.build();
        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'profilePictureDataUrl';
        _profilePictureDataUrl?.build();
        _$failedField = 'referalCode';
        _referalCode?.build();
        _$failedField = 'identificationDocument';
        _identificationDocument?.build();
        _$failedField = 'createdOn';
        _createdOn?.build();
        _$failedField = 'lastModifiedBy';
        _lastModifiedBy?.build();
        _$failedField = 'lastModifiedOn';
        _lastModifiedOn?.build();
        _$failedField = 'isDeleted';
        _isDeleted?.build();
        _$failedField = 'deletedOn';
        _deletedOn?.build();
        _$failedField = 'isActive';
        _isActive?.build();
        _$failedField = 'refreshToken';
        _refreshToken?.build();
        _$failedField = 'role';
        _role?.build();
        _$failedField = 'refreshTokenExpiryTime';
        _refreshTokenExpiryTime?.build();
        _$failedField = 'totalRating';
        _totalRating?.build();
        _$failedField = 'averageRating';
        _averageRating?.build();
        _$failedField = 'tripsCreated';
        _tripsCreated?.build();
        _$failedField = 'tripsCompleted';
        _tripsCompleted?.build();
        _$failedField = 'tripsCancelled';
        _tripsCancelled?.build();
        _$failedField = 'isVerified';
        _isVerified?.build();
        _$failedField = 'aboutMe';
        _aboutMe?.build();
        _$failedField = 'loyaltyPoints';
        _loyaltyPoints?.build();
        _$failedField = 'location';
        _location?.build();
        _$failedField = 'device';
        _device?.build();
        _$failedField = 'rides';
        _rides?.build();
        _$failedField = 'userRatings';
        _userRatings?.build();
        _$failedField = 'frequentRoutes';
        _frequentRoutes?.build();
        _$failedField = 'userReferals';
        _userReferals?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'userName';
        _userName?.build();
        _$failedField = 'normalizedUserName';
        _normalizedUserName?.build();
        _$failedField = 'email';
        _email?.build();
        _$failedField = 'normalizedEmail';
        _normalizedEmail?.build();
        _$failedField = 'emailConfirmed';
        _emailConfirmed?.build();
        _$failedField = 'passwordHash';
        _passwordHash?.build();
        _$failedField = 'securityStamp';
        _securityStamp?.build();
        _$failedField = 'concurrencyStamp';
        _concurrencyStamp?.build();
        _$failedField = 'phoneNumber';
        _phoneNumber?.build();
        _$failedField = 'phoneNumberConfirmed';
        _phoneNumberConfirmed?.build();
        _$failedField = 'twoFactorEnabled';
        _twoFactorEnabled?.build();
        _$failedField = 'lockoutEnd';
        _lockoutEnd?.build();
        _$failedField = 'lockoutEnabled';
        _lockoutEnabled?.build();
        _$failedField = 'accessFailedCount';
        _accessFailedCount?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GSafiriCarUserFilterInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GSafiriCarUserSortInput extends GSafiriCarUserSortInput {
  @override
  final GSortEnumType? firstName;
  @override
  final GSortEnumType? lastName;
  @override
  final GSortEnumType? nationalId;
  @override
  final GSortEnumType? createdBy;
  @override
  final GSortEnumType? profilePictureDataUrl;
  @override
  final GSortEnumType? referalCode;
  @override
  final GIdentificationDocumentSortInput? identificationDocument;
  @override
  final GSortEnumType? createdOn;
  @override
  final GSortEnumType? lastModifiedBy;
  @override
  final GSortEnumType? lastModifiedOn;
  @override
  final GSortEnumType? isDeleted;
  @override
  final GSortEnumType? deletedOn;
  @override
  final GSortEnumType? isActive;
  @override
  final GSortEnumType? refreshToken;
  @override
  final GSortEnumType? role;
  @override
  final GSortEnumType? refreshTokenExpiryTime;
  @override
  final GSortEnumType? totalRating;
  @override
  final GSortEnumType? averageRating;
  @override
  final GSortEnumType? tripsCreated;
  @override
  final GSortEnumType? tripsCompleted;
  @override
  final GSortEnumType? tripsCancelled;
  @override
  final GSortEnumType? isVerified;
  @override
  final GSortEnumType? aboutMe;
  @override
  final GSortEnumType? loyaltyPoints;
  @override
  final GLocationSortInput? location;
  @override
  final GDeviceSortInput? device;
  @override
  final GSortEnumType? id;
  @override
  final GSortEnumType? userName;
  @override
  final GSortEnumType? normalizedUserName;
  @override
  final GSortEnumType? email;
  @override
  final GSortEnumType? normalizedEmail;
  @override
  final GSortEnumType? emailConfirmed;
  @override
  final GSortEnumType? passwordHash;
  @override
  final GSortEnumType? securityStamp;
  @override
  final GSortEnumType? concurrencyStamp;
  @override
  final GSortEnumType? phoneNumber;
  @override
  final GSortEnumType? phoneNumberConfirmed;
  @override
  final GSortEnumType? twoFactorEnabled;
  @override
  final GSortEnumType? lockoutEnd;
  @override
  final GSortEnumType? lockoutEnabled;
  @override
  final GSortEnumType? accessFailedCount;

  factory _$GSafiriCarUserSortInput(
          [void Function(GSafiriCarUserSortInputBuilder)? updates]) =>
      (new GSafiriCarUserSortInputBuilder()..update(updates))._build();

  _$GSafiriCarUserSortInput._(
      {this.firstName,
      this.lastName,
      this.nationalId,
      this.createdBy,
      this.profilePictureDataUrl,
      this.referalCode,
      this.identificationDocument,
      this.createdOn,
      this.lastModifiedBy,
      this.lastModifiedOn,
      this.isDeleted,
      this.deletedOn,
      this.isActive,
      this.refreshToken,
      this.role,
      this.refreshTokenExpiryTime,
      this.totalRating,
      this.averageRating,
      this.tripsCreated,
      this.tripsCompleted,
      this.tripsCancelled,
      this.isVerified,
      this.aboutMe,
      this.loyaltyPoints,
      this.location,
      this.device,
      this.id,
      this.userName,
      this.normalizedUserName,
      this.email,
      this.normalizedEmail,
      this.emailConfirmed,
      this.passwordHash,
      this.securityStamp,
      this.concurrencyStamp,
      this.phoneNumber,
      this.phoneNumberConfirmed,
      this.twoFactorEnabled,
      this.lockoutEnd,
      this.lockoutEnabled,
      this.accessFailedCount})
      : super._();

  @override
  GSafiriCarUserSortInput rebuild(
          void Function(GSafiriCarUserSortInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GSafiriCarUserSortInputBuilder toBuilder() =>
      new GSafiriCarUserSortInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GSafiriCarUserSortInput &&
        firstName == other.firstName &&
        lastName == other.lastName &&
        nationalId == other.nationalId &&
        createdBy == other.createdBy &&
        profilePictureDataUrl == other.profilePictureDataUrl &&
        referalCode == other.referalCode &&
        identificationDocument == other.identificationDocument &&
        createdOn == other.createdOn &&
        lastModifiedBy == other.lastModifiedBy &&
        lastModifiedOn == other.lastModifiedOn &&
        isDeleted == other.isDeleted &&
        deletedOn == other.deletedOn &&
        isActive == other.isActive &&
        refreshToken == other.refreshToken &&
        role == other.role &&
        refreshTokenExpiryTime == other.refreshTokenExpiryTime &&
        totalRating == other.totalRating &&
        averageRating == other.averageRating &&
        tripsCreated == other.tripsCreated &&
        tripsCompleted == other.tripsCompleted &&
        tripsCancelled == other.tripsCancelled &&
        isVerified == other.isVerified &&
        aboutMe == other.aboutMe &&
        loyaltyPoints == other.loyaltyPoints &&
        location == other.location &&
        device == other.device &&
        id == other.id &&
        userName == other.userName &&
        normalizedUserName == other.normalizedUserName &&
        email == other.email &&
        normalizedEmail == other.normalizedEmail &&
        emailConfirmed == other.emailConfirmed &&
        passwordHash == other.passwordHash &&
        securityStamp == other.securityStamp &&
        concurrencyStamp == other.concurrencyStamp &&
        phoneNumber == other.phoneNumber &&
        phoneNumberConfirmed == other.phoneNumberConfirmed &&
        twoFactorEnabled == other.twoFactorEnabled &&
        lockoutEnd == other.lockoutEnd &&
        lockoutEnabled == other.lockoutEnabled &&
        accessFailedCount == other.accessFailedCount;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, firstName.hashCode);
    _$hash = $jc(_$hash, lastName.hashCode);
    _$hash = $jc(_$hash, nationalId.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, profilePictureDataUrl.hashCode);
    _$hash = $jc(_$hash, referalCode.hashCode);
    _$hash = $jc(_$hash, identificationDocument.hashCode);
    _$hash = $jc(_$hash, createdOn.hashCode);
    _$hash = $jc(_$hash, lastModifiedBy.hashCode);
    _$hash = $jc(_$hash, lastModifiedOn.hashCode);
    _$hash = $jc(_$hash, isDeleted.hashCode);
    _$hash = $jc(_$hash, deletedOn.hashCode);
    _$hash = $jc(_$hash, isActive.hashCode);
    _$hash = $jc(_$hash, refreshToken.hashCode);
    _$hash = $jc(_$hash, role.hashCode);
    _$hash = $jc(_$hash, refreshTokenExpiryTime.hashCode);
    _$hash = $jc(_$hash, totalRating.hashCode);
    _$hash = $jc(_$hash, averageRating.hashCode);
    _$hash = $jc(_$hash, tripsCreated.hashCode);
    _$hash = $jc(_$hash, tripsCompleted.hashCode);
    _$hash = $jc(_$hash, tripsCancelled.hashCode);
    _$hash = $jc(_$hash, isVerified.hashCode);
    _$hash = $jc(_$hash, aboutMe.hashCode);
    _$hash = $jc(_$hash, loyaltyPoints.hashCode);
    _$hash = $jc(_$hash, location.hashCode);
    _$hash = $jc(_$hash, device.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, userName.hashCode);
    _$hash = $jc(_$hash, normalizedUserName.hashCode);
    _$hash = $jc(_$hash, email.hashCode);
    _$hash = $jc(_$hash, normalizedEmail.hashCode);
    _$hash = $jc(_$hash, emailConfirmed.hashCode);
    _$hash = $jc(_$hash, passwordHash.hashCode);
    _$hash = $jc(_$hash, securityStamp.hashCode);
    _$hash = $jc(_$hash, concurrencyStamp.hashCode);
    _$hash = $jc(_$hash, phoneNumber.hashCode);
    _$hash = $jc(_$hash, phoneNumberConfirmed.hashCode);
    _$hash = $jc(_$hash, twoFactorEnabled.hashCode);
    _$hash = $jc(_$hash, lockoutEnd.hashCode);
    _$hash = $jc(_$hash, lockoutEnabled.hashCode);
    _$hash = $jc(_$hash, accessFailedCount.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GSafiriCarUserSortInput')
          ..add('firstName', firstName)
          ..add('lastName', lastName)
          ..add('nationalId', nationalId)
          ..add('createdBy', createdBy)
          ..add('profilePictureDataUrl', profilePictureDataUrl)
          ..add('referalCode', referalCode)
          ..add('identificationDocument', identificationDocument)
          ..add('createdOn', createdOn)
          ..add('lastModifiedBy', lastModifiedBy)
          ..add('lastModifiedOn', lastModifiedOn)
          ..add('isDeleted', isDeleted)
          ..add('deletedOn', deletedOn)
          ..add('isActive', isActive)
          ..add('refreshToken', refreshToken)
          ..add('role', role)
          ..add('refreshTokenExpiryTime', refreshTokenExpiryTime)
          ..add('totalRating', totalRating)
          ..add('averageRating', averageRating)
          ..add('tripsCreated', tripsCreated)
          ..add('tripsCompleted', tripsCompleted)
          ..add('tripsCancelled', tripsCancelled)
          ..add('isVerified', isVerified)
          ..add('aboutMe', aboutMe)
          ..add('loyaltyPoints', loyaltyPoints)
          ..add('location', location)
          ..add('device', device)
          ..add('id', id)
          ..add('userName', userName)
          ..add('normalizedUserName', normalizedUserName)
          ..add('email', email)
          ..add('normalizedEmail', normalizedEmail)
          ..add('emailConfirmed', emailConfirmed)
          ..add('passwordHash', passwordHash)
          ..add('securityStamp', securityStamp)
          ..add('concurrencyStamp', concurrencyStamp)
          ..add('phoneNumber', phoneNumber)
          ..add('phoneNumberConfirmed', phoneNumberConfirmed)
          ..add('twoFactorEnabled', twoFactorEnabled)
          ..add('lockoutEnd', lockoutEnd)
          ..add('lockoutEnabled', lockoutEnabled)
          ..add('accessFailedCount', accessFailedCount))
        .toString();
  }
}

class GSafiriCarUserSortInputBuilder
    implements
        Builder<GSafiriCarUserSortInput, GSafiriCarUserSortInputBuilder> {
  _$GSafiriCarUserSortInput? _$v;

  GSortEnumType? _firstName;
  GSortEnumType? get firstName => _$this._firstName;
  set firstName(GSortEnumType? firstName) => _$this._firstName = firstName;

  GSortEnumType? _lastName;
  GSortEnumType? get lastName => _$this._lastName;
  set lastName(GSortEnumType? lastName) => _$this._lastName = lastName;

  GSortEnumType? _nationalId;
  GSortEnumType? get nationalId => _$this._nationalId;
  set nationalId(GSortEnumType? nationalId) => _$this._nationalId = nationalId;

  GSortEnumType? _createdBy;
  GSortEnumType? get createdBy => _$this._createdBy;
  set createdBy(GSortEnumType? createdBy) => _$this._createdBy = createdBy;

  GSortEnumType? _profilePictureDataUrl;
  GSortEnumType? get profilePictureDataUrl => _$this._profilePictureDataUrl;
  set profilePictureDataUrl(GSortEnumType? profilePictureDataUrl) =>
      _$this._profilePictureDataUrl = profilePictureDataUrl;

  GSortEnumType? _referalCode;
  GSortEnumType? get referalCode => _$this._referalCode;
  set referalCode(GSortEnumType? referalCode) =>
      _$this._referalCode = referalCode;

  GIdentificationDocumentSortInputBuilder? _identificationDocument;
  GIdentificationDocumentSortInputBuilder get identificationDocument =>
      _$this._identificationDocument ??=
          new GIdentificationDocumentSortInputBuilder();
  set identificationDocument(
          GIdentificationDocumentSortInputBuilder? identificationDocument) =>
      _$this._identificationDocument = identificationDocument;

  GSortEnumType? _createdOn;
  GSortEnumType? get createdOn => _$this._createdOn;
  set createdOn(GSortEnumType? createdOn) => _$this._createdOn = createdOn;

  GSortEnumType? _lastModifiedBy;
  GSortEnumType? get lastModifiedBy => _$this._lastModifiedBy;
  set lastModifiedBy(GSortEnumType? lastModifiedBy) =>
      _$this._lastModifiedBy = lastModifiedBy;

  GSortEnumType? _lastModifiedOn;
  GSortEnumType? get lastModifiedOn => _$this._lastModifiedOn;
  set lastModifiedOn(GSortEnumType? lastModifiedOn) =>
      _$this._lastModifiedOn = lastModifiedOn;

  GSortEnumType? _isDeleted;
  GSortEnumType? get isDeleted => _$this._isDeleted;
  set isDeleted(GSortEnumType? isDeleted) => _$this._isDeleted = isDeleted;

  GSortEnumType? _deletedOn;
  GSortEnumType? get deletedOn => _$this._deletedOn;
  set deletedOn(GSortEnumType? deletedOn) => _$this._deletedOn = deletedOn;

  GSortEnumType? _isActive;
  GSortEnumType? get isActive => _$this._isActive;
  set isActive(GSortEnumType? isActive) => _$this._isActive = isActive;

  GSortEnumType? _refreshToken;
  GSortEnumType? get refreshToken => _$this._refreshToken;
  set refreshToken(GSortEnumType? refreshToken) =>
      _$this._refreshToken = refreshToken;

  GSortEnumType? _role;
  GSortEnumType? get role => _$this._role;
  set role(GSortEnumType? role) => _$this._role = role;

  GSortEnumType? _refreshTokenExpiryTime;
  GSortEnumType? get refreshTokenExpiryTime => _$this._refreshTokenExpiryTime;
  set refreshTokenExpiryTime(GSortEnumType? refreshTokenExpiryTime) =>
      _$this._refreshTokenExpiryTime = refreshTokenExpiryTime;

  GSortEnumType? _totalRating;
  GSortEnumType? get totalRating => _$this._totalRating;
  set totalRating(GSortEnumType? totalRating) =>
      _$this._totalRating = totalRating;

  GSortEnumType? _averageRating;
  GSortEnumType? get averageRating => _$this._averageRating;
  set averageRating(GSortEnumType? averageRating) =>
      _$this._averageRating = averageRating;

  GSortEnumType? _tripsCreated;
  GSortEnumType? get tripsCreated => _$this._tripsCreated;
  set tripsCreated(GSortEnumType? tripsCreated) =>
      _$this._tripsCreated = tripsCreated;

  GSortEnumType? _tripsCompleted;
  GSortEnumType? get tripsCompleted => _$this._tripsCompleted;
  set tripsCompleted(GSortEnumType? tripsCompleted) =>
      _$this._tripsCompleted = tripsCompleted;

  GSortEnumType? _tripsCancelled;
  GSortEnumType? get tripsCancelled => _$this._tripsCancelled;
  set tripsCancelled(GSortEnumType? tripsCancelled) =>
      _$this._tripsCancelled = tripsCancelled;

  GSortEnumType? _isVerified;
  GSortEnumType? get isVerified => _$this._isVerified;
  set isVerified(GSortEnumType? isVerified) => _$this._isVerified = isVerified;

  GSortEnumType? _aboutMe;
  GSortEnumType? get aboutMe => _$this._aboutMe;
  set aboutMe(GSortEnumType? aboutMe) => _$this._aboutMe = aboutMe;

  GSortEnumType? _loyaltyPoints;
  GSortEnumType? get loyaltyPoints => _$this._loyaltyPoints;
  set loyaltyPoints(GSortEnumType? loyaltyPoints) =>
      _$this._loyaltyPoints = loyaltyPoints;

  GLocationSortInputBuilder? _location;
  GLocationSortInputBuilder get location =>
      _$this._location ??= new GLocationSortInputBuilder();
  set location(GLocationSortInputBuilder? location) =>
      _$this._location = location;

  GDeviceSortInputBuilder? _device;
  GDeviceSortInputBuilder get device =>
      _$this._device ??= new GDeviceSortInputBuilder();
  set device(GDeviceSortInputBuilder? device) => _$this._device = device;

  GSortEnumType? _id;
  GSortEnumType? get id => _$this._id;
  set id(GSortEnumType? id) => _$this._id = id;

  GSortEnumType? _userName;
  GSortEnumType? get userName => _$this._userName;
  set userName(GSortEnumType? userName) => _$this._userName = userName;

  GSortEnumType? _normalizedUserName;
  GSortEnumType? get normalizedUserName => _$this._normalizedUserName;
  set normalizedUserName(GSortEnumType? normalizedUserName) =>
      _$this._normalizedUserName = normalizedUserName;

  GSortEnumType? _email;
  GSortEnumType? get email => _$this._email;
  set email(GSortEnumType? email) => _$this._email = email;

  GSortEnumType? _normalizedEmail;
  GSortEnumType? get normalizedEmail => _$this._normalizedEmail;
  set normalizedEmail(GSortEnumType? normalizedEmail) =>
      _$this._normalizedEmail = normalizedEmail;

  GSortEnumType? _emailConfirmed;
  GSortEnumType? get emailConfirmed => _$this._emailConfirmed;
  set emailConfirmed(GSortEnumType? emailConfirmed) =>
      _$this._emailConfirmed = emailConfirmed;

  GSortEnumType? _passwordHash;
  GSortEnumType? get passwordHash => _$this._passwordHash;
  set passwordHash(GSortEnumType? passwordHash) =>
      _$this._passwordHash = passwordHash;

  GSortEnumType? _securityStamp;
  GSortEnumType? get securityStamp => _$this._securityStamp;
  set securityStamp(GSortEnumType? securityStamp) =>
      _$this._securityStamp = securityStamp;

  GSortEnumType? _concurrencyStamp;
  GSortEnumType? get concurrencyStamp => _$this._concurrencyStamp;
  set concurrencyStamp(GSortEnumType? concurrencyStamp) =>
      _$this._concurrencyStamp = concurrencyStamp;

  GSortEnumType? _phoneNumber;
  GSortEnumType? get phoneNumber => _$this._phoneNumber;
  set phoneNumber(GSortEnumType? phoneNumber) =>
      _$this._phoneNumber = phoneNumber;

  GSortEnumType? _phoneNumberConfirmed;
  GSortEnumType? get phoneNumberConfirmed => _$this._phoneNumberConfirmed;
  set phoneNumberConfirmed(GSortEnumType? phoneNumberConfirmed) =>
      _$this._phoneNumberConfirmed = phoneNumberConfirmed;

  GSortEnumType? _twoFactorEnabled;
  GSortEnumType? get twoFactorEnabled => _$this._twoFactorEnabled;
  set twoFactorEnabled(GSortEnumType? twoFactorEnabled) =>
      _$this._twoFactorEnabled = twoFactorEnabled;

  GSortEnumType? _lockoutEnd;
  GSortEnumType? get lockoutEnd => _$this._lockoutEnd;
  set lockoutEnd(GSortEnumType? lockoutEnd) => _$this._lockoutEnd = lockoutEnd;

  GSortEnumType? _lockoutEnabled;
  GSortEnumType? get lockoutEnabled => _$this._lockoutEnabled;
  set lockoutEnabled(GSortEnumType? lockoutEnabled) =>
      _$this._lockoutEnabled = lockoutEnabled;

  GSortEnumType? _accessFailedCount;
  GSortEnumType? get accessFailedCount => _$this._accessFailedCount;
  set accessFailedCount(GSortEnumType? accessFailedCount) =>
      _$this._accessFailedCount = accessFailedCount;

  GSafiriCarUserSortInputBuilder();

  GSafiriCarUserSortInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _firstName = $v.firstName;
      _lastName = $v.lastName;
      _nationalId = $v.nationalId;
      _createdBy = $v.createdBy;
      _profilePictureDataUrl = $v.profilePictureDataUrl;
      _referalCode = $v.referalCode;
      _identificationDocument = $v.identificationDocument?.toBuilder();
      _createdOn = $v.createdOn;
      _lastModifiedBy = $v.lastModifiedBy;
      _lastModifiedOn = $v.lastModifiedOn;
      _isDeleted = $v.isDeleted;
      _deletedOn = $v.deletedOn;
      _isActive = $v.isActive;
      _refreshToken = $v.refreshToken;
      _role = $v.role;
      _refreshTokenExpiryTime = $v.refreshTokenExpiryTime;
      _totalRating = $v.totalRating;
      _averageRating = $v.averageRating;
      _tripsCreated = $v.tripsCreated;
      _tripsCompleted = $v.tripsCompleted;
      _tripsCancelled = $v.tripsCancelled;
      _isVerified = $v.isVerified;
      _aboutMe = $v.aboutMe;
      _loyaltyPoints = $v.loyaltyPoints;
      _location = $v.location?.toBuilder();
      _device = $v.device?.toBuilder();
      _id = $v.id;
      _userName = $v.userName;
      _normalizedUserName = $v.normalizedUserName;
      _email = $v.email;
      _normalizedEmail = $v.normalizedEmail;
      _emailConfirmed = $v.emailConfirmed;
      _passwordHash = $v.passwordHash;
      _securityStamp = $v.securityStamp;
      _concurrencyStamp = $v.concurrencyStamp;
      _phoneNumber = $v.phoneNumber;
      _phoneNumberConfirmed = $v.phoneNumberConfirmed;
      _twoFactorEnabled = $v.twoFactorEnabled;
      _lockoutEnd = $v.lockoutEnd;
      _lockoutEnabled = $v.lockoutEnabled;
      _accessFailedCount = $v.accessFailedCount;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GSafiriCarUserSortInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GSafiriCarUserSortInput;
  }

  @override
  void update(void Function(GSafiriCarUserSortInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GSafiriCarUserSortInput build() => _build();

  _$GSafiriCarUserSortInput _build() {
    _$GSafiriCarUserSortInput _$result;
    try {
      _$result = _$v ??
          new _$GSafiriCarUserSortInput._(
              firstName: firstName,
              lastName: lastName,
              nationalId: nationalId,
              createdBy: createdBy,
              profilePictureDataUrl: profilePictureDataUrl,
              referalCode: referalCode,
              identificationDocument: _identificationDocument?.build(),
              createdOn: createdOn,
              lastModifiedBy: lastModifiedBy,
              lastModifiedOn: lastModifiedOn,
              isDeleted: isDeleted,
              deletedOn: deletedOn,
              isActive: isActive,
              refreshToken: refreshToken,
              role: role,
              refreshTokenExpiryTime: refreshTokenExpiryTime,
              totalRating: totalRating,
              averageRating: averageRating,
              tripsCreated: tripsCreated,
              tripsCompleted: tripsCompleted,
              tripsCancelled: tripsCancelled,
              isVerified: isVerified,
              aboutMe: aboutMe,
              loyaltyPoints: loyaltyPoints,
              location: _location?.build(),
              device: _device?.build(),
              id: id,
              userName: userName,
              normalizedUserName: normalizedUserName,
              email: email,
              normalizedEmail: normalizedEmail,
              emailConfirmed: emailConfirmed,
              passwordHash: passwordHash,
              securityStamp: securityStamp,
              concurrencyStamp: concurrencyStamp,
              phoneNumber: phoneNumber,
              phoneNumberConfirmed: phoneNumberConfirmed,
              twoFactorEnabled: twoFactorEnabled,
              lockoutEnd: lockoutEnd,
              lockoutEnabled: lockoutEnabled,
              accessFailedCount: accessFailedCount);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'identificationDocument';
        _identificationDocument?.build();

        _$failedField = 'location';
        _location?.build();
        _$failedField = 'device';
        _device?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GSafiriCarUserSortInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GLocationFilterInput extends GLocationFilterInput {
  @override
  final BuiltList<GLocationFilterInput>? and;
  @override
  final BuiltList<GLocationFilterInput>? or;
  @override
  final GComparableInt32OperationFilterInput? id;
  @override
  final GStringOperationFilterInput? town;
  @override
  final GBooleanOperationFilterInput? isPopular;
  @override
  final GCountryFilterInput? country;
  @override
  final GComparableNullableOfDateTimeOperationFilterInput? createdOn;
  @override
  final GStringOperationFilterInput? createdBy;
  @override
  final GComparableNullableOfDateTimeOperationFilterInput? lastModifiedOn;
  @override
  final GStringOperationFilterInput? lastModifiedBy;

  factory _$GLocationFilterInput(
          [void Function(GLocationFilterInputBuilder)? updates]) =>
      (new GLocationFilterInputBuilder()..update(updates))._build();

  _$GLocationFilterInput._(
      {this.and,
      this.or,
      this.id,
      this.town,
      this.isPopular,
      this.country,
      this.createdOn,
      this.createdBy,
      this.lastModifiedOn,
      this.lastModifiedBy})
      : super._();

  @override
  GLocationFilterInput rebuild(
          void Function(GLocationFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GLocationFilterInputBuilder toBuilder() =>
      new GLocationFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GLocationFilterInput &&
        and == other.and &&
        or == other.or &&
        id == other.id &&
        town == other.town &&
        isPopular == other.isPopular &&
        country == other.country &&
        createdOn == other.createdOn &&
        createdBy == other.createdBy &&
        lastModifiedOn == other.lastModifiedOn &&
        lastModifiedBy == other.lastModifiedBy;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, and.hashCode);
    _$hash = $jc(_$hash, or.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, town.hashCode);
    _$hash = $jc(_$hash, isPopular.hashCode);
    _$hash = $jc(_$hash, country.hashCode);
    _$hash = $jc(_$hash, createdOn.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, lastModifiedOn.hashCode);
    _$hash = $jc(_$hash, lastModifiedBy.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GLocationFilterInput')
          ..add('and', and)
          ..add('or', or)
          ..add('id', id)
          ..add('town', town)
          ..add('isPopular', isPopular)
          ..add('country', country)
          ..add('createdOn', createdOn)
          ..add('createdBy', createdBy)
          ..add('lastModifiedOn', lastModifiedOn)
          ..add('lastModifiedBy', lastModifiedBy))
        .toString();
  }
}

class GLocationFilterInputBuilder
    implements Builder<GLocationFilterInput, GLocationFilterInputBuilder> {
  _$GLocationFilterInput? _$v;

  ListBuilder<GLocationFilterInput>? _and;
  ListBuilder<GLocationFilterInput> get and =>
      _$this._and ??= new ListBuilder<GLocationFilterInput>();
  set and(ListBuilder<GLocationFilterInput>? and) => _$this._and = and;

  ListBuilder<GLocationFilterInput>? _or;
  ListBuilder<GLocationFilterInput> get or =>
      _$this._or ??= new ListBuilder<GLocationFilterInput>();
  set or(ListBuilder<GLocationFilterInput>? or) => _$this._or = or;

  GComparableInt32OperationFilterInputBuilder? _id;
  GComparableInt32OperationFilterInputBuilder get id =>
      _$this._id ??= new GComparableInt32OperationFilterInputBuilder();
  set id(GComparableInt32OperationFilterInputBuilder? id) => _$this._id = id;

  GStringOperationFilterInputBuilder? _town;
  GStringOperationFilterInputBuilder get town =>
      _$this._town ??= new GStringOperationFilterInputBuilder();
  set town(GStringOperationFilterInputBuilder? town) => _$this._town = town;

  GBooleanOperationFilterInputBuilder? _isPopular;
  GBooleanOperationFilterInputBuilder get isPopular =>
      _$this._isPopular ??= new GBooleanOperationFilterInputBuilder();
  set isPopular(GBooleanOperationFilterInputBuilder? isPopular) =>
      _$this._isPopular = isPopular;

  GCountryFilterInputBuilder? _country;
  GCountryFilterInputBuilder get country =>
      _$this._country ??= new GCountryFilterInputBuilder();
  set country(GCountryFilterInputBuilder? country) => _$this._country = country;

  GComparableNullableOfDateTimeOperationFilterInputBuilder? _createdOn;
  GComparableNullableOfDateTimeOperationFilterInputBuilder get createdOn =>
      _$this._createdOn ??=
          new GComparableNullableOfDateTimeOperationFilterInputBuilder();
  set createdOn(
          GComparableNullableOfDateTimeOperationFilterInputBuilder?
              createdOn) =>
      _$this._createdOn = createdOn;

  GStringOperationFilterInputBuilder? _createdBy;
  GStringOperationFilterInputBuilder get createdBy =>
      _$this._createdBy ??= new GStringOperationFilterInputBuilder();
  set createdBy(GStringOperationFilterInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GComparableNullableOfDateTimeOperationFilterInputBuilder? _lastModifiedOn;
  GComparableNullableOfDateTimeOperationFilterInputBuilder get lastModifiedOn =>
      _$this._lastModifiedOn ??=
          new GComparableNullableOfDateTimeOperationFilterInputBuilder();
  set lastModifiedOn(
          GComparableNullableOfDateTimeOperationFilterInputBuilder?
              lastModifiedOn) =>
      _$this._lastModifiedOn = lastModifiedOn;

  GStringOperationFilterInputBuilder? _lastModifiedBy;
  GStringOperationFilterInputBuilder get lastModifiedBy =>
      _$this._lastModifiedBy ??= new GStringOperationFilterInputBuilder();
  set lastModifiedBy(GStringOperationFilterInputBuilder? lastModifiedBy) =>
      _$this._lastModifiedBy = lastModifiedBy;

  GLocationFilterInputBuilder();

  GLocationFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _and = $v.and?.toBuilder();
      _or = $v.or?.toBuilder();
      _id = $v.id?.toBuilder();
      _town = $v.town?.toBuilder();
      _isPopular = $v.isPopular?.toBuilder();
      _country = $v.country?.toBuilder();
      _createdOn = $v.createdOn?.toBuilder();
      _createdBy = $v.createdBy?.toBuilder();
      _lastModifiedOn = $v.lastModifiedOn?.toBuilder();
      _lastModifiedBy = $v.lastModifiedBy?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GLocationFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GLocationFilterInput;
  }

  @override
  void update(void Function(GLocationFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GLocationFilterInput build() => _build();

  _$GLocationFilterInput _build() {
    _$GLocationFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GLocationFilterInput._(
              and: _and?.build(),
              or: _or?.build(),
              id: _id?.build(),
              town: _town?.build(),
              isPopular: _isPopular?.build(),
              country: _country?.build(),
              createdOn: _createdOn?.build(),
              createdBy: _createdBy?.build(),
              lastModifiedOn: _lastModifiedOn?.build(),
              lastModifiedBy: _lastModifiedBy?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'and';
        _and?.build();
        _$failedField = 'or';
        _or?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'town';
        _town?.build();
        _$failedField = 'isPopular';
        _isPopular?.build();
        _$failedField = 'country';
        _country?.build();
        _$failedField = 'createdOn';
        _createdOn?.build();
        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'lastModifiedOn';
        _lastModifiedOn?.build();
        _$failedField = 'lastModifiedBy';
        _lastModifiedBy?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GLocationFilterInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GLocationSortInput extends GLocationSortInput {
  @override
  final GSortEnumType? id;
  @override
  final GSortEnumType? town;
  @override
  final GSortEnumType? isPopular;
  @override
  final GCountrySortInput? country;
  @override
  final GSortEnumType? createdOn;
  @override
  final GSortEnumType? createdBy;
  @override
  final GSortEnumType? lastModifiedOn;
  @override
  final GSortEnumType? lastModifiedBy;

  factory _$GLocationSortInput(
          [void Function(GLocationSortInputBuilder)? updates]) =>
      (new GLocationSortInputBuilder()..update(updates))._build();

  _$GLocationSortInput._(
      {this.id,
      this.town,
      this.isPopular,
      this.country,
      this.createdOn,
      this.createdBy,
      this.lastModifiedOn,
      this.lastModifiedBy})
      : super._();

  @override
  GLocationSortInput rebuild(
          void Function(GLocationSortInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GLocationSortInputBuilder toBuilder() =>
      new GLocationSortInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GLocationSortInput &&
        id == other.id &&
        town == other.town &&
        isPopular == other.isPopular &&
        country == other.country &&
        createdOn == other.createdOn &&
        createdBy == other.createdBy &&
        lastModifiedOn == other.lastModifiedOn &&
        lastModifiedBy == other.lastModifiedBy;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, town.hashCode);
    _$hash = $jc(_$hash, isPopular.hashCode);
    _$hash = $jc(_$hash, country.hashCode);
    _$hash = $jc(_$hash, createdOn.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, lastModifiedOn.hashCode);
    _$hash = $jc(_$hash, lastModifiedBy.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GLocationSortInput')
          ..add('id', id)
          ..add('town', town)
          ..add('isPopular', isPopular)
          ..add('country', country)
          ..add('createdOn', createdOn)
          ..add('createdBy', createdBy)
          ..add('lastModifiedOn', lastModifiedOn)
          ..add('lastModifiedBy', lastModifiedBy))
        .toString();
  }
}

class GLocationSortInputBuilder
    implements Builder<GLocationSortInput, GLocationSortInputBuilder> {
  _$GLocationSortInput? _$v;

  GSortEnumType? _id;
  GSortEnumType? get id => _$this._id;
  set id(GSortEnumType? id) => _$this._id = id;

  GSortEnumType? _town;
  GSortEnumType? get town => _$this._town;
  set town(GSortEnumType? town) => _$this._town = town;

  GSortEnumType? _isPopular;
  GSortEnumType? get isPopular => _$this._isPopular;
  set isPopular(GSortEnumType? isPopular) => _$this._isPopular = isPopular;

  GCountrySortInputBuilder? _country;
  GCountrySortInputBuilder get country =>
      _$this._country ??= new GCountrySortInputBuilder();
  set country(GCountrySortInputBuilder? country) => _$this._country = country;

  GSortEnumType? _createdOn;
  GSortEnumType? get createdOn => _$this._createdOn;
  set createdOn(GSortEnumType? createdOn) => _$this._createdOn = createdOn;

  GSortEnumType? _createdBy;
  GSortEnumType? get createdBy => _$this._createdBy;
  set createdBy(GSortEnumType? createdBy) => _$this._createdBy = createdBy;

  GSortEnumType? _lastModifiedOn;
  GSortEnumType? get lastModifiedOn => _$this._lastModifiedOn;
  set lastModifiedOn(GSortEnumType? lastModifiedOn) =>
      _$this._lastModifiedOn = lastModifiedOn;

  GSortEnumType? _lastModifiedBy;
  GSortEnumType? get lastModifiedBy => _$this._lastModifiedBy;
  set lastModifiedBy(GSortEnumType? lastModifiedBy) =>
      _$this._lastModifiedBy = lastModifiedBy;

  GLocationSortInputBuilder();

  GLocationSortInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _town = $v.town;
      _isPopular = $v.isPopular;
      _country = $v.country?.toBuilder();
      _createdOn = $v.createdOn;
      _createdBy = $v.createdBy;
      _lastModifiedOn = $v.lastModifiedOn;
      _lastModifiedBy = $v.lastModifiedBy;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GLocationSortInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GLocationSortInput;
  }

  @override
  void update(void Function(GLocationSortInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GLocationSortInput build() => _build();

  _$GLocationSortInput _build() {
    _$GLocationSortInput _$result;
    try {
      _$result = _$v ??
          new _$GLocationSortInput._(
              id: id,
              town: town,
              isPopular: isPopular,
              country: _country?.build(),
              createdOn: createdOn,
              createdBy: createdBy,
              lastModifiedOn: lastModifiedOn,
              lastModifiedBy: lastModifiedBy);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'country';
        _country?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GLocationSortInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAPIRequestFilterInput extends GAPIRequestFilterInput {
  @override
  final BuiltList<GAPIRequestFilterInput>? and;
  @override
  final BuiltList<GAPIRequestFilterInput>? or;
  @override
  final GStringOperationFilterInput? id;
  @override
  final GStringOperationFilterInput? iPAddress;
  @override
  final GStringOperationFilterInput? uAString;
  @override
  final GStringOperationFilterInput? languages;
  @override
  final GStringOperationFilterInput? path;
  @override
  final GComparableInt32OperationFilterInput? statusCode;
  @override
  final GComparableDateTimeOperationFilterInput? createdOn;

  factory _$GAPIRequestFilterInput(
          [void Function(GAPIRequestFilterInputBuilder)? updates]) =>
      (new GAPIRequestFilterInputBuilder()..update(updates))._build();

  _$GAPIRequestFilterInput._(
      {this.and,
      this.or,
      this.id,
      this.iPAddress,
      this.uAString,
      this.languages,
      this.path,
      this.statusCode,
      this.createdOn})
      : super._();

  @override
  GAPIRequestFilterInput rebuild(
          void Function(GAPIRequestFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAPIRequestFilterInputBuilder toBuilder() =>
      new GAPIRequestFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAPIRequestFilterInput &&
        and == other.and &&
        or == other.or &&
        id == other.id &&
        iPAddress == other.iPAddress &&
        uAString == other.uAString &&
        languages == other.languages &&
        path == other.path &&
        statusCode == other.statusCode &&
        createdOn == other.createdOn;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, and.hashCode);
    _$hash = $jc(_$hash, or.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, iPAddress.hashCode);
    _$hash = $jc(_$hash, uAString.hashCode);
    _$hash = $jc(_$hash, languages.hashCode);
    _$hash = $jc(_$hash, path.hashCode);
    _$hash = $jc(_$hash, statusCode.hashCode);
    _$hash = $jc(_$hash, createdOn.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAPIRequestFilterInput')
          ..add('and', and)
          ..add('or', or)
          ..add('id', id)
          ..add('iPAddress', iPAddress)
          ..add('uAString', uAString)
          ..add('languages', languages)
          ..add('path', path)
          ..add('statusCode', statusCode)
          ..add('createdOn', createdOn))
        .toString();
  }
}

class GAPIRequestFilterInputBuilder
    implements Builder<GAPIRequestFilterInput, GAPIRequestFilterInputBuilder> {
  _$GAPIRequestFilterInput? _$v;

  ListBuilder<GAPIRequestFilterInput>? _and;
  ListBuilder<GAPIRequestFilterInput> get and =>
      _$this._and ??= new ListBuilder<GAPIRequestFilterInput>();
  set and(ListBuilder<GAPIRequestFilterInput>? and) => _$this._and = and;

  ListBuilder<GAPIRequestFilterInput>? _or;
  ListBuilder<GAPIRequestFilterInput> get or =>
      _$this._or ??= new ListBuilder<GAPIRequestFilterInput>();
  set or(ListBuilder<GAPIRequestFilterInput>? or) => _$this._or = or;

  GStringOperationFilterInputBuilder? _id;
  GStringOperationFilterInputBuilder get id =>
      _$this._id ??= new GStringOperationFilterInputBuilder();
  set id(GStringOperationFilterInputBuilder? id) => _$this._id = id;

  GStringOperationFilterInputBuilder? _iPAddress;
  GStringOperationFilterInputBuilder get iPAddress =>
      _$this._iPAddress ??= new GStringOperationFilterInputBuilder();
  set iPAddress(GStringOperationFilterInputBuilder? iPAddress) =>
      _$this._iPAddress = iPAddress;

  GStringOperationFilterInputBuilder? _uAString;
  GStringOperationFilterInputBuilder get uAString =>
      _$this._uAString ??= new GStringOperationFilterInputBuilder();
  set uAString(GStringOperationFilterInputBuilder? uAString) =>
      _$this._uAString = uAString;

  GStringOperationFilterInputBuilder? _languages;
  GStringOperationFilterInputBuilder get languages =>
      _$this._languages ??= new GStringOperationFilterInputBuilder();
  set languages(GStringOperationFilterInputBuilder? languages) =>
      _$this._languages = languages;

  GStringOperationFilterInputBuilder? _path;
  GStringOperationFilterInputBuilder get path =>
      _$this._path ??= new GStringOperationFilterInputBuilder();
  set path(GStringOperationFilterInputBuilder? path) => _$this._path = path;

  GComparableInt32OperationFilterInputBuilder? _statusCode;
  GComparableInt32OperationFilterInputBuilder get statusCode =>
      _$this._statusCode ??= new GComparableInt32OperationFilterInputBuilder();
  set statusCode(GComparableInt32OperationFilterInputBuilder? statusCode) =>
      _$this._statusCode = statusCode;

  GComparableDateTimeOperationFilterInputBuilder? _createdOn;
  GComparableDateTimeOperationFilterInputBuilder get createdOn =>
      _$this._createdOn ??=
          new GComparableDateTimeOperationFilterInputBuilder();
  set createdOn(GComparableDateTimeOperationFilterInputBuilder? createdOn) =>
      _$this._createdOn = createdOn;

  GAPIRequestFilterInputBuilder();

  GAPIRequestFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _and = $v.and?.toBuilder();
      _or = $v.or?.toBuilder();
      _id = $v.id?.toBuilder();
      _iPAddress = $v.iPAddress?.toBuilder();
      _uAString = $v.uAString?.toBuilder();
      _languages = $v.languages?.toBuilder();
      _path = $v.path?.toBuilder();
      _statusCode = $v.statusCode?.toBuilder();
      _createdOn = $v.createdOn?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAPIRequestFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAPIRequestFilterInput;
  }

  @override
  void update(void Function(GAPIRequestFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAPIRequestFilterInput build() => _build();

  _$GAPIRequestFilterInput _build() {
    _$GAPIRequestFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GAPIRequestFilterInput._(
              and: _and?.build(),
              or: _or?.build(),
              id: _id?.build(),
              iPAddress: _iPAddress?.build(),
              uAString: _uAString?.build(),
              languages: _languages?.build(),
              path: _path?.build(),
              statusCode: _statusCode?.build(),
              createdOn: _createdOn?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'and';
        _and?.build();
        _$failedField = 'or';
        _or?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'iPAddress';
        _iPAddress?.build();
        _$failedField = 'uAString';
        _uAString?.build();
        _$failedField = 'languages';
        _languages?.build();
        _$failedField = 'path';
        _path?.build();
        _$failedField = 'statusCode';
        _statusCode?.build();
        _$failedField = 'createdOn';
        _createdOn?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAPIRequestFilterInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAPIRequestSortInput extends GAPIRequestSortInput {
  @override
  final GSortEnumType? id;
  @override
  final GSortEnumType? iPAddress;
  @override
  final GSortEnumType? uAString;
  @override
  final GSortEnumType? languages;
  @override
  final GSortEnumType? path;
  @override
  final GSortEnumType? statusCode;
  @override
  final GSortEnumType? createdOn;

  factory _$GAPIRequestSortInput(
          [void Function(GAPIRequestSortInputBuilder)? updates]) =>
      (new GAPIRequestSortInputBuilder()..update(updates))._build();

  _$GAPIRequestSortInput._(
      {this.id,
      this.iPAddress,
      this.uAString,
      this.languages,
      this.path,
      this.statusCode,
      this.createdOn})
      : super._();

  @override
  GAPIRequestSortInput rebuild(
          void Function(GAPIRequestSortInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAPIRequestSortInputBuilder toBuilder() =>
      new GAPIRequestSortInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAPIRequestSortInput &&
        id == other.id &&
        iPAddress == other.iPAddress &&
        uAString == other.uAString &&
        languages == other.languages &&
        path == other.path &&
        statusCode == other.statusCode &&
        createdOn == other.createdOn;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, iPAddress.hashCode);
    _$hash = $jc(_$hash, uAString.hashCode);
    _$hash = $jc(_$hash, languages.hashCode);
    _$hash = $jc(_$hash, path.hashCode);
    _$hash = $jc(_$hash, statusCode.hashCode);
    _$hash = $jc(_$hash, createdOn.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAPIRequestSortInput')
          ..add('id', id)
          ..add('iPAddress', iPAddress)
          ..add('uAString', uAString)
          ..add('languages', languages)
          ..add('path', path)
          ..add('statusCode', statusCode)
          ..add('createdOn', createdOn))
        .toString();
  }
}

class GAPIRequestSortInputBuilder
    implements Builder<GAPIRequestSortInput, GAPIRequestSortInputBuilder> {
  _$GAPIRequestSortInput? _$v;

  GSortEnumType? _id;
  GSortEnumType? get id => _$this._id;
  set id(GSortEnumType? id) => _$this._id = id;

  GSortEnumType? _iPAddress;
  GSortEnumType? get iPAddress => _$this._iPAddress;
  set iPAddress(GSortEnumType? iPAddress) => _$this._iPAddress = iPAddress;

  GSortEnumType? _uAString;
  GSortEnumType? get uAString => _$this._uAString;
  set uAString(GSortEnumType? uAString) => _$this._uAString = uAString;

  GSortEnumType? _languages;
  GSortEnumType? get languages => _$this._languages;
  set languages(GSortEnumType? languages) => _$this._languages = languages;

  GSortEnumType? _path;
  GSortEnumType? get path => _$this._path;
  set path(GSortEnumType? path) => _$this._path = path;

  GSortEnumType? _statusCode;
  GSortEnumType? get statusCode => _$this._statusCode;
  set statusCode(GSortEnumType? statusCode) => _$this._statusCode = statusCode;

  GSortEnumType? _createdOn;
  GSortEnumType? get createdOn => _$this._createdOn;
  set createdOn(GSortEnumType? createdOn) => _$this._createdOn = createdOn;

  GAPIRequestSortInputBuilder();

  GAPIRequestSortInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _iPAddress = $v.iPAddress;
      _uAString = $v.uAString;
      _languages = $v.languages;
      _path = $v.path;
      _statusCode = $v.statusCode;
      _createdOn = $v.createdOn;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAPIRequestSortInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAPIRequestSortInput;
  }

  @override
  void update(void Function(GAPIRequestSortInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAPIRequestSortInput build() => _build();

  _$GAPIRequestSortInput _build() {
    final _$result = _$v ??
        new _$GAPIRequestSortInput._(
            id: id,
            iPAddress: iPAddress,
            uAString: uAString,
            languages: languages,
            path: path,
            statusCode: statusCode,
            createdOn: createdOn);
    replace(_$result);
    return _$result;
  }
}

class _$GRideFilterInput extends GRideFilterInput {
  @override
  final BuiltList<GRideFilterInput>? and;
  @override
  final BuiltList<GRideFilterInput>? or;
  @override
  final GComparableInt32OperationFilterInput? id;
  @override
  final GStringOperationFilterInput? name;
  @override
  final GStringOperationFilterInput? placeofStart;
  @override
  final GStringOperationFilterInput? destination;
  @override
  final GStringOperationFilterInput? driverId;
  @override
  final GComparableSingleOperationFilterInput? estimatePrice;
  @override
  final GStringOperationFilterInput? estimatedDistance;
  @override
  final GComparableInt32OperationFilterInput? numberOfPeople;
  @override
  final GComparableInt32OperationFilterInput? maximumCarryWeight;
  @override
  final GComparableDateTimeOperationFilterInput? departureDate;
  @override
  final GStringOperationFilterInput? duration;
  @override
  final GStringOperationFilterInput? status;
  @override
  final GSeatFilterInput? seat;
  @override
  final GComparableInt32OperationFilterInput? seatCount;
  @override
  final GComparableInt32OperationFilterInput? seatCapacity;
  @override
  final GComparableSingleOperationFilterInput? maxTotalPay;
  @override
  final GComparableSingleOperationFilterInput? totalPay;
  @override
  final GComparableDecimalOperationFilterInput? amountCashedOut;
  @override
  final GComparableNullableOfTimeSpanOperationFilterInput? departureTime;
  @override
  final GComparableDateTimeOperationFilterInput? arrivalTime;
  @override
  final GStringOperationFilterInput? allowedBehDesc;
  @override
  final GStringOperationFilterInput? exactPickupLocation;
  @override
  final GComparableNullableOfInt32OperationFilterInput? routeIndex;
  @override
  final GStringOperationFilterInput? mpesaReceiptNumber;
  @override
  final GComparableDateTimeOperationFilterInput? transactionDate;
  @override
  final GStringOperationFilterInput? merchantRequestId;
  @override
  final GStringOperationFilterInput? checkoutRequestId;
  @override
  final GComparableSingleOperationFilterInput? compensatedFromPassengerCancel;
  @override
  final GComparableNullableOfDateTimeOperationFilterInput? driverPaymentTime;
  @override
  final GStringOperationFilterInput? exactDropOffLocation;
  @override
  final GBooleanOperationFilterInput? isRecurring;
  @override
  final GStringOperationFilterInput? carId;
  @override
  final GCarFilterInput? car;
  @override
  final GListFilterInputTypeOfUserRidesFilterInput? users;
  @override
  final GListFilterInputTypeOfRideTransactionFilterInput? transactions;

  factory _$GRideFilterInput(
          [void Function(GRideFilterInputBuilder)? updates]) =>
      (new GRideFilterInputBuilder()..update(updates))._build();

  _$GRideFilterInput._(
      {this.and,
      this.or,
      this.id,
      this.name,
      this.placeofStart,
      this.destination,
      this.driverId,
      this.estimatePrice,
      this.estimatedDistance,
      this.numberOfPeople,
      this.maximumCarryWeight,
      this.departureDate,
      this.duration,
      this.status,
      this.seat,
      this.seatCount,
      this.seatCapacity,
      this.maxTotalPay,
      this.totalPay,
      this.amountCashedOut,
      this.departureTime,
      this.arrivalTime,
      this.allowedBehDesc,
      this.exactPickupLocation,
      this.routeIndex,
      this.mpesaReceiptNumber,
      this.transactionDate,
      this.merchantRequestId,
      this.checkoutRequestId,
      this.compensatedFromPassengerCancel,
      this.driverPaymentTime,
      this.exactDropOffLocation,
      this.isRecurring,
      this.carId,
      this.car,
      this.users,
      this.transactions})
      : super._();

  @override
  GRideFilterInput rebuild(void Function(GRideFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GRideFilterInputBuilder toBuilder() =>
      new GRideFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GRideFilterInput &&
        and == other.and &&
        or == other.or &&
        id == other.id &&
        name == other.name &&
        placeofStart == other.placeofStart &&
        destination == other.destination &&
        driverId == other.driverId &&
        estimatePrice == other.estimatePrice &&
        estimatedDistance == other.estimatedDistance &&
        numberOfPeople == other.numberOfPeople &&
        maximumCarryWeight == other.maximumCarryWeight &&
        departureDate == other.departureDate &&
        duration == other.duration &&
        status == other.status &&
        seat == other.seat &&
        seatCount == other.seatCount &&
        seatCapacity == other.seatCapacity &&
        maxTotalPay == other.maxTotalPay &&
        totalPay == other.totalPay &&
        amountCashedOut == other.amountCashedOut &&
        departureTime == other.departureTime &&
        arrivalTime == other.arrivalTime &&
        allowedBehDesc == other.allowedBehDesc &&
        exactPickupLocation == other.exactPickupLocation &&
        routeIndex == other.routeIndex &&
        mpesaReceiptNumber == other.mpesaReceiptNumber &&
        transactionDate == other.transactionDate &&
        merchantRequestId == other.merchantRequestId &&
        checkoutRequestId == other.checkoutRequestId &&
        compensatedFromPassengerCancel ==
            other.compensatedFromPassengerCancel &&
        driverPaymentTime == other.driverPaymentTime &&
        exactDropOffLocation == other.exactDropOffLocation &&
        isRecurring == other.isRecurring &&
        carId == other.carId &&
        car == other.car &&
        users == other.users &&
        transactions == other.transactions;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, and.hashCode);
    _$hash = $jc(_$hash, or.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, name.hashCode);
    _$hash = $jc(_$hash, placeofStart.hashCode);
    _$hash = $jc(_$hash, destination.hashCode);
    _$hash = $jc(_$hash, driverId.hashCode);
    _$hash = $jc(_$hash, estimatePrice.hashCode);
    _$hash = $jc(_$hash, estimatedDistance.hashCode);
    _$hash = $jc(_$hash, numberOfPeople.hashCode);
    _$hash = $jc(_$hash, maximumCarryWeight.hashCode);
    _$hash = $jc(_$hash, departureDate.hashCode);
    _$hash = $jc(_$hash, duration.hashCode);
    _$hash = $jc(_$hash, status.hashCode);
    _$hash = $jc(_$hash, seat.hashCode);
    _$hash = $jc(_$hash, seatCount.hashCode);
    _$hash = $jc(_$hash, seatCapacity.hashCode);
    _$hash = $jc(_$hash, maxTotalPay.hashCode);
    _$hash = $jc(_$hash, totalPay.hashCode);
    _$hash = $jc(_$hash, amountCashedOut.hashCode);
    _$hash = $jc(_$hash, departureTime.hashCode);
    _$hash = $jc(_$hash, arrivalTime.hashCode);
    _$hash = $jc(_$hash, allowedBehDesc.hashCode);
    _$hash = $jc(_$hash, exactPickupLocation.hashCode);
    _$hash = $jc(_$hash, routeIndex.hashCode);
    _$hash = $jc(_$hash, mpesaReceiptNumber.hashCode);
    _$hash = $jc(_$hash, transactionDate.hashCode);
    _$hash = $jc(_$hash, merchantRequestId.hashCode);
    _$hash = $jc(_$hash, checkoutRequestId.hashCode);
    _$hash = $jc(_$hash, compensatedFromPassengerCancel.hashCode);
    _$hash = $jc(_$hash, driverPaymentTime.hashCode);
    _$hash = $jc(_$hash, exactDropOffLocation.hashCode);
    _$hash = $jc(_$hash, isRecurring.hashCode);
    _$hash = $jc(_$hash, carId.hashCode);
    _$hash = $jc(_$hash, car.hashCode);
    _$hash = $jc(_$hash, users.hashCode);
    _$hash = $jc(_$hash, transactions.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GRideFilterInput')
          ..add('and', and)
          ..add('or', or)
          ..add('id', id)
          ..add('name', name)
          ..add('placeofStart', placeofStart)
          ..add('destination', destination)
          ..add('driverId', driverId)
          ..add('estimatePrice', estimatePrice)
          ..add('estimatedDistance', estimatedDistance)
          ..add('numberOfPeople', numberOfPeople)
          ..add('maximumCarryWeight', maximumCarryWeight)
          ..add('departureDate', departureDate)
          ..add('duration', duration)
          ..add('status', status)
          ..add('seat', seat)
          ..add('seatCount', seatCount)
          ..add('seatCapacity', seatCapacity)
          ..add('maxTotalPay', maxTotalPay)
          ..add('totalPay', totalPay)
          ..add('amountCashedOut', amountCashedOut)
          ..add('departureTime', departureTime)
          ..add('arrivalTime', arrivalTime)
          ..add('allowedBehDesc', allowedBehDesc)
          ..add('exactPickupLocation', exactPickupLocation)
          ..add('routeIndex', routeIndex)
          ..add('mpesaReceiptNumber', mpesaReceiptNumber)
          ..add('transactionDate', transactionDate)
          ..add('merchantRequestId', merchantRequestId)
          ..add('checkoutRequestId', checkoutRequestId)
          ..add(
              'compensatedFromPassengerCancel', compensatedFromPassengerCancel)
          ..add('driverPaymentTime', driverPaymentTime)
          ..add('exactDropOffLocation', exactDropOffLocation)
          ..add('isRecurring', isRecurring)
          ..add('carId', carId)
          ..add('car', car)
          ..add('users', users)
          ..add('transactions', transactions))
        .toString();
  }
}

class GRideFilterInputBuilder
    implements Builder<GRideFilterInput, GRideFilterInputBuilder> {
  _$GRideFilterInput? _$v;

  ListBuilder<GRideFilterInput>? _and;
  ListBuilder<GRideFilterInput> get and =>
      _$this._and ??= new ListBuilder<GRideFilterInput>();
  set and(ListBuilder<GRideFilterInput>? and) => _$this._and = and;

  ListBuilder<GRideFilterInput>? _or;
  ListBuilder<GRideFilterInput> get or =>
      _$this._or ??= new ListBuilder<GRideFilterInput>();
  set or(ListBuilder<GRideFilterInput>? or) => _$this._or = or;

  GComparableInt32OperationFilterInputBuilder? _id;
  GComparableInt32OperationFilterInputBuilder get id =>
      _$this._id ??= new GComparableInt32OperationFilterInputBuilder();
  set id(GComparableInt32OperationFilterInputBuilder? id) => _$this._id = id;

  GStringOperationFilterInputBuilder? _name;
  GStringOperationFilterInputBuilder get name =>
      _$this._name ??= new GStringOperationFilterInputBuilder();
  set name(GStringOperationFilterInputBuilder? name) => _$this._name = name;

  GStringOperationFilterInputBuilder? _placeofStart;
  GStringOperationFilterInputBuilder get placeofStart =>
      _$this._placeofStart ??= new GStringOperationFilterInputBuilder();
  set placeofStart(GStringOperationFilterInputBuilder? placeofStart) =>
      _$this._placeofStart = placeofStart;

  GStringOperationFilterInputBuilder? _destination;
  GStringOperationFilterInputBuilder get destination =>
      _$this._destination ??= new GStringOperationFilterInputBuilder();
  set destination(GStringOperationFilterInputBuilder? destination) =>
      _$this._destination = destination;

  GStringOperationFilterInputBuilder? _driverId;
  GStringOperationFilterInputBuilder get driverId =>
      _$this._driverId ??= new GStringOperationFilterInputBuilder();
  set driverId(GStringOperationFilterInputBuilder? driverId) =>
      _$this._driverId = driverId;

  GComparableSingleOperationFilterInputBuilder? _estimatePrice;
  GComparableSingleOperationFilterInputBuilder get estimatePrice =>
      _$this._estimatePrice ??=
          new GComparableSingleOperationFilterInputBuilder();
  set estimatePrice(
          GComparableSingleOperationFilterInputBuilder? estimatePrice) =>
      _$this._estimatePrice = estimatePrice;

  GStringOperationFilterInputBuilder? _estimatedDistance;
  GStringOperationFilterInputBuilder get estimatedDistance =>
      _$this._estimatedDistance ??= new GStringOperationFilterInputBuilder();
  set estimatedDistance(
          GStringOperationFilterInputBuilder? estimatedDistance) =>
      _$this._estimatedDistance = estimatedDistance;

  GComparableInt32OperationFilterInputBuilder? _numberOfPeople;
  GComparableInt32OperationFilterInputBuilder get numberOfPeople =>
      _$this._numberOfPeople ??=
          new GComparableInt32OperationFilterInputBuilder();
  set numberOfPeople(
          GComparableInt32OperationFilterInputBuilder? numberOfPeople) =>
      _$this._numberOfPeople = numberOfPeople;

  GComparableInt32OperationFilterInputBuilder? _maximumCarryWeight;
  GComparableInt32OperationFilterInputBuilder get maximumCarryWeight =>
      _$this._maximumCarryWeight ??=
          new GComparableInt32OperationFilterInputBuilder();
  set maximumCarryWeight(
          GComparableInt32OperationFilterInputBuilder? maximumCarryWeight) =>
      _$this._maximumCarryWeight = maximumCarryWeight;

  GComparableDateTimeOperationFilterInputBuilder? _departureDate;
  GComparableDateTimeOperationFilterInputBuilder get departureDate =>
      _$this._departureDate ??=
          new GComparableDateTimeOperationFilterInputBuilder();
  set departureDate(
          GComparableDateTimeOperationFilterInputBuilder? departureDate) =>
      _$this._departureDate = departureDate;

  GStringOperationFilterInputBuilder? _duration;
  GStringOperationFilterInputBuilder get duration =>
      _$this._duration ??= new GStringOperationFilterInputBuilder();
  set duration(GStringOperationFilterInputBuilder? duration) =>
      _$this._duration = duration;

  GStringOperationFilterInputBuilder? _status;
  GStringOperationFilterInputBuilder get status =>
      _$this._status ??= new GStringOperationFilterInputBuilder();
  set status(GStringOperationFilterInputBuilder? status) =>
      _$this._status = status;

  GSeatFilterInputBuilder? _seat;
  GSeatFilterInputBuilder get seat =>
      _$this._seat ??= new GSeatFilterInputBuilder();
  set seat(GSeatFilterInputBuilder? seat) => _$this._seat = seat;

  GComparableInt32OperationFilterInputBuilder? _seatCount;
  GComparableInt32OperationFilterInputBuilder get seatCount =>
      _$this._seatCount ??= new GComparableInt32OperationFilterInputBuilder();
  set seatCount(GComparableInt32OperationFilterInputBuilder? seatCount) =>
      _$this._seatCount = seatCount;

  GComparableInt32OperationFilterInputBuilder? _seatCapacity;
  GComparableInt32OperationFilterInputBuilder get seatCapacity =>
      _$this._seatCapacity ??=
          new GComparableInt32OperationFilterInputBuilder();
  set seatCapacity(GComparableInt32OperationFilterInputBuilder? seatCapacity) =>
      _$this._seatCapacity = seatCapacity;

  GComparableSingleOperationFilterInputBuilder? _maxTotalPay;
  GComparableSingleOperationFilterInputBuilder get maxTotalPay =>
      _$this._maxTotalPay ??=
          new GComparableSingleOperationFilterInputBuilder();
  set maxTotalPay(GComparableSingleOperationFilterInputBuilder? maxTotalPay) =>
      _$this._maxTotalPay = maxTotalPay;

  GComparableSingleOperationFilterInputBuilder? _totalPay;
  GComparableSingleOperationFilterInputBuilder get totalPay =>
      _$this._totalPay ??= new GComparableSingleOperationFilterInputBuilder();
  set totalPay(GComparableSingleOperationFilterInputBuilder? totalPay) =>
      _$this._totalPay = totalPay;

  GComparableDecimalOperationFilterInputBuilder? _amountCashedOut;
  GComparableDecimalOperationFilterInputBuilder get amountCashedOut =>
      _$this._amountCashedOut ??=
          new GComparableDecimalOperationFilterInputBuilder();
  set amountCashedOut(
          GComparableDecimalOperationFilterInputBuilder? amountCashedOut) =>
      _$this._amountCashedOut = amountCashedOut;

  GComparableNullableOfTimeSpanOperationFilterInputBuilder? _departureTime;
  GComparableNullableOfTimeSpanOperationFilterInputBuilder get departureTime =>
      _$this._departureTime ??=
          new GComparableNullableOfTimeSpanOperationFilterInputBuilder();
  set departureTime(
          GComparableNullableOfTimeSpanOperationFilterInputBuilder?
              departureTime) =>
      _$this._departureTime = departureTime;

  GComparableDateTimeOperationFilterInputBuilder? _arrivalTime;
  GComparableDateTimeOperationFilterInputBuilder get arrivalTime =>
      _$this._arrivalTime ??=
          new GComparableDateTimeOperationFilterInputBuilder();
  set arrivalTime(
          GComparableDateTimeOperationFilterInputBuilder? arrivalTime) =>
      _$this._arrivalTime = arrivalTime;

  GStringOperationFilterInputBuilder? _allowedBehDesc;
  GStringOperationFilterInputBuilder get allowedBehDesc =>
      _$this._allowedBehDesc ??= new GStringOperationFilterInputBuilder();
  set allowedBehDesc(GStringOperationFilterInputBuilder? allowedBehDesc) =>
      _$this._allowedBehDesc = allowedBehDesc;

  GStringOperationFilterInputBuilder? _exactPickupLocation;
  GStringOperationFilterInputBuilder get exactPickupLocation =>
      _$this._exactPickupLocation ??= new GStringOperationFilterInputBuilder();
  set exactPickupLocation(
          GStringOperationFilterInputBuilder? exactPickupLocation) =>
      _$this._exactPickupLocation = exactPickupLocation;

  GComparableNullableOfInt32OperationFilterInputBuilder? _routeIndex;
  GComparableNullableOfInt32OperationFilterInputBuilder get routeIndex =>
      _$this._routeIndex ??=
          new GComparableNullableOfInt32OperationFilterInputBuilder();
  set routeIndex(
          GComparableNullableOfInt32OperationFilterInputBuilder? routeIndex) =>
      _$this._routeIndex = routeIndex;

  GStringOperationFilterInputBuilder? _mpesaReceiptNumber;
  GStringOperationFilterInputBuilder get mpesaReceiptNumber =>
      _$this._mpesaReceiptNumber ??= new GStringOperationFilterInputBuilder();
  set mpesaReceiptNumber(
          GStringOperationFilterInputBuilder? mpesaReceiptNumber) =>
      _$this._mpesaReceiptNumber = mpesaReceiptNumber;

  GComparableDateTimeOperationFilterInputBuilder? _transactionDate;
  GComparableDateTimeOperationFilterInputBuilder get transactionDate =>
      _$this._transactionDate ??=
          new GComparableDateTimeOperationFilterInputBuilder();
  set transactionDate(
          GComparableDateTimeOperationFilterInputBuilder? transactionDate) =>
      _$this._transactionDate = transactionDate;

  GStringOperationFilterInputBuilder? _merchantRequestId;
  GStringOperationFilterInputBuilder get merchantRequestId =>
      _$this._merchantRequestId ??= new GStringOperationFilterInputBuilder();
  set merchantRequestId(
          GStringOperationFilterInputBuilder? merchantRequestId) =>
      _$this._merchantRequestId = merchantRequestId;

  GStringOperationFilterInputBuilder? _checkoutRequestId;
  GStringOperationFilterInputBuilder get checkoutRequestId =>
      _$this._checkoutRequestId ??= new GStringOperationFilterInputBuilder();
  set checkoutRequestId(
          GStringOperationFilterInputBuilder? checkoutRequestId) =>
      _$this._checkoutRequestId = checkoutRequestId;

  GComparableSingleOperationFilterInputBuilder? _compensatedFromPassengerCancel;
  GComparableSingleOperationFilterInputBuilder
      get compensatedFromPassengerCancel =>
          _$this._compensatedFromPassengerCancel ??=
              new GComparableSingleOperationFilterInputBuilder();
  set compensatedFromPassengerCancel(
          GComparableSingleOperationFilterInputBuilder?
              compensatedFromPassengerCancel) =>
      _$this._compensatedFromPassengerCancel = compensatedFromPassengerCancel;

  GComparableNullableOfDateTimeOperationFilterInputBuilder? _driverPaymentTime;
  GComparableNullableOfDateTimeOperationFilterInputBuilder
      get driverPaymentTime => _$this._driverPaymentTime ??=
          new GComparableNullableOfDateTimeOperationFilterInputBuilder();
  set driverPaymentTime(
          GComparableNullableOfDateTimeOperationFilterInputBuilder?
              driverPaymentTime) =>
      _$this._driverPaymentTime = driverPaymentTime;

  GStringOperationFilterInputBuilder? _exactDropOffLocation;
  GStringOperationFilterInputBuilder get exactDropOffLocation =>
      _$this._exactDropOffLocation ??= new GStringOperationFilterInputBuilder();
  set exactDropOffLocation(
          GStringOperationFilterInputBuilder? exactDropOffLocation) =>
      _$this._exactDropOffLocation = exactDropOffLocation;

  GBooleanOperationFilterInputBuilder? _isRecurring;
  GBooleanOperationFilterInputBuilder get isRecurring =>
      _$this._isRecurring ??= new GBooleanOperationFilterInputBuilder();
  set isRecurring(GBooleanOperationFilterInputBuilder? isRecurring) =>
      _$this._isRecurring = isRecurring;

  GStringOperationFilterInputBuilder? _carId;
  GStringOperationFilterInputBuilder get carId =>
      _$this._carId ??= new GStringOperationFilterInputBuilder();
  set carId(GStringOperationFilterInputBuilder? carId) => _$this._carId = carId;

  GCarFilterInputBuilder? _car;
  GCarFilterInputBuilder get car =>
      _$this._car ??= new GCarFilterInputBuilder();
  set car(GCarFilterInputBuilder? car) => _$this._car = car;

  GListFilterInputTypeOfUserRidesFilterInputBuilder? _users;
  GListFilterInputTypeOfUserRidesFilterInputBuilder get users =>
      _$this._users ??= new GListFilterInputTypeOfUserRidesFilterInputBuilder();
  set users(GListFilterInputTypeOfUserRidesFilterInputBuilder? users) =>
      _$this._users = users;

  GListFilterInputTypeOfRideTransactionFilterInputBuilder? _transactions;
  GListFilterInputTypeOfRideTransactionFilterInputBuilder get transactions =>
      _$this._transactions ??=
          new GListFilterInputTypeOfRideTransactionFilterInputBuilder();
  set transactions(
          GListFilterInputTypeOfRideTransactionFilterInputBuilder?
              transactions) =>
      _$this._transactions = transactions;

  GRideFilterInputBuilder();

  GRideFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _and = $v.and?.toBuilder();
      _or = $v.or?.toBuilder();
      _id = $v.id?.toBuilder();
      _name = $v.name?.toBuilder();
      _placeofStart = $v.placeofStart?.toBuilder();
      _destination = $v.destination?.toBuilder();
      _driverId = $v.driverId?.toBuilder();
      _estimatePrice = $v.estimatePrice?.toBuilder();
      _estimatedDistance = $v.estimatedDistance?.toBuilder();
      _numberOfPeople = $v.numberOfPeople?.toBuilder();
      _maximumCarryWeight = $v.maximumCarryWeight?.toBuilder();
      _departureDate = $v.departureDate?.toBuilder();
      _duration = $v.duration?.toBuilder();
      _status = $v.status?.toBuilder();
      _seat = $v.seat?.toBuilder();
      _seatCount = $v.seatCount?.toBuilder();
      _seatCapacity = $v.seatCapacity?.toBuilder();
      _maxTotalPay = $v.maxTotalPay?.toBuilder();
      _totalPay = $v.totalPay?.toBuilder();
      _amountCashedOut = $v.amountCashedOut?.toBuilder();
      _departureTime = $v.departureTime?.toBuilder();
      _arrivalTime = $v.arrivalTime?.toBuilder();
      _allowedBehDesc = $v.allowedBehDesc?.toBuilder();
      _exactPickupLocation = $v.exactPickupLocation?.toBuilder();
      _routeIndex = $v.routeIndex?.toBuilder();
      _mpesaReceiptNumber = $v.mpesaReceiptNumber?.toBuilder();
      _transactionDate = $v.transactionDate?.toBuilder();
      _merchantRequestId = $v.merchantRequestId?.toBuilder();
      _checkoutRequestId = $v.checkoutRequestId?.toBuilder();
      _compensatedFromPassengerCancel =
          $v.compensatedFromPassengerCancel?.toBuilder();
      _driverPaymentTime = $v.driverPaymentTime?.toBuilder();
      _exactDropOffLocation = $v.exactDropOffLocation?.toBuilder();
      _isRecurring = $v.isRecurring?.toBuilder();
      _carId = $v.carId?.toBuilder();
      _car = $v.car?.toBuilder();
      _users = $v.users?.toBuilder();
      _transactions = $v.transactions?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GRideFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GRideFilterInput;
  }

  @override
  void update(void Function(GRideFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GRideFilterInput build() => _build();

  _$GRideFilterInput _build() {
    _$GRideFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GRideFilterInput._(
              and: _and?.build(),
              or: _or?.build(),
              id: _id?.build(),
              name: _name?.build(),
              placeofStart: _placeofStart?.build(),
              destination: _destination?.build(),
              driverId: _driverId?.build(),
              estimatePrice: _estimatePrice?.build(),
              estimatedDistance: _estimatedDistance?.build(),
              numberOfPeople: _numberOfPeople?.build(),
              maximumCarryWeight: _maximumCarryWeight?.build(),
              departureDate: _departureDate?.build(),
              duration: _duration?.build(),
              status: _status?.build(),
              seat: _seat?.build(),
              seatCount: _seatCount?.build(),
              seatCapacity: _seatCapacity?.build(),
              maxTotalPay: _maxTotalPay?.build(),
              totalPay: _totalPay?.build(),
              amountCashedOut: _amountCashedOut?.build(),
              departureTime: _departureTime?.build(),
              arrivalTime: _arrivalTime?.build(),
              allowedBehDesc: _allowedBehDesc?.build(),
              exactPickupLocation: _exactPickupLocation?.build(),
              routeIndex: _routeIndex?.build(),
              mpesaReceiptNumber: _mpesaReceiptNumber?.build(),
              transactionDate: _transactionDate?.build(),
              merchantRequestId: _merchantRequestId?.build(),
              checkoutRequestId: _checkoutRequestId?.build(),
              compensatedFromPassengerCancel:
                  _compensatedFromPassengerCancel?.build(),
              driverPaymentTime: _driverPaymentTime?.build(),
              exactDropOffLocation: _exactDropOffLocation?.build(),
              isRecurring: _isRecurring?.build(),
              carId: _carId?.build(),
              car: _car?.build(),
              users: _users?.build(),
              transactions: _transactions?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'and';
        _and?.build();
        _$failedField = 'or';
        _or?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'name';
        _name?.build();
        _$failedField = 'placeofStart';
        _placeofStart?.build();
        _$failedField = 'destination';
        _destination?.build();
        _$failedField = 'driverId';
        _driverId?.build();
        _$failedField = 'estimatePrice';
        _estimatePrice?.build();
        _$failedField = 'estimatedDistance';
        _estimatedDistance?.build();
        _$failedField = 'numberOfPeople';
        _numberOfPeople?.build();
        _$failedField = 'maximumCarryWeight';
        _maximumCarryWeight?.build();
        _$failedField = 'departureDate';
        _departureDate?.build();
        _$failedField = 'duration';
        _duration?.build();
        _$failedField = 'status';
        _status?.build();
        _$failedField = 'seat';
        _seat?.build();
        _$failedField = 'seatCount';
        _seatCount?.build();
        _$failedField = 'seatCapacity';
        _seatCapacity?.build();
        _$failedField = 'maxTotalPay';
        _maxTotalPay?.build();
        _$failedField = 'totalPay';
        _totalPay?.build();
        _$failedField = 'amountCashedOut';
        _amountCashedOut?.build();
        _$failedField = 'departureTime';
        _departureTime?.build();
        _$failedField = 'arrivalTime';
        _arrivalTime?.build();
        _$failedField = 'allowedBehDesc';
        _allowedBehDesc?.build();
        _$failedField = 'exactPickupLocation';
        _exactPickupLocation?.build();
        _$failedField = 'routeIndex';
        _routeIndex?.build();
        _$failedField = 'mpesaReceiptNumber';
        _mpesaReceiptNumber?.build();
        _$failedField = 'transactionDate';
        _transactionDate?.build();
        _$failedField = 'merchantRequestId';
        _merchantRequestId?.build();
        _$failedField = 'checkoutRequestId';
        _checkoutRequestId?.build();
        _$failedField = 'compensatedFromPassengerCancel';
        _compensatedFromPassengerCancel?.build();
        _$failedField = 'driverPaymentTime';
        _driverPaymentTime?.build();
        _$failedField = 'exactDropOffLocation';
        _exactDropOffLocation?.build();
        _$failedField = 'isRecurring';
        _isRecurring?.build();
        _$failedField = 'carId';
        _carId?.build();
        _$failedField = 'car';
        _car?.build();
        _$failedField = 'users';
        _users?.build();
        _$failedField = 'transactions';
        _transactions?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GRideFilterInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GRideSortInput extends GRideSortInput {
  @override
  final GSortEnumType? id;
  @override
  final GSortEnumType? name;
  @override
  final GSortEnumType? placeofStart;
  @override
  final GSortEnumType? destination;
  @override
  final GSortEnumType? driverId;
  @override
  final GSortEnumType? estimatePrice;
  @override
  final GSortEnumType? estimatedDistance;
  @override
  final GSortEnumType? numberOfPeople;
  @override
  final GSortEnumType? maximumCarryWeight;
  @override
  final GSortEnumType? departureDate;
  @override
  final GSortEnumType? duration;
  @override
  final GSortEnumType? status;
  @override
  final GSeatSortInput? seat;
  @override
  final GSortEnumType? seatCount;
  @override
  final GSortEnumType? seatCapacity;
  @override
  final GSortEnumType? maxTotalPay;
  @override
  final GSortEnumType? totalPay;
  @override
  final GSortEnumType? amountCashedOut;
  @override
  final GSortEnumType? departureTime;
  @override
  final GSortEnumType? arrivalTime;
  @override
  final GSortEnumType? allowedBehDesc;
  @override
  final GSortEnumType? exactPickupLocation;
  @override
  final GSortEnumType? routeIndex;
  @override
  final GSortEnumType? mpesaReceiptNumber;
  @override
  final GSortEnumType? transactionDate;
  @override
  final GSortEnumType? merchantRequestId;
  @override
  final GSortEnumType? checkoutRequestId;
  @override
  final GSortEnumType? compensatedFromPassengerCancel;
  @override
  final GSortEnumType? driverPaymentTime;
  @override
  final GSortEnumType? exactDropOffLocation;
  @override
  final GSortEnumType? isRecurring;
  @override
  final GSortEnumType? carId;
  @override
  final GCarSortInput? car;

  factory _$GRideSortInput([void Function(GRideSortInputBuilder)? updates]) =>
      (new GRideSortInputBuilder()..update(updates))._build();

  _$GRideSortInput._(
      {this.id,
      this.name,
      this.placeofStart,
      this.destination,
      this.driverId,
      this.estimatePrice,
      this.estimatedDistance,
      this.numberOfPeople,
      this.maximumCarryWeight,
      this.departureDate,
      this.duration,
      this.status,
      this.seat,
      this.seatCount,
      this.seatCapacity,
      this.maxTotalPay,
      this.totalPay,
      this.amountCashedOut,
      this.departureTime,
      this.arrivalTime,
      this.allowedBehDesc,
      this.exactPickupLocation,
      this.routeIndex,
      this.mpesaReceiptNumber,
      this.transactionDate,
      this.merchantRequestId,
      this.checkoutRequestId,
      this.compensatedFromPassengerCancel,
      this.driverPaymentTime,
      this.exactDropOffLocation,
      this.isRecurring,
      this.carId,
      this.car})
      : super._();

  @override
  GRideSortInput rebuild(void Function(GRideSortInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GRideSortInputBuilder toBuilder() =>
      new GRideSortInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GRideSortInput &&
        id == other.id &&
        name == other.name &&
        placeofStart == other.placeofStart &&
        destination == other.destination &&
        driverId == other.driverId &&
        estimatePrice == other.estimatePrice &&
        estimatedDistance == other.estimatedDistance &&
        numberOfPeople == other.numberOfPeople &&
        maximumCarryWeight == other.maximumCarryWeight &&
        departureDate == other.departureDate &&
        duration == other.duration &&
        status == other.status &&
        seat == other.seat &&
        seatCount == other.seatCount &&
        seatCapacity == other.seatCapacity &&
        maxTotalPay == other.maxTotalPay &&
        totalPay == other.totalPay &&
        amountCashedOut == other.amountCashedOut &&
        departureTime == other.departureTime &&
        arrivalTime == other.arrivalTime &&
        allowedBehDesc == other.allowedBehDesc &&
        exactPickupLocation == other.exactPickupLocation &&
        routeIndex == other.routeIndex &&
        mpesaReceiptNumber == other.mpesaReceiptNumber &&
        transactionDate == other.transactionDate &&
        merchantRequestId == other.merchantRequestId &&
        checkoutRequestId == other.checkoutRequestId &&
        compensatedFromPassengerCancel ==
            other.compensatedFromPassengerCancel &&
        driverPaymentTime == other.driverPaymentTime &&
        exactDropOffLocation == other.exactDropOffLocation &&
        isRecurring == other.isRecurring &&
        carId == other.carId &&
        car == other.car;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, name.hashCode);
    _$hash = $jc(_$hash, placeofStart.hashCode);
    _$hash = $jc(_$hash, destination.hashCode);
    _$hash = $jc(_$hash, driverId.hashCode);
    _$hash = $jc(_$hash, estimatePrice.hashCode);
    _$hash = $jc(_$hash, estimatedDistance.hashCode);
    _$hash = $jc(_$hash, numberOfPeople.hashCode);
    _$hash = $jc(_$hash, maximumCarryWeight.hashCode);
    _$hash = $jc(_$hash, departureDate.hashCode);
    _$hash = $jc(_$hash, duration.hashCode);
    _$hash = $jc(_$hash, status.hashCode);
    _$hash = $jc(_$hash, seat.hashCode);
    _$hash = $jc(_$hash, seatCount.hashCode);
    _$hash = $jc(_$hash, seatCapacity.hashCode);
    _$hash = $jc(_$hash, maxTotalPay.hashCode);
    _$hash = $jc(_$hash, totalPay.hashCode);
    _$hash = $jc(_$hash, amountCashedOut.hashCode);
    _$hash = $jc(_$hash, departureTime.hashCode);
    _$hash = $jc(_$hash, arrivalTime.hashCode);
    _$hash = $jc(_$hash, allowedBehDesc.hashCode);
    _$hash = $jc(_$hash, exactPickupLocation.hashCode);
    _$hash = $jc(_$hash, routeIndex.hashCode);
    _$hash = $jc(_$hash, mpesaReceiptNumber.hashCode);
    _$hash = $jc(_$hash, transactionDate.hashCode);
    _$hash = $jc(_$hash, merchantRequestId.hashCode);
    _$hash = $jc(_$hash, checkoutRequestId.hashCode);
    _$hash = $jc(_$hash, compensatedFromPassengerCancel.hashCode);
    _$hash = $jc(_$hash, driverPaymentTime.hashCode);
    _$hash = $jc(_$hash, exactDropOffLocation.hashCode);
    _$hash = $jc(_$hash, isRecurring.hashCode);
    _$hash = $jc(_$hash, carId.hashCode);
    _$hash = $jc(_$hash, car.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GRideSortInput')
          ..add('id', id)
          ..add('name', name)
          ..add('placeofStart', placeofStart)
          ..add('destination', destination)
          ..add('driverId', driverId)
          ..add('estimatePrice', estimatePrice)
          ..add('estimatedDistance', estimatedDistance)
          ..add('numberOfPeople', numberOfPeople)
          ..add('maximumCarryWeight', maximumCarryWeight)
          ..add('departureDate', departureDate)
          ..add('duration', duration)
          ..add('status', status)
          ..add('seat', seat)
          ..add('seatCount', seatCount)
          ..add('seatCapacity', seatCapacity)
          ..add('maxTotalPay', maxTotalPay)
          ..add('totalPay', totalPay)
          ..add('amountCashedOut', amountCashedOut)
          ..add('departureTime', departureTime)
          ..add('arrivalTime', arrivalTime)
          ..add('allowedBehDesc', allowedBehDesc)
          ..add('exactPickupLocation', exactPickupLocation)
          ..add('routeIndex', routeIndex)
          ..add('mpesaReceiptNumber', mpesaReceiptNumber)
          ..add('transactionDate', transactionDate)
          ..add('merchantRequestId', merchantRequestId)
          ..add('checkoutRequestId', checkoutRequestId)
          ..add(
              'compensatedFromPassengerCancel', compensatedFromPassengerCancel)
          ..add('driverPaymentTime', driverPaymentTime)
          ..add('exactDropOffLocation', exactDropOffLocation)
          ..add('isRecurring', isRecurring)
          ..add('carId', carId)
          ..add('car', car))
        .toString();
  }
}

class GRideSortInputBuilder
    implements Builder<GRideSortInput, GRideSortInputBuilder> {
  _$GRideSortInput? _$v;

  GSortEnumType? _id;
  GSortEnumType? get id => _$this._id;
  set id(GSortEnumType? id) => _$this._id = id;

  GSortEnumType? _name;
  GSortEnumType? get name => _$this._name;
  set name(GSortEnumType? name) => _$this._name = name;

  GSortEnumType? _placeofStart;
  GSortEnumType? get placeofStart => _$this._placeofStart;
  set placeofStart(GSortEnumType? placeofStart) =>
      _$this._placeofStart = placeofStart;

  GSortEnumType? _destination;
  GSortEnumType? get destination => _$this._destination;
  set destination(GSortEnumType? destination) =>
      _$this._destination = destination;

  GSortEnumType? _driverId;
  GSortEnumType? get driverId => _$this._driverId;
  set driverId(GSortEnumType? driverId) => _$this._driverId = driverId;

  GSortEnumType? _estimatePrice;
  GSortEnumType? get estimatePrice => _$this._estimatePrice;
  set estimatePrice(GSortEnumType? estimatePrice) =>
      _$this._estimatePrice = estimatePrice;

  GSortEnumType? _estimatedDistance;
  GSortEnumType? get estimatedDistance => _$this._estimatedDistance;
  set estimatedDistance(GSortEnumType? estimatedDistance) =>
      _$this._estimatedDistance = estimatedDistance;

  GSortEnumType? _numberOfPeople;
  GSortEnumType? get numberOfPeople => _$this._numberOfPeople;
  set numberOfPeople(GSortEnumType? numberOfPeople) =>
      _$this._numberOfPeople = numberOfPeople;

  GSortEnumType? _maximumCarryWeight;
  GSortEnumType? get maximumCarryWeight => _$this._maximumCarryWeight;
  set maximumCarryWeight(GSortEnumType? maximumCarryWeight) =>
      _$this._maximumCarryWeight = maximumCarryWeight;

  GSortEnumType? _departureDate;
  GSortEnumType? get departureDate => _$this._departureDate;
  set departureDate(GSortEnumType? departureDate) =>
      _$this._departureDate = departureDate;

  GSortEnumType? _duration;
  GSortEnumType? get duration => _$this._duration;
  set duration(GSortEnumType? duration) => _$this._duration = duration;

  GSortEnumType? _status;
  GSortEnumType? get status => _$this._status;
  set status(GSortEnumType? status) => _$this._status = status;

  GSeatSortInputBuilder? _seat;
  GSeatSortInputBuilder get seat =>
      _$this._seat ??= new GSeatSortInputBuilder();
  set seat(GSeatSortInputBuilder? seat) => _$this._seat = seat;

  GSortEnumType? _seatCount;
  GSortEnumType? get seatCount => _$this._seatCount;
  set seatCount(GSortEnumType? seatCount) => _$this._seatCount = seatCount;

  GSortEnumType? _seatCapacity;
  GSortEnumType? get seatCapacity => _$this._seatCapacity;
  set seatCapacity(GSortEnumType? seatCapacity) =>
      _$this._seatCapacity = seatCapacity;

  GSortEnumType? _maxTotalPay;
  GSortEnumType? get maxTotalPay => _$this._maxTotalPay;
  set maxTotalPay(GSortEnumType? maxTotalPay) =>
      _$this._maxTotalPay = maxTotalPay;

  GSortEnumType? _totalPay;
  GSortEnumType? get totalPay => _$this._totalPay;
  set totalPay(GSortEnumType? totalPay) => _$this._totalPay = totalPay;

  GSortEnumType? _amountCashedOut;
  GSortEnumType? get amountCashedOut => _$this._amountCashedOut;
  set amountCashedOut(GSortEnumType? amountCashedOut) =>
      _$this._amountCashedOut = amountCashedOut;

  GSortEnumType? _departureTime;
  GSortEnumType? get departureTime => _$this._departureTime;
  set departureTime(GSortEnumType? departureTime) =>
      _$this._departureTime = departureTime;

  GSortEnumType? _arrivalTime;
  GSortEnumType? get arrivalTime => _$this._arrivalTime;
  set arrivalTime(GSortEnumType? arrivalTime) =>
      _$this._arrivalTime = arrivalTime;

  GSortEnumType? _allowedBehDesc;
  GSortEnumType? get allowedBehDesc => _$this._allowedBehDesc;
  set allowedBehDesc(GSortEnumType? allowedBehDesc) =>
      _$this._allowedBehDesc = allowedBehDesc;

  GSortEnumType? _exactPickupLocation;
  GSortEnumType? get exactPickupLocation => _$this._exactPickupLocation;
  set exactPickupLocation(GSortEnumType? exactPickupLocation) =>
      _$this._exactPickupLocation = exactPickupLocation;

  GSortEnumType? _routeIndex;
  GSortEnumType? get routeIndex => _$this._routeIndex;
  set routeIndex(GSortEnumType? routeIndex) => _$this._routeIndex = routeIndex;

  GSortEnumType? _mpesaReceiptNumber;
  GSortEnumType? get mpesaReceiptNumber => _$this._mpesaReceiptNumber;
  set mpesaReceiptNumber(GSortEnumType? mpesaReceiptNumber) =>
      _$this._mpesaReceiptNumber = mpesaReceiptNumber;

  GSortEnumType? _transactionDate;
  GSortEnumType? get transactionDate => _$this._transactionDate;
  set transactionDate(GSortEnumType? transactionDate) =>
      _$this._transactionDate = transactionDate;

  GSortEnumType? _merchantRequestId;
  GSortEnumType? get merchantRequestId => _$this._merchantRequestId;
  set merchantRequestId(GSortEnumType? merchantRequestId) =>
      _$this._merchantRequestId = merchantRequestId;

  GSortEnumType? _checkoutRequestId;
  GSortEnumType? get checkoutRequestId => _$this._checkoutRequestId;
  set checkoutRequestId(GSortEnumType? checkoutRequestId) =>
      _$this._checkoutRequestId = checkoutRequestId;

  GSortEnumType? _compensatedFromPassengerCancel;
  GSortEnumType? get compensatedFromPassengerCancel =>
      _$this._compensatedFromPassengerCancel;
  set compensatedFromPassengerCancel(
          GSortEnumType? compensatedFromPassengerCancel) =>
      _$this._compensatedFromPassengerCancel = compensatedFromPassengerCancel;

  GSortEnumType? _driverPaymentTime;
  GSortEnumType? get driverPaymentTime => _$this._driverPaymentTime;
  set driverPaymentTime(GSortEnumType? driverPaymentTime) =>
      _$this._driverPaymentTime = driverPaymentTime;

  GSortEnumType? _exactDropOffLocation;
  GSortEnumType? get exactDropOffLocation => _$this._exactDropOffLocation;
  set exactDropOffLocation(GSortEnumType? exactDropOffLocation) =>
      _$this._exactDropOffLocation = exactDropOffLocation;

  GSortEnumType? _isRecurring;
  GSortEnumType? get isRecurring => _$this._isRecurring;
  set isRecurring(GSortEnumType? isRecurring) =>
      _$this._isRecurring = isRecurring;

  GSortEnumType? _carId;
  GSortEnumType? get carId => _$this._carId;
  set carId(GSortEnumType? carId) => _$this._carId = carId;

  GCarSortInputBuilder? _car;
  GCarSortInputBuilder get car => _$this._car ??= new GCarSortInputBuilder();
  set car(GCarSortInputBuilder? car) => _$this._car = car;

  GRideSortInputBuilder();

  GRideSortInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _name = $v.name;
      _placeofStart = $v.placeofStart;
      _destination = $v.destination;
      _driverId = $v.driverId;
      _estimatePrice = $v.estimatePrice;
      _estimatedDistance = $v.estimatedDistance;
      _numberOfPeople = $v.numberOfPeople;
      _maximumCarryWeight = $v.maximumCarryWeight;
      _departureDate = $v.departureDate;
      _duration = $v.duration;
      _status = $v.status;
      _seat = $v.seat?.toBuilder();
      _seatCount = $v.seatCount;
      _seatCapacity = $v.seatCapacity;
      _maxTotalPay = $v.maxTotalPay;
      _totalPay = $v.totalPay;
      _amountCashedOut = $v.amountCashedOut;
      _departureTime = $v.departureTime;
      _arrivalTime = $v.arrivalTime;
      _allowedBehDesc = $v.allowedBehDesc;
      _exactPickupLocation = $v.exactPickupLocation;
      _routeIndex = $v.routeIndex;
      _mpesaReceiptNumber = $v.mpesaReceiptNumber;
      _transactionDate = $v.transactionDate;
      _merchantRequestId = $v.merchantRequestId;
      _checkoutRequestId = $v.checkoutRequestId;
      _compensatedFromPassengerCancel = $v.compensatedFromPassengerCancel;
      _driverPaymentTime = $v.driverPaymentTime;
      _exactDropOffLocation = $v.exactDropOffLocation;
      _isRecurring = $v.isRecurring;
      _carId = $v.carId;
      _car = $v.car?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GRideSortInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GRideSortInput;
  }

  @override
  void update(void Function(GRideSortInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GRideSortInput build() => _build();

  _$GRideSortInput _build() {
    _$GRideSortInput _$result;
    try {
      _$result = _$v ??
          new _$GRideSortInput._(
              id: id,
              name: name,
              placeofStart: placeofStart,
              destination: destination,
              driverId: driverId,
              estimatePrice: estimatePrice,
              estimatedDistance: estimatedDistance,
              numberOfPeople: numberOfPeople,
              maximumCarryWeight: maximumCarryWeight,
              departureDate: departureDate,
              duration: duration,
              status: status,
              seat: _seat?.build(),
              seatCount: seatCount,
              seatCapacity: seatCapacity,
              maxTotalPay: maxTotalPay,
              totalPay: totalPay,
              amountCashedOut: amountCashedOut,
              departureTime: departureTime,
              arrivalTime: arrivalTime,
              allowedBehDesc: allowedBehDesc,
              exactPickupLocation: exactPickupLocation,
              routeIndex: routeIndex,
              mpesaReceiptNumber: mpesaReceiptNumber,
              transactionDate: transactionDate,
              merchantRequestId: merchantRequestId,
              checkoutRequestId: checkoutRequestId,
              compensatedFromPassengerCancel: compensatedFromPassengerCancel,
              driverPaymentTime: driverPaymentTime,
              exactDropOffLocation: exactDropOffLocation,
              isRecurring: isRecurring,
              carId: carId,
              car: _car?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'seat';
        _seat?.build();

        _$failedField = 'car';
        _car?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GRideSortInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserRidesFilterInput extends GUserRidesFilterInput {
  @override
  final BuiltList<GUserRidesFilterInput>? and;
  @override
  final BuiltList<GUserRidesFilterInput>? or;
  @override
  final GStringOperationFilterInput? userId;
  @override
  final GSafiriCarUserFilterInput? user;
  @override
  final GComparableInt32OperationFilterInput? rideId;
  @override
  final GRideFilterInput? ride;
  @override
  final GListFilterInputTypeOfRideTransactionFilterInput? transactions;

  factory _$GUserRidesFilterInput(
          [void Function(GUserRidesFilterInputBuilder)? updates]) =>
      (new GUserRidesFilterInputBuilder()..update(updates))._build();

  _$GUserRidesFilterInput._(
      {this.and,
      this.or,
      this.userId,
      this.user,
      this.rideId,
      this.ride,
      this.transactions})
      : super._();

  @override
  GUserRidesFilterInput rebuild(
          void Function(GUserRidesFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserRidesFilterInputBuilder toBuilder() =>
      new GUserRidesFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserRidesFilterInput &&
        and == other.and &&
        or == other.or &&
        userId == other.userId &&
        user == other.user &&
        rideId == other.rideId &&
        ride == other.ride &&
        transactions == other.transactions;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, and.hashCode);
    _$hash = $jc(_$hash, or.hashCode);
    _$hash = $jc(_$hash, userId.hashCode);
    _$hash = $jc(_$hash, user.hashCode);
    _$hash = $jc(_$hash, rideId.hashCode);
    _$hash = $jc(_$hash, ride.hashCode);
    _$hash = $jc(_$hash, transactions.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUserRidesFilterInput')
          ..add('and', and)
          ..add('or', or)
          ..add('userId', userId)
          ..add('user', user)
          ..add('rideId', rideId)
          ..add('ride', ride)
          ..add('transactions', transactions))
        .toString();
  }
}

class GUserRidesFilterInputBuilder
    implements Builder<GUserRidesFilterInput, GUserRidesFilterInputBuilder> {
  _$GUserRidesFilterInput? _$v;

  ListBuilder<GUserRidesFilterInput>? _and;
  ListBuilder<GUserRidesFilterInput> get and =>
      _$this._and ??= new ListBuilder<GUserRidesFilterInput>();
  set and(ListBuilder<GUserRidesFilterInput>? and) => _$this._and = and;

  ListBuilder<GUserRidesFilterInput>? _or;
  ListBuilder<GUserRidesFilterInput> get or =>
      _$this._or ??= new ListBuilder<GUserRidesFilterInput>();
  set or(ListBuilder<GUserRidesFilterInput>? or) => _$this._or = or;

  GStringOperationFilterInputBuilder? _userId;
  GStringOperationFilterInputBuilder get userId =>
      _$this._userId ??= new GStringOperationFilterInputBuilder();
  set userId(GStringOperationFilterInputBuilder? userId) =>
      _$this._userId = userId;

  GSafiriCarUserFilterInputBuilder? _user;
  GSafiriCarUserFilterInputBuilder get user =>
      _$this._user ??= new GSafiriCarUserFilterInputBuilder();
  set user(GSafiriCarUserFilterInputBuilder? user) => _$this._user = user;

  GComparableInt32OperationFilterInputBuilder? _rideId;
  GComparableInt32OperationFilterInputBuilder get rideId =>
      _$this._rideId ??= new GComparableInt32OperationFilterInputBuilder();
  set rideId(GComparableInt32OperationFilterInputBuilder? rideId) =>
      _$this._rideId = rideId;

  GRideFilterInputBuilder? _ride;
  GRideFilterInputBuilder get ride =>
      _$this._ride ??= new GRideFilterInputBuilder();
  set ride(GRideFilterInputBuilder? ride) => _$this._ride = ride;

  GListFilterInputTypeOfRideTransactionFilterInputBuilder? _transactions;
  GListFilterInputTypeOfRideTransactionFilterInputBuilder get transactions =>
      _$this._transactions ??=
          new GListFilterInputTypeOfRideTransactionFilterInputBuilder();
  set transactions(
          GListFilterInputTypeOfRideTransactionFilterInputBuilder?
              transactions) =>
      _$this._transactions = transactions;

  GUserRidesFilterInputBuilder();

  GUserRidesFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _and = $v.and?.toBuilder();
      _or = $v.or?.toBuilder();
      _userId = $v.userId?.toBuilder();
      _user = $v.user?.toBuilder();
      _rideId = $v.rideId?.toBuilder();
      _ride = $v.ride?.toBuilder();
      _transactions = $v.transactions?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserRidesFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserRidesFilterInput;
  }

  @override
  void update(void Function(GUserRidesFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUserRidesFilterInput build() => _build();

  _$GUserRidesFilterInput _build() {
    _$GUserRidesFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GUserRidesFilterInput._(
              and: _and?.build(),
              or: _or?.build(),
              userId: _userId?.build(),
              user: _user?.build(),
              rideId: _rideId?.build(),
              ride: _ride?.build(),
              transactions: _transactions?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'and';
        _and?.build();
        _$failedField = 'or';
        _or?.build();
        _$failedField = 'userId';
        _userId?.build();
        _$failedField = 'user';
        _user?.build();
        _$failedField = 'rideId';
        _rideId?.build();
        _$failedField = 'ride';
        _ride?.build();
        _$failedField = 'transactions';
        _transactions?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUserRidesFilterInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserRidesSortInput extends GUserRidesSortInput {
  @override
  final GSortEnumType? userId;
  @override
  final GSafiriCarUserSortInput? user;
  @override
  final GSortEnumType? rideId;
  @override
  final GRideSortInput? ride;

  factory _$GUserRidesSortInput(
          [void Function(GUserRidesSortInputBuilder)? updates]) =>
      (new GUserRidesSortInputBuilder()..update(updates))._build();

  _$GUserRidesSortInput._({this.userId, this.user, this.rideId, this.ride})
      : super._();

  @override
  GUserRidesSortInput rebuild(
          void Function(GUserRidesSortInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserRidesSortInputBuilder toBuilder() =>
      new GUserRidesSortInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserRidesSortInput &&
        userId == other.userId &&
        user == other.user &&
        rideId == other.rideId &&
        ride == other.ride;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, userId.hashCode);
    _$hash = $jc(_$hash, user.hashCode);
    _$hash = $jc(_$hash, rideId.hashCode);
    _$hash = $jc(_$hash, ride.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUserRidesSortInput')
          ..add('userId', userId)
          ..add('user', user)
          ..add('rideId', rideId)
          ..add('ride', ride))
        .toString();
  }
}

class GUserRidesSortInputBuilder
    implements Builder<GUserRidesSortInput, GUserRidesSortInputBuilder> {
  _$GUserRidesSortInput? _$v;

  GSortEnumType? _userId;
  GSortEnumType? get userId => _$this._userId;
  set userId(GSortEnumType? userId) => _$this._userId = userId;

  GSafiriCarUserSortInputBuilder? _user;
  GSafiriCarUserSortInputBuilder get user =>
      _$this._user ??= new GSafiriCarUserSortInputBuilder();
  set user(GSafiriCarUserSortInputBuilder? user) => _$this._user = user;

  GSortEnumType? _rideId;
  GSortEnumType? get rideId => _$this._rideId;
  set rideId(GSortEnumType? rideId) => _$this._rideId = rideId;

  GRideSortInputBuilder? _ride;
  GRideSortInputBuilder get ride =>
      _$this._ride ??= new GRideSortInputBuilder();
  set ride(GRideSortInputBuilder? ride) => _$this._ride = ride;

  GUserRidesSortInputBuilder();

  GUserRidesSortInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _userId = $v.userId;
      _user = $v.user?.toBuilder();
      _rideId = $v.rideId;
      _ride = $v.ride?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserRidesSortInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserRidesSortInput;
  }

  @override
  void update(void Function(GUserRidesSortInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUserRidesSortInput build() => _build();

  _$GUserRidesSortInput _build() {
    _$GUserRidesSortInput _$result;
    try {
      _$result = _$v ??
          new _$GUserRidesSortInput._(
              userId: userId,
              user: _user?.build(),
              rideId: rideId,
              ride: _ride?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'user';
        _user?.build();

        _$failedField = 'ride';
        _ride?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUserRidesSortInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GRideTransactionFilterInput extends GRideTransactionFilterInput {
  @override
  final BuiltList<GRideTransactionFilterInput>? and;
  @override
  final BuiltList<GRideTransactionFilterInput>? or;
  @override
  final GStringOperationFilterInput? id;
  @override
  final GStringOperationFilterInput? phoneNumber;
  @override
  final GComparableSingleOperationFilterInput? amount;
  @override
  final GBooleanOperationFilterInput? isReversed;
  @override
  final GStringOperationFilterInput? status;
  @override
  final GComparableInt32OperationFilterInput? bookedRideId;
  @override
  final GStringOperationFilterInput? passengerId;
  @override
  final GStringOperationFilterInput? driverId;
  @override
  final GStringOperationFilterInput? transactionCode;
  @override
  final GStringOperationFilterInput? merchantRequestId;
  @override
  final GStringOperationFilterInput? checkoutRequestId;
  @override
  final GComparableNullableOfDateTimeOperationFilterInput? transactionDate;
  @override
  final GComparableNullableOfTimeSpanOperationFilterInput? transactionTime;
  @override
  final GComparableDateTimeOperationFilterInput? approvedDateTime;
  @override
  final GStringOperationFilterInput? transactionID;
  @override
  final GStringOperationFilterInput? conversationID;
  @override
  final GStringOperationFilterInput? originatorConversationID;
  @override
  final GStringOperationFilterInput? reversedDate;
  @override
  final GStringOperationFilterInput? reversedTime;
  @override
  final GStringOperationFilterInput? reseaonForReversal;
  @override
  final GStringOperationFilterInput? seatsStr;
  @override
  final GStringOperationFilterInput? paymentMethod;
  @override
  final GStringOperationFilterInput? exactDropOffLocation;

  factory _$GRideTransactionFilterInput(
          [void Function(GRideTransactionFilterInputBuilder)? updates]) =>
      (new GRideTransactionFilterInputBuilder()..update(updates))._build();

  _$GRideTransactionFilterInput._(
      {this.and,
      this.or,
      this.id,
      this.phoneNumber,
      this.amount,
      this.isReversed,
      this.status,
      this.bookedRideId,
      this.passengerId,
      this.driverId,
      this.transactionCode,
      this.merchantRequestId,
      this.checkoutRequestId,
      this.transactionDate,
      this.transactionTime,
      this.approvedDateTime,
      this.transactionID,
      this.conversationID,
      this.originatorConversationID,
      this.reversedDate,
      this.reversedTime,
      this.reseaonForReversal,
      this.seatsStr,
      this.paymentMethod,
      this.exactDropOffLocation})
      : super._();

  @override
  GRideTransactionFilterInput rebuild(
          void Function(GRideTransactionFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GRideTransactionFilterInputBuilder toBuilder() =>
      new GRideTransactionFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GRideTransactionFilterInput &&
        and == other.and &&
        or == other.or &&
        id == other.id &&
        phoneNumber == other.phoneNumber &&
        amount == other.amount &&
        isReversed == other.isReversed &&
        status == other.status &&
        bookedRideId == other.bookedRideId &&
        passengerId == other.passengerId &&
        driverId == other.driverId &&
        transactionCode == other.transactionCode &&
        merchantRequestId == other.merchantRequestId &&
        checkoutRequestId == other.checkoutRequestId &&
        transactionDate == other.transactionDate &&
        transactionTime == other.transactionTime &&
        approvedDateTime == other.approvedDateTime &&
        transactionID == other.transactionID &&
        conversationID == other.conversationID &&
        originatorConversationID == other.originatorConversationID &&
        reversedDate == other.reversedDate &&
        reversedTime == other.reversedTime &&
        reseaonForReversal == other.reseaonForReversal &&
        seatsStr == other.seatsStr &&
        paymentMethod == other.paymentMethod &&
        exactDropOffLocation == other.exactDropOffLocation;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, and.hashCode);
    _$hash = $jc(_$hash, or.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, phoneNumber.hashCode);
    _$hash = $jc(_$hash, amount.hashCode);
    _$hash = $jc(_$hash, isReversed.hashCode);
    _$hash = $jc(_$hash, status.hashCode);
    _$hash = $jc(_$hash, bookedRideId.hashCode);
    _$hash = $jc(_$hash, passengerId.hashCode);
    _$hash = $jc(_$hash, driverId.hashCode);
    _$hash = $jc(_$hash, transactionCode.hashCode);
    _$hash = $jc(_$hash, merchantRequestId.hashCode);
    _$hash = $jc(_$hash, checkoutRequestId.hashCode);
    _$hash = $jc(_$hash, transactionDate.hashCode);
    _$hash = $jc(_$hash, transactionTime.hashCode);
    _$hash = $jc(_$hash, approvedDateTime.hashCode);
    _$hash = $jc(_$hash, transactionID.hashCode);
    _$hash = $jc(_$hash, conversationID.hashCode);
    _$hash = $jc(_$hash, originatorConversationID.hashCode);
    _$hash = $jc(_$hash, reversedDate.hashCode);
    _$hash = $jc(_$hash, reversedTime.hashCode);
    _$hash = $jc(_$hash, reseaonForReversal.hashCode);
    _$hash = $jc(_$hash, seatsStr.hashCode);
    _$hash = $jc(_$hash, paymentMethod.hashCode);
    _$hash = $jc(_$hash, exactDropOffLocation.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GRideTransactionFilterInput')
          ..add('and', and)
          ..add('or', or)
          ..add('id', id)
          ..add('phoneNumber', phoneNumber)
          ..add('amount', amount)
          ..add('isReversed', isReversed)
          ..add('status', status)
          ..add('bookedRideId', bookedRideId)
          ..add('passengerId', passengerId)
          ..add('driverId', driverId)
          ..add('transactionCode', transactionCode)
          ..add('merchantRequestId', merchantRequestId)
          ..add('checkoutRequestId', checkoutRequestId)
          ..add('transactionDate', transactionDate)
          ..add('transactionTime', transactionTime)
          ..add('approvedDateTime', approvedDateTime)
          ..add('transactionID', transactionID)
          ..add('conversationID', conversationID)
          ..add('originatorConversationID', originatorConversationID)
          ..add('reversedDate', reversedDate)
          ..add('reversedTime', reversedTime)
          ..add('reseaonForReversal', reseaonForReversal)
          ..add('seatsStr', seatsStr)
          ..add('paymentMethod', paymentMethod)
          ..add('exactDropOffLocation', exactDropOffLocation))
        .toString();
  }
}

class GRideTransactionFilterInputBuilder
    implements
        Builder<GRideTransactionFilterInput,
            GRideTransactionFilterInputBuilder> {
  _$GRideTransactionFilterInput? _$v;

  ListBuilder<GRideTransactionFilterInput>? _and;
  ListBuilder<GRideTransactionFilterInput> get and =>
      _$this._and ??= new ListBuilder<GRideTransactionFilterInput>();
  set and(ListBuilder<GRideTransactionFilterInput>? and) => _$this._and = and;

  ListBuilder<GRideTransactionFilterInput>? _or;
  ListBuilder<GRideTransactionFilterInput> get or =>
      _$this._or ??= new ListBuilder<GRideTransactionFilterInput>();
  set or(ListBuilder<GRideTransactionFilterInput>? or) => _$this._or = or;

  GStringOperationFilterInputBuilder? _id;
  GStringOperationFilterInputBuilder get id =>
      _$this._id ??= new GStringOperationFilterInputBuilder();
  set id(GStringOperationFilterInputBuilder? id) => _$this._id = id;

  GStringOperationFilterInputBuilder? _phoneNumber;
  GStringOperationFilterInputBuilder get phoneNumber =>
      _$this._phoneNumber ??= new GStringOperationFilterInputBuilder();
  set phoneNumber(GStringOperationFilterInputBuilder? phoneNumber) =>
      _$this._phoneNumber = phoneNumber;

  GComparableSingleOperationFilterInputBuilder? _amount;
  GComparableSingleOperationFilterInputBuilder get amount =>
      _$this._amount ??= new GComparableSingleOperationFilterInputBuilder();
  set amount(GComparableSingleOperationFilterInputBuilder? amount) =>
      _$this._amount = amount;

  GBooleanOperationFilterInputBuilder? _isReversed;
  GBooleanOperationFilterInputBuilder get isReversed =>
      _$this._isReversed ??= new GBooleanOperationFilterInputBuilder();
  set isReversed(GBooleanOperationFilterInputBuilder? isReversed) =>
      _$this._isReversed = isReversed;

  GStringOperationFilterInputBuilder? _status;
  GStringOperationFilterInputBuilder get status =>
      _$this._status ??= new GStringOperationFilterInputBuilder();
  set status(GStringOperationFilterInputBuilder? status) =>
      _$this._status = status;

  GComparableInt32OperationFilterInputBuilder? _bookedRideId;
  GComparableInt32OperationFilterInputBuilder get bookedRideId =>
      _$this._bookedRideId ??=
          new GComparableInt32OperationFilterInputBuilder();
  set bookedRideId(GComparableInt32OperationFilterInputBuilder? bookedRideId) =>
      _$this._bookedRideId = bookedRideId;

  GStringOperationFilterInputBuilder? _passengerId;
  GStringOperationFilterInputBuilder get passengerId =>
      _$this._passengerId ??= new GStringOperationFilterInputBuilder();
  set passengerId(GStringOperationFilterInputBuilder? passengerId) =>
      _$this._passengerId = passengerId;

  GStringOperationFilterInputBuilder? _driverId;
  GStringOperationFilterInputBuilder get driverId =>
      _$this._driverId ??= new GStringOperationFilterInputBuilder();
  set driverId(GStringOperationFilterInputBuilder? driverId) =>
      _$this._driverId = driverId;

  GStringOperationFilterInputBuilder? _transactionCode;
  GStringOperationFilterInputBuilder get transactionCode =>
      _$this._transactionCode ??= new GStringOperationFilterInputBuilder();
  set transactionCode(GStringOperationFilterInputBuilder? transactionCode) =>
      _$this._transactionCode = transactionCode;

  GStringOperationFilterInputBuilder? _merchantRequestId;
  GStringOperationFilterInputBuilder get merchantRequestId =>
      _$this._merchantRequestId ??= new GStringOperationFilterInputBuilder();
  set merchantRequestId(
          GStringOperationFilterInputBuilder? merchantRequestId) =>
      _$this._merchantRequestId = merchantRequestId;

  GStringOperationFilterInputBuilder? _checkoutRequestId;
  GStringOperationFilterInputBuilder get checkoutRequestId =>
      _$this._checkoutRequestId ??= new GStringOperationFilterInputBuilder();
  set checkoutRequestId(
          GStringOperationFilterInputBuilder? checkoutRequestId) =>
      _$this._checkoutRequestId = checkoutRequestId;

  GComparableNullableOfDateTimeOperationFilterInputBuilder? _transactionDate;
  GComparableNullableOfDateTimeOperationFilterInputBuilder
      get transactionDate => _$this._transactionDate ??=
          new GComparableNullableOfDateTimeOperationFilterInputBuilder();
  set transactionDate(
          GComparableNullableOfDateTimeOperationFilterInputBuilder?
              transactionDate) =>
      _$this._transactionDate = transactionDate;

  GComparableNullableOfTimeSpanOperationFilterInputBuilder? _transactionTime;
  GComparableNullableOfTimeSpanOperationFilterInputBuilder
      get transactionTime => _$this._transactionTime ??=
          new GComparableNullableOfTimeSpanOperationFilterInputBuilder();
  set transactionTime(
          GComparableNullableOfTimeSpanOperationFilterInputBuilder?
              transactionTime) =>
      _$this._transactionTime = transactionTime;

  GComparableDateTimeOperationFilterInputBuilder? _approvedDateTime;
  GComparableDateTimeOperationFilterInputBuilder get approvedDateTime =>
      _$this._approvedDateTime ??=
          new GComparableDateTimeOperationFilterInputBuilder();
  set approvedDateTime(
          GComparableDateTimeOperationFilterInputBuilder? approvedDateTime) =>
      _$this._approvedDateTime = approvedDateTime;

  GStringOperationFilterInputBuilder? _transactionID;
  GStringOperationFilterInputBuilder get transactionID =>
      _$this._transactionID ??= new GStringOperationFilterInputBuilder();
  set transactionID(GStringOperationFilterInputBuilder? transactionID) =>
      _$this._transactionID = transactionID;

  GStringOperationFilterInputBuilder? _conversationID;
  GStringOperationFilterInputBuilder get conversationID =>
      _$this._conversationID ??= new GStringOperationFilterInputBuilder();
  set conversationID(GStringOperationFilterInputBuilder? conversationID) =>
      _$this._conversationID = conversationID;

  GStringOperationFilterInputBuilder? _originatorConversationID;
  GStringOperationFilterInputBuilder get originatorConversationID =>
      _$this._originatorConversationID ??=
          new GStringOperationFilterInputBuilder();
  set originatorConversationID(
          GStringOperationFilterInputBuilder? originatorConversationID) =>
      _$this._originatorConversationID = originatorConversationID;

  GStringOperationFilterInputBuilder? _reversedDate;
  GStringOperationFilterInputBuilder get reversedDate =>
      _$this._reversedDate ??= new GStringOperationFilterInputBuilder();
  set reversedDate(GStringOperationFilterInputBuilder? reversedDate) =>
      _$this._reversedDate = reversedDate;

  GStringOperationFilterInputBuilder? _reversedTime;
  GStringOperationFilterInputBuilder get reversedTime =>
      _$this._reversedTime ??= new GStringOperationFilterInputBuilder();
  set reversedTime(GStringOperationFilterInputBuilder? reversedTime) =>
      _$this._reversedTime = reversedTime;

  GStringOperationFilterInputBuilder? _reseaonForReversal;
  GStringOperationFilterInputBuilder get reseaonForReversal =>
      _$this._reseaonForReversal ??= new GStringOperationFilterInputBuilder();
  set reseaonForReversal(
          GStringOperationFilterInputBuilder? reseaonForReversal) =>
      _$this._reseaonForReversal = reseaonForReversal;

  GStringOperationFilterInputBuilder? _seatsStr;
  GStringOperationFilterInputBuilder get seatsStr =>
      _$this._seatsStr ??= new GStringOperationFilterInputBuilder();
  set seatsStr(GStringOperationFilterInputBuilder? seatsStr) =>
      _$this._seatsStr = seatsStr;

  GStringOperationFilterInputBuilder? _paymentMethod;
  GStringOperationFilterInputBuilder get paymentMethod =>
      _$this._paymentMethod ??= new GStringOperationFilterInputBuilder();
  set paymentMethod(GStringOperationFilterInputBuilder? paymentMethod) =>
      _$this._paymentMethod = paymentMethod;

  GStringOperationFilterInputBuilder? _exactDropOffLocation;
  GStringOperationFilterInputBuilder get exactDropOffLocation =>
      _$this._exactDropOffLocation ??= new GStringOperationFilterInputBuilder();
  set exactDropOffLocation(
          GStringOperationFilterInputBuilder? exactDropOffLocation) =>
      _$this._exactDropOffLocation = exactDropOffLocation;

  GRideTransactionFilterInputBuilder();

  GRideTransactionFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _and = $v.and?.toBuilder();
      _or = $v.or?.toBuilder();
      _id = $v.id?.toBuilder();
      _phoneNumber = $v.phoneNumber?.toBuilder();
      _amount = $v.amount?.toBuilder();
      _isReversed = $v.isReversed?.toBuilder();
      _status = $v.status?.toBuilder();
      _bookedRideId = $v.bookedRideId?.toBuilder();
      _passengerId = $v.passengerId?.toBuilder();
      _driverId = $v.driverId?.toBuilder();
      _transactionCode = $v.transactionCode?.toBuilder();
      _merchantRequestId = $v.merchantRequestId?.toBuilder();
      _checkoutRequestId = $v.checkoutRequestId?.toBuilder();
      _transactionDate = $v.transactionDate?.toBuilder();
      _transactionTime = $v.transactionTime?.toBuilder();
      _approvedDateTime = $v.approvedDateTime?.toBuilder();
      _transactionID = $v.transactionID?.toBuilder();
      _conversationID = $v.conversationID?.toBuilder();
      _originatorConversationID = $v.originatorConversationID?.toBuilder();
      _reversedDate = $v.reversedDate?.toBuilder();
      _reversedTime = $v.reversedTime?.toBuilder();
      _reseaonForReversal = $v.reseaonForReversal?.toBuilder();
      _seatsStr = $v.seatsStr?.toBuilder();
      _paymentMethod = $v.paymentMethod?.toBuilder();
      _exactDropOffLocation = $v.exactDropOffLocation?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GRideTransactionFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GRideTransactionFilterInput;
  }

  @override
  void update(void Function(GRideTransactionFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GRideTransactionFilterInput build() => _build();

  _$GRideTransactionFilterInput _build() {
    _$GRideTransactionFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GRideTransactionFilterInput._(
              and: _and?.build(),
              or: _or?.build(),
              id: _id?.build(),
              phoneNumber: _phoneNumber?.build(),
              amount: _amount?.build(),
              isReversed: _isReversed?.build(),
              status: _status?.build(),
              bookedRideId: _bookedRideId?.build(),
              passengerId: _passengerId?.build(),
              driverId: _driverId?.build(),
              transactionCode: _transactionCode?.build(),
              merchantRequestId: _merchantRequestId?.build(),
              checkoutRequestId: _checkoutRequestId?.build(),
              transactionDate: _transactionDate?.build(),
              transactionTime: _transactionTime?.build(),
              approvedDateTime: _approvedDateTime?.build(),
              transactionID: _transactionID?.build(),
              conversationID: _conversationID?.build(),
              originatorConversationID: _originatorConversationID?.build(),
              reversedDate: _reversedDate?.build(),
              reversedTime: _reversedTime?.build(),
              reseaonForReversal: _reseaonForReversal?.build(),
              seatsStr: _seatsStr?.build(),
              paymentMethod: _paymentMethod?.build(),
              exactDropOffLocation: _exactDropOffLocation?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'and';
        _and?.build();
        _$failedField = 'or';
        _or?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'phoneNumber';
        _phoneNumber?.build();
        _$failedField = 'amount';
        _amount?.build();
        _$failedField = 'isReversed';
        _isReversed?.build();
        _$failedField = 'status';
        _status?.build();
        _$failedField = 'bookedRideId';
        _bookedRideId?.build();
        _$failedField = 'passengerId';
        _passengerId?.build();
        _$failedField = 'driverId';
        _driverId?.build();
        _$failedField = 'transactionCode';
        _transactionCode?.build();
        _$failedField = 'merchantRequestId';
        _merchantRequestId?.build();
        _$failedField = 'checkoutRequestId';
        _checkoutRequestId?.build();
        _$failedField = 'transactionDate';
        _transactionDate?.build();
        _$failedField = 'transactionTime';
        _transactionTime?.build();
        _$failedField = 'approvedDateTime';
        _approvedDateTime?.build();
        _$failedField = 'transactionID';
        _transactionID?.build();
        _$failedField = 'conversationID';
        _conversationID?.build();
        _$failedField = 'originatorConversationID';
        _originatorConversationID?.build();
        _$failedField = 'reversedDate';
        _reversedDate?.build();
        _$failedField = 'reversedTime';
        _reversedTime?.build();
        _$failedField = 'reseaonForReversal';
        _reseaonForReversal?.build();
        _$failedField = 'seatsStr';
        _seatsStr?.build();
        _$failedField = 'paymentMethod';
        _paymentMethod?.build();
        _$failedField = 'exactDropOffLocation';
        _exactDropOffLocation?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GRideTransactionFilterInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GRideTransactionSortInput extends GRideTransactionSortInput {
  @override
  final GSortEnumType? id;
  @override
  final GSortEnumType? phoneNumber;
  @override
  final GSortEnumType? amount;
  @override
  final GSortEnumType? isReversed;
  @override
  final GSortEnumType? status;
  @override
  final GSortEnumType? bookedRideId;
  @override
  final GSortEnumType? passengerId;
  @override
  final GSortEnumType? driverId;
  @override
  final GSortEnumType? transactionCode;
  @override
  final GSortEnumType? merchantRequestId;
  @override
  final GSortEnumType? checkoutRequestId;
  @override
  final GSortEnumType? transactionDate;
  @override
  final GSortEnumType? transactionTime;
  @override
  final GSortEnumType? approvedDateTime;
  @override
  final GSortEnumType? transactionID;
  @override
  final GSortEnumType? conversationID;
  @override
  final GSortEnumType? originatorConversationID;
  @override
  final GSortEnumType? reversedDate;
  @override
  final GSortEnumType? reversedTime;
  @override
  final GSortEnumType? reseaonForReversal;
  @override
  final GSortEnumType? seatsStr;
  @override
  final GSortEnumType? paymentMethod;
  @override
  final GSortEnumType? exactDropOffLocation;

  factory _$GRideTransactionSortInput(
          [void Function(GRideTransactionSortInputBuilder)? updates]) =>
      (new GRideTransactionSortInputBuilder()..update(updates))._build();

  _$GRideTransactionSortInput._(
      {this.id,
      this.phoneNumber,
      this.amount,
      this.isReversed,
      this.status,
      this.bookedRideId,
      this.passengerId,
      this.driverId,
      this.transactionCode,
      this.merchantRequestId,
      this.checkoutRequestId,
      this.transactionDate,
      this.transactionTime,
      this.approvedDateTime,
      this.transactionID,
      this.conversationID,
      this.originatorConversationID,
      this.reversedDate,
      this.reversedTime,
      this.reseaonForReversal,
      this.seatsStr,
      this.paymentMethod,
      this.exactDropOffLocation})
      : super._();

  @override
  GRideTransactionSortInput rebuild(
          void Function(GRideTransactionSortInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GRideTransactionSortInputBuilder toBuilder() =>
      new GRideTransactionSortInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GRideTransactionSortInput &&
        id == other.id &&
        phoneNumber == other.phoneNumber &&
        amount == other.amount &&
        isReversed == other.isReversed &&
        status == other.status &&
        bookedRideId == other.bookedRideId &&
        passengerId == other.passengerId &&
        driverId == other.driverId &&
        transactionCode == other.transactionCode &&
        merchantRequestId == other.merchantRequestId &&
        checkoutRequestId == other.checkoutRequestId &&
        transactionDate == other.transactionDate &&
        transactionTime == other.transactionTime &&
        approvedDateTime == other.approvedDateTime &&
        transactionID == other.transactionID &&
        conversationID == other.conversationID &&
        originatorConversationID == other.originatorConversationID &&
        reversedDate == other.reversedDate &&
        reversedTime == other.reversedTime &&
        reseaonForReversal == other.reseaonForReversal &&
        seatsStr == other.seatsStr &&
        paymentMethod == other.paymentMethod &&
        exactDropOffLocation == other.exactDropOffLocation;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, phoneNumber.hashCode);
    _$hash = $jc(_$hash, amount.hashCode);
    _$hash = $jc(_$hash, isReversed.hashCode);
    _$hash = $jc(_$hash, status.hashCode);
    _$hash = $jc(_$hash, bookedRideId.hashCode);
    _$hash = $jc(_$hash, passengerId.hashCode);
    _$hash = $jc(_$hash, driverId.hashCode);
    _$hash = $jc(_$hash, transactionCode.hashCode);
    _$hash = $jc(_$hash, merchantRequestId.hashCode);
    _$hash = $jc(_$hash, checkoutRequestId.hashCode);
    _$hash = $jc(_$hash, transactionDate.hashCode);
    _$hash = $jc(_$hash, transactionTime.hashCode);
    _$hash = $jc(_$hash, approvedDateTime.hashCode);
    _$hash = $jc(_$hash, transactionID.hashCode);
    _$hash = $jc(_$hash, conversationID.hashCode);
    _$hash = $jc(_$hash, originatorConversationID.hashCode);
    _$hash = $jc(_$hash, reversedDate.hashCode);
    _$hash = $jc(_$hash, reversedTime.hashCode);
    _$hash = $jc(_$hash, reseaonForReversal.hashCode);
    _$hash = $jc(_$hash, seatsStr.hashCode);
    _$hash = $jc(_$hash, paymentMethod.hashCode);
    _$hash = $jc(_$hash, exactDropOffLocation.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GRideTransactionSortInput')
          ..add('id', id)
          ..add('phoneNumber', phoneNumber)
          ..add('amount', amount)
          ..add('isReversed', isReversed)
          ..add('status', status)
          ..add('bookedRideId', bookedRideId)
          ..add('passengerId', passengerId)
          ..add('driverId', driverId)
          ..add('transactionCode', transactionCode)
          ..add('merchantRequestId', merchantRequestId)
          ..add('checkoutRequestId', checkoutRequestId)
          ..add('transactionDate', transactionDate)
          ..add('transactionTime', transactionTime)
          ..add('approvedDateTime', approvedDateTime)
          ..add('transactionID', transactionID)
          ..add('conversationID', conversationID)
          ..add('originatorConversationID', originatorConversationID)
          ..add('reversedDate', reversedDate)
          ..add('reversedTime', reversedTime)
          ..add('reseaonForReversal', reseaonForReversal)
          ..add('seatsStr', seatsStr)
          ..add('paymentMethod', paymentMethod)
          ..add('exactDropOffLocation', exactDropOffLocation))
        .toString();
  }
}

class GRideTransactionSortInputBuilder
    implements
        Builder<GRideTransactionSortInput, GRideTransactionSortInputBuilder> {
  _$GRideTransactionSortInput? _$v;

  GSortEnumType? _id;
  GSortEnumType? get id => _$this._id;
  set id(GSortEnumType? id) => _$this._id = id;

  GSortEnumType? _phoneNumber;
  GSortEnumType? get phoneNumber => _$this._phoneNumber;
  set phoneNumber(GSortEnumType? phoneNumber) =>
      _$this._phoneNumber = phoneNumber;

  GSortEnumType? _amount;
  GSortEnumType? get amount => _$this._amount;
  set amount(GSortEnumType? amount) => _$this._amount = amount;

  GSortEnumType? _isReversed;
  GSortEnumType? get isReversed => _$this._isReversed;
  set isReversed(GSortEnumType? isReversed) => _$this._isReversed = isReversed;

  GSortEnumType? _status;
  GSortEnumType? get status => _$this._status;
  set status(GSortEnumType? status) => _$this._status = status;

  GSortEnumType? _bookedRideId;
  GSortEnumType? get bookedRideId => _$this._bookedRideId;
  set bookedRideId(GSortEnumType? bookedRideId) =>
      _$this._bookedRideId = bookedRideId;

  GSortEnumType? _passengerId;
  GSortEnumType? get passengerId => _$this._passengerId;
  set passengerId(GSortEnumType? passengerId) =>
      _$this._passengerId = passengerId;

  GSortEnumType? _driverId;
  GSortEnumType? get driverId => _$this._driverId;
  set driverId(GSortEnumType? driverId) => _$this._driverId = driverId;

  GSortEnumType? _transactionCode;
  GSortEnumType? get transactionCode => _$this._transactionCode;
  set transactionCode(GSortEnumType? transactionCode) =>
      _$this._transactionCode = transactionCode;

  GSortEnumType? _merchantRequestId;
  GSortEnumType? get merchantRequestId => _$this._merchantRequestId;
  set merchantRequestId(GSortEnumType? merchantRequestId) =>
      _$this._merchantRequestId = merchantRequestId;

  GSortEnumType? _checkoutRequestId;
  GSortEnumType? get checkoutRequestId => _$this._checkoutRequestId;
  set checkoutRequestId(GSortEnumType? checkoutRequestId) =>
      _$this._checkoutRequestId = checkoutRequestId;

  GSortEnumType? _transactionDate;
  GSortEnumType? get transactionDate => _$this._transactionDate;
  set transactionDate(GSortEnumType? transactionDate) =>
      _$this._transactionDate = transactionDate;

  GSortEnumType? _transactionTime;
  GSortEnumType? get transactionTime => _$this._transactionTime;
  set transactionTime(GSortEnumType? transactionTime) =>
      _$this._transactionTime = transactionTime;

  GSortEnumType? _approvedDateTime;
  GSortEnumType? get approvedDateTime => _$this._approvedDateTime;
  set approvedDateTime(GSortEnumType? approvedDateTime) =>
      _$this._approvedDateTime = approvedDateTime;

  GSortEnumType? _transactionID;
  GSortEnumType? get transactionID => _$this._transactionID;
  set transactionID(GSortEnumType? transactionID) =>
      _$this._transactionID = transactionID;

  GSortEnumType? _conversationID;
  GSortEnumType? get conversationID => _$this._conversationID;
  set conversationID(GSortEnumType? conversationID) =>
      _$this._conversationID = conversationID;

  GSortEnumType? _originatorConversationID;
  GSortEnumType? get originatorConversationID =>
      _$this._originatorConversationID;
  set originatorConversationID(GSortEnumType? originatorConversationID) =>
      _$this._originatorConversationID = originatorConversationID;

  GSortEnumType? _reversedDate;
  GSortEnumType? get reversedDate => _$this._reversedDate;
  set reversedDate(GSortEnumType? reversedDate) =>
      _$this._reversedDate = reversedDate;

  GSortEnumType? _reversedTime;
  GSortEnumType? get reversedTime => _$this._reversedTime;
  set reversedTime(GSortEnumType? reversedTime) =>
      _$this._reversedTime = reversedTime;

  GSortEnumType? _reseaonForReversal;
  GSortEnumType? get reseaonForReversal => _$this._reseaonForReversal;
  set reseaonForReversal(GSortEnumType? reseaonForReversal) =>
      _$this._reseaonForReversal = reseaonForReversal;

  GSortEnumType? _seatsStr;
  GSortEnumType? get seatsStr => _$this._seatsStr;
  set seatsStr(GSortEnumType? seatsStr) => _$this._seatsStr = seatsStr;

  GSortEnumType? _paymentMethod;
  GSortEnumType? get paymentMethod => _$this._paymentMethod;
  set paymentMethod(GSortEnumType? paymentMethod) =>
      _$this._paymentMethod = paymentMethod;

  GSortEnumType? _exactDropOffLocation;
  GSortEnumType? get exactDropOffLocation => _$this._exactDropOffLocation;
  set exactDropOffLocation(GSortEnumType? exactDropOffLocation) =>
      _$this._exactDropOffLocation = exactDropOffLocation;

  GRideTransactionSortInputBuilder();

  GRideTransactionSortInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _phoneNumber = $v.phoneNumber;
      _amount = $v.amount;
      _isReversed = $v.isReversed;
      _status = $v.status;
      _bookedRideId = $v.bookedRideId;
      _passengerId = $v.passengerId;
      _driverId = $v.driverId;
      _transactionCode = $v.transactionCode;
      _merchantRequestId = $v.merchantRequestId;
      _checkoutRequestId = $v.checkoutRequestId;
      _transactionDate = $v.transactionDate;
      _transactionTime = $v.transactionTime;
      _approvedDateTime = $v.approvedDateTime;
      _transactionID = $v.transactionID;
      _conversationID = $v.conversationID;
      _originatorConversationID = $v.originatorConversationID;
      _reversedDate = $v.reversedDate;
      _reversedTime = $v.reversedTime;
      _reseaonForReversal = $v.reseaonForReversal;
      _seatsStr = $v.seatsStr;
      _paymentMethod = $v.paymentMethod;
      _exactDropOffLocation = $v.exactDropOffLocation;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GRideTransactionSortInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GRideTransactionSortInput;
  }

  @override
  void update(void Function(GRideTransactionSortInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GRideTransactionSortInput build() => _build();

  _$GRideTransactionSortInput _build() {
    final _$result = _$v ??
        new _$GRideTransactionSortInput._(
            id: id,
            phoneNumber: phoneNumber,
            amount: amount,
            isReversed: isReversed,
            status: status,
            bookedRideId: bookedRideId,
            passengerId: passengerId,
            driverId: driverId,
            transactionCode: transactionCode,
            merchantRequestId: merchantRequestId,
            checkoutRequestId: checkoutRequestId,
            transactionDate: transactionDate,
            transactionTime: transactionTime,
            approvedDateTime: approvedDateTime,
            transactionID: transactionID,
            conversationID: conversationID,
            originatorConversationID: originatorConversationID,
            reversedDate: reversedDate,
            reversedTime: reversedTime,
            reseaonForReversal: reseaonForReversal,
            seatsStr: seatsStr,
            paymentMethod: paymentMethod,
            exactDropOffLocation: exactDropOffLocation);
    replace(_$result);
    return _$result;
  }
}

class _$GPamrideMessageFilterInput extends GPamrideMessageFilterInput {
  @override
  final BuiltList<GPamrideMessageFilterInput>? and;
  @override
  final BuiltList<GPamrideMessageFilterInput>? or;
  @override
  final GStringOperationFilterInput? id;
  @override
  final GStringOperationFilterInput? from;
  @override
  final GStringOperationFilterInput? to;
  @override
  final GComparableNullableOfDateTimeOperationFilterInput? dateSend;
  @override
  final GStringOperationFilterInput? message;
  @override
  final GStringOperationFilterInput? topic;
  @override
  final GComparableNullableOfDateTimeOperationFilterInput? updated;
  @override
  final GComparableNullableOfTimeSpanOperationFilterInput? updatedAt;

  factory _$GPamrideMessageFilterInput(
          [void Function(GPamrideMessageFilterInputBuilder)? updates]) =>
      (new GPamrideMessageFilterInputBuilder()..update(updates))._build();

  _$GPamrideMessageFilterInput._(
      {this.and,
      this.or,
      this.id,
      this.from,
      this.to,
      this.dateSend,
      this.message,
      this.topic,
      this.updated,
      this.updatedAt})
      : super._();

  @override
  GPamrideMessageFilterInput rebuild(
          void Function(GPamrideMessageFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GPamrideMessageFilterInputBuilder toBuilder() =>
      new GPamrideMessageFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GPamrideMessageFilterInput &&
        and == other.and &&
        or == other.or &&
        id == other.id &&
        from == other.from &&
        to == other.to &&
        dateSend == other.dateSend &&
        message == other.message &&
        topic == other.topic &&
        updated == other.updated &&
        updatedAt == other.updatedAt;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, and.hashCode);
    _$hash = $jc(_$hash, or.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, from.hashCode);
    _$hash = $jc(_$hash, to.hashCode);
    _$hash = $jc(_$hash, dateSend.hashCode);
    _$hash = $jc(_$hash, message.hashCode);
    _$hash = $jc(_$hash, topic.hashCode);
    _$hash = $jc(_$hash, updated.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GPamrideMessageFilterInput')
          ..add('and', and)
          ..add('or', or)
          ..add('id', id)
          ..add('from', from)
          ..add('to', to)
          ..add('dateSend', dateSend)
          ..add('message', message)
          ..add('topic', topic)
          ..add('updated', updated)
          ..add('updatedAt', updatedAt))
        .toString();
  }
}

class GPamrideMessageFilterInputBuilder
    implements
        Builder<GPamrideMessageFilterInput, GPamrideMessageFilterInputBuilder> {
  _$GPamrideMessageFilterInput? _$v;

  ListBuilder<GPamrideMessageFilterInput>? _and;
  ListBuilder<GPamrideMessageFilterInput> get and =>
      _$this._and ??= new ListBuilder<GPamrideMessageFilterInput>();
  set and(ListBuilder<GPamrideMessageFilterInput>? and) => _$this._and = and;

  ListBuilder<GPamrideMessageFilterInput>? _or;
  ListBuilder<GPamrideMessageFilterInput> get or =>
      _$this._or ??= new ListBuilder<GPamrideMessageFilterInput>();
  set or(ListBuilder<GPamrideMessageFilterInput>? or) => _$this._or = or;

  GStringOperationFilterInputBuilder? _id;
  GStringOperationFilterInputBuilder get id =>
      _$this._id ??= new GStringOperationFilterInputBuilder();
  set id(GStringOperationFilterInputBuilder? id) => _$this._id = id;

  GStringOperationFilterInputBuilder? _from;
  GStringOperationFilterInputBuilder get from =>
      _$this._from ??= new GStringOperationFilterInputBuilder();
  set from(GStringOperationFilterInputBuilder? from) => _$this._from = from;

  GStringOperationFilterInputBuilder? _to;
  GStringOperationFilterInputBuilder get to =>
      _$this._to ??= new GStringOperationFilterInputBuilder();
  set to(GStringOperationFilterInputBuilder? to) => _$this._to = to;

  GComparableNullableOfDateTimeOperationFilterInputBuilder? _dateSend;
  GComparableNullableOfDateTimeOperationFilterInputBuilder get dateSend =>
      _$this._dateSend ??=
          new GComparableNullableOfDateTimeOperationFilterInputBuilder();
  set dateSend(
          GComparableNullableOfDateTimeOperationFilterInputBuilder? dateSend) =>
      _$this._dateSend = dateSend;

  GStringOperationFilterInputBuilder? _message;
  GStringOperationFilterInputBuilder get message =>
      _$this._message ??= new GStringOperationFilterInputBuilder();
  set message(GStringOperationFilterInputBuilder? message) =>
      _$this._message = message;

  GStringOperationFilterInputBuilder? _topic;
  GStringOperationFilterInputBuilder get topic =>
      _$this._topic ??= new GStringOperationFilterInputBuilder();
  set topic(GStringOperationFilterInputBuilder? topic) => _$this._topic = topic;

  GComparableNullableOfDateTimeOperationFilterInputBuilder? _updated;
  GComparableNullableOfDateTimeOperationFilterInputBuilder get updated =>
      _$this._updated ??=
          new GComparableNullableOfDateTimeOperationFilterInputBuilder();
  set updated(
          GComparableNullableOfDateTimeOperationFilterInputBuilder? updated) =>
      _$this._updated = updated;

  GComparableNullableOfTimeSpanOperationFilterInputBuilder? _updatedAt;
  GComparableNullableOfTimeSpanOperationFilterInputBuilder get updatedAt =>
      _$this._updatedAt ??=
          new GComparableNullableOfTimeSpanOperationFilterInputBuilder();
  set updatedAt(
          GComparableNullableOfTimeSpanOperationFilterInputBuilder?
              updatedAt) =>
      _$this._updatedAt = updatedAt;

  GPamrideMessageFilterInputBuilder();

  GPamrideMessageFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _and = $v.and?.toBuilder();
      _or = $v.or?.toBuilder();
      _id = $v.id?.toBuilder();
      _from = $v.from?.toBuilder();
      _to = $v.to?.toBuilder();
      _dateSend = $v.dateSend?.toBuilder();
      _message = $v.message?.toBuilder();
      _topic = $v.topic?.toBuilder();
      _updated = $v.updated?.toBuilder();
      _updatedAt = $v.updatedAt?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GPamrideMessageFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GPamrideMessageFilterInput;
  }

  @override
  void update(void Function(GPamrideMessageFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GPamrideMessageFilterInput build() => _build();

  _$GPamrideMessageFilterInput _build() {
    _$GPamrideMessageFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GPamrideMessageFilterInput._(
              and: _and?.build(),
              or: _or?.build(),
              id: _id?.build(),
              from: _from?.build(),
              to: _to?.build(),
              dateSend: _dateSend?.build(),
              message: _message?.build(),
              topic: _topic?.build(),
              updated: _updated?.build(),
              updatedAt: _updatedAt?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'and';
        _and?.build();
        _$failedField = 'or';
        _or?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'from';
        _from?.build();
        _$failedField = 'to';
        _to?.build();
        _$failedField = 'dateSend';
        _dateSend?.build();
        _$failedField = 'message';
        _message?.build();
        _$failedField = 'topic';
        _topic?.build();
        _$failedField = 'updated';
        _updated?.build();
        _$failedField = 'updatedAt';
        _updatedAt?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GPamrideMessageFilterInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GPamrideMessageSortInput extends GPamrideMessageSortInput {
  @override
  final GSortEnumType? id;
  @override
  final GSortEnumType? from;
  @override
  final GSortEnumType? to;
  @override
  final GSortEnumType? dateSend;
  @override
  final GSortEnumType? message;
  @override
  final GSortEnumType? topic;
  @override
  final GSortEnumType? updated;
  @override
  final GSortEnumType? updatedAt;

  factory _$GPamrideMessageSortInput(
          [void Function(GPamrideMessageSortInputBuilder)? updates]) =>
      (new GPamrideMessageSortInputBuilder()..update(updates))._build();

  _$GPamrideMessageSortInput._(
      {this.id,
      this.from,
      this.to,
      this.dateSend,
      this.message,
      this.topic,
      this.updated,
      this.updatedAt})
      : super._();

  @override
  GPamrideMessageSortInput rebuild(
          void Function(GPamrideMessageSortInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GPamrideMessageSortInputBuilder toBuilder() =>
      new GPamrideMessageSortInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GPamrideMessageSortInput &&
        id == other.id &&
        from == other.from &&
        to == other.to &&
        dateSend == other.dateSend &&
        message == other.message &&
        topic == other.topic &&
        updated == other.updated &&
        updatedAt == other.updatedAt;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, from.hashCode);
    _$hash = $jc(_$hash, to.hashCode);
    _$hash = $jc(_$hash, dateSend.hashCode);
    _$hash = $jc(_$hash, message.hashCode);
    _$hash = $jc(_$hash, topic.hashCode);
    _$hash = $jc(_$hash, updated.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GPamrideMessageSortInput')
          ..add('id', id)
          ..add('from', from)
          ..add('to', to)
          ..add('dateSend', dateSend)
          ..add('message', message)
          ..add('topic', topic)
          ..add('updated', updated)
          ..add('updatedAt', updatedAt))
        .toString();
  }
}

class GPamrideMessageSortInputBuilder
    implements
        Builder<GPamrideMessageSortInput, GPamrideMessageSortInputBuilder> {
  _$GPamrideMessageSortInput? _$v;

  GSortEnumType? _id;
  GSortEnumType? get id => _$this._id;
  set id(GSortEnumType? id) => _$this._id = id;

  GSortEnumType? _from;
  GSortEnumType? get from => _$this._from;
  set from(GSortEnumType? from) => _$this._from = from;

  GSortEnumType? _to;
  GSortEnumType? get to => _$this._to;
  set to(GSortEnumType? to) => _$this._to = to;

  GSortEnumType? _dateSend;
  GSortEnumType? get dateSend => _$this._dateSend;
  set dateSend(GSortEnumType? dateSend) => _$this._dateSend = dateSend;

  GSortEnumType? _message;
  GSortEnumType? get message => _$this._message;
  set message(GSortEnumType? message) => _$this._message = message;

  GSortEnumType? _topic;
  GSortEnumType? get topic => _$this._topic;
  set topic(GSortEnumType? topic) => _$this._topic = topic;

  GSortEnumType? _updated;
  GSortEnumType? get updated => _$this._updated;
  set updated(GSortEnumType? updated) => _$this._updated = updated;

  GSortEnumType? _updatedAt;
  GSortEnumType? get updatedAt => _$this._updatedAt;
  set updatedAt(GSortEnumType? updatedAt) => _$this._updatedAt = updatedAt;

  GPamrideMessageSortInputBuilder();

  GPamrideMessageSortInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _from = $v.from;
      _to = $v.to;
      _dateSend = $v.dateSend;
      _message = $v.message;
      _topic = $v.topic;
      _updated = $v.updated;
      _updatedAt = $v.updatedAt;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GPamrideMessageSortInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GPamrideMessageSortInput;
  }

  @override
  void update(void Function(GPamrideMessageSortInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GPamrideMessageSortInput build() => _build();

  _$GPamrideMessageSortInput _build() {
    final _$result = _$v ??
        new _$GPamrideMessageSortInput._(
            id: id,
            from: from,
            to: to,
            dateSend: dateSend,
            message: message,
            topic: topic,
            updated: updated,
            updatedAt: updatedAt);
    replace(_$result);
    return _$result;
  }
}

class _$GCarFilterInput extends GCarFilterInput {
  @override
  final BuiltList<GCarFilterInput>? and;
  @override
  final BuiltList<GCarFilterInput>? or;
  @override
  final GStringOperationFilterInput? id;
  @override
  final GStringOperationFilterInput? color;
  @override
  final GStringOperationFilterInput? model;
  @override
  final GStringOperationFilterInput? licensePlate;
  @override
  final GStringOperationFilterInput? imageUrl;
  @override
  final GBooleanOperationFilterInput? active;
  @override
  final GStringOperationFilterInput? ownerId;
  @override
  final GSafiriCarUserFilterInput? owner;
  @override
  final GListFilterInputTypeOfRideFilterInput? rides;

  factory _$GCarFilterInput([void Function(GCarFilterInputBuilder)? updates]) =>
      (new GCarFilterInputBuilder()..update(updates))._build();

  _$GCarFilterInput._(
      {this.and,
      this.or,
      this.id,
      this.color,
      this.model,
      this.licensePlate,
      this.imageUrl,
      this.active,
      this.ownerId,
      this.owner,
      this.rides})
      : super._();

  @override
  GCarFilterInput rebuild(void Function(GCarFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCarFilterInputBuilder toBuilder() =>
      new GCarFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCarFilterInput &&
        and == other.and &&
        or == other.or &&
        id == other.id &&
        color == other.color &&
        model == other.model &&
        licensePlate == other.licensePlate &&
        imageUrl == other.imageUrl &&
        active == other.active &&
        ownerId == other.ownerId &&
        owner == other.owner &&
        rides == other.rides;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, and.hashCode);
    _$hash = $jc(_$hash, or.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, color.hashCode);
    _$hash = $jc(_$hash, model.hashCode);
    _$hash = $jc(_$hash, licensePlate.hashCode);
    _$hash = $jc(_$hash, imageUrl.hashCode);
    _$hash = $jc(_$hash, active.hashCode);
    _$hash = $jc(_$hash, ownerId.hashCode);
    _$hash = $jc(_$hash, owner.hashCode);
    _$hash = $jc(_$hash, rides.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCarFilterInput')
          ..add('and', and)
          ..add('or', or)
          ..add('id', id)
          ..add('color', color)
          ..add('model', model)
          ..add('licensePlate', licensePlate)
          ..add('imageUrl', imageUrl)
          ..add('active', active)
          ..add('ownerId', ownerId)
          ..add('owner', owner)
          ..add('rides', rides))
        .toString();
  }
}

class GCarFilterInputBuilder
    implements Builder<GCarFilterInput, GCarFilterInputBuilder> {
  _$GCarFilterInput? _$v;

  ListBuilder<GCarFilterInput>? _and;
  ListBuilder<GCarFilterInput> get and =>
      _$this._and ??= new ListBuilder<GCarFilterInput>();
  set and(ListBuilder<GCarFilterInput>? and) => _$this._and = and;

  ListBuilder<GCarFilterInput>? _or;
  ListBuilder<GCarFilterInput> get or =>
      _$this._or ??= new ListBuilder<GCarFilterInput>();
  set or(ListBuilder<GCarFilterInput>? or) => _$this._or = or;

  GStringOperationFilterInputBuilder? _id;
  GStringOperationFilterInputBuilder get id =>
      _$this._id ??= new GStringOperationFilterInputBuilder();
  set id(GStringOperationFilterInputBuilder? id) => _$this._id = id;

  GStringOperationFilterInputBuilder? _color;
  GStringOperationFilterInputBuilder get color =>
      _$this._color ??= new GStringOperationFilterInputBuilder();
  set color(GStringOperationFilterInputBuilder? color) => _$this._color = color;

  GStringOperationFilterInputBuilder? _model;
  GStringOperationFilterInputBuilder get model =>
      _$this._model ??= new GStringOperationFilterInputBuilder();
  set model(GStringOperationFilterInputBuilder? model) => _$this._model = model;

  GStringOperationFilterInputBuilder? _licensePlate;
  GStringOperationFilterInputBuilder get licensePlate =>
      _$this._licensePlate ??= new GStringOperationFilterInputBuilder();
  set licensePlate(GStringOperationFilterInputBuilder? licensePlate) =>
      _$this._licensePlate = licensePlate;

  GStringOperationFilterInputBuilder? _imageUrl;
  GStringOperationFilterInputBuilder get imageUrl =>
      _$this._imageUrl ??= new GStringOperationFilterInputBuilder();
  set imageUrl(GStringOperationFilterInputBuilder? imageUrl) =>
      _$this._imageUrl = imageUrl;

  GBooleanOperationFilterInputBuilder? _active;
  GBooleanOperationFilterInputBuilder get active =>
      _$this._active ??= new GBooleanOperationFilterInputBuilder();
  set active(GBooleanOperationFilterInputBuilder? active) =>
      _$this._active = active;

  GStringOperationFilterInputBuilder? _ownerId;
  GStringOperationFilterInputBuilder get ownerId =>
      _$this._ownerId ??= new GStringOperationFilterInputBuilder();
  set ownerId(GStringOperationFilterInputBuilder? ownerId) =>
      _$this._ownerId = ownerId;

  GSafiriCarUserFilterInputBuilder? _owner;
  GSafiriCarUserFilterInputBuilder get owner =>
      _$this._owner ??= new GSafiriCarUserFilterInputBuilder();
  set owner(GSafiriCarUserFilterInputBuilder? owner) => _$this._owner = owner;

  GListFilterInputTypeOfRideFilterInputBuilder? _rides;
  GListFilterInputTypeOfRideFilterInputBuilder get rides =>
      _$this._rides ??= new GListFilterInputTypeOfRideFilterInputBuilder();
  set rides(GListFilterInputTypeOfRideFilterInputBuilder? rides) =>
      _$this._rides = rides;

  GCarFilterInputBuilder();

  GCarFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _and = $v.and?.toBuilder();
      _or = $v.or?.toBuilder();
      _id = $v.id?.toBuilder();
      _color = $v.color?.toBuilder();
      _model = $v.model?.toBuilder();
      _licensePlate = $v.licensePlate?.toBuilder();
      _imageUrl = $v.imageUrl?.toBuilder();
      _active = $v.active?.toBuilder();
      _ownerId = $v.ownerId?.toBuilder();
      _owner = $v.owner?.toBuilder();
      _rides = $v.rides?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCarFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCarFilterInput;
  }

  @override
  void update(void Function(GCarFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCarFilterInput build() => _build();

  _$GCarFilterInput _build() {
    _$GCarFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GCarFilterInput._(
              and: _and?.build(),
              or: _or?.build(),
              id: _id?.build(),
              color: _color?.build(),
              model: _model?.build(),
              licensePlate: _licensePlate?.build(),
              imageUrl: _imageUrl?.build(),
              active: _active?.build(),
              ownerId: _ownerId?.build(),
              owner: _owner?.build(),
              rides: _rides?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'and';
        _and?.build();
        _$failedField = 'or';
        _or?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'color';
        _color?.build();
        _$failedField = 'model';
        _model?.build();
        _$failedField = 'licensePlate';
        _licensePlate?.build();
        _$failedField = 'imageUrl';
        _imageUrl?.build();
        _$failedField = 'active';
        _active?.build();
        _$failedField = 'ownerId';
        _ownerId?.build();
        _$failedField = 'owner';
        _owner?.build();
        _$failedField = 'rides';
        _rides?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCarFilterInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCarSortInput extends GCarSortInput {
  @override
  final GSortEnumType? id;
  @override
  final GSortEnumType? color;
  @override
  final GSortEnumType? model;
  @override
  final GSortEnumType? licensePlate;
  @override
  final GSortEnumType? imageUrl;
  @override
  final GSortEnumType? active;
  @override
  final GSortEnumType? ownerId;
  @override
  final GSafiriCarUserSortInput? owner;

  factory _$GCarSortInput([void Function(GCarSortInputBuilder)? updates]) =>
      (new GCarSortInputBuilder()..update(updates))._build();

  _$GCarSortInput._(
      {this.id,
      this.color,
      this.model,
      this.licensePlate,
      this.imageUrl,
      this.active,
      this.ownerId,
      this.owner})
      : super._();

  @override
  GCarSortInput rebuild(void Function(GCarSortInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCarSortInputBuilder toBuilder() => new GCarSortInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCarSortInput &&
        id == other.id &&
        color == other.color &&
        model == other.model &&
        licensePlate == other.licensePlate &&
        imageUrl == other.imageUrl &&
        active == other.active &&
        ownerId == other.ownerId &&
        owner == other.owner;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, color.hashCode);
    _$hash = $jc(_$hash, model.hashCode);
    _$hash = $jc(_$hash, licensePlate.hashCode);
    _$hash = $jc(_$hash, imageUrl.hashCode);
    _$hash = $jc(_$hash, active.hashCode);
    _$hash = $jc(_$hash, ownerId.hashCode);
    _$hash = $jc(_$hash, owner.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCarSortInput')
          ..add('id', id)
          ..add('color', color)
          ..add('model', model)
          ..add('licensePlate', licensePlate)
          ..add('imageUrl', imageUrl)
          ..add('active', active)
          ..add('ownerId', ownerId)
          ..add('owner', owner))
        .toString();
  }
}

class GCarSortInputBuilder
    implements Builder<GCarSortInput, GCarSortInputBuilder> {
  _$GCarSortInput? _$v;

  GSortEnumType? _id;
  GSortEnumType? get id => _$this._id;
  set id(GSortEnumType? id) => _$this._id = id;

  GSortEnumType? _color;
  GSortEnumType? get color => _$this._color;
  set color(GSortEnumType? color) => _$this._color = color;

  GSortEnumType? _model;
  GSortEnumType? get model => _$this._model;
  set model(GSortEnumType? model) => _$this._model = model;

  GSortEnumType? _licensePlate;
  GSortEnumType? get licensePlate => _$this._licensePlate;
  set licensePlate(GSortEnumType? licensePlate) =>
      _$this._licensePlate = licensePlate;

  GSortEnumType? _imageUrl;
  GSortEnumType? get imageUrl => _$this._imageUrl;
  set imageUrl(GSortEnumType? imageUrl) => _$this._imageUrl = imageUrl;

  GSortEnumType? _active;
  GSortEnumType? get active => _$this._active;
  set active(GSortEnumType? active) => _$this._active = active;

  GSortEnumType? _ownerId;
  GSortEnumType? get ownerId => _$this._ownerId;
  set ownerId(GSortEnumType? ownerId) => _$this._ownerId = ownerId;

  GSafiriCarUserSortInputBuilder? _owner;
  GSafiriCarUserSortInputBuilder get owner =>
      _$this._owner ??= new GSafiriCarUserSortInputBuilder();
  set owner(GSafiriCarUserSortInputBuilder? owner) => _$this._owner = owner;

  GCarSortInputBuilder();

  GCarSortInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _color = $v.color;
      _model = $v.model;
      _licensePlate = $v.licensePlate;
      _imageUrl = $v.imageUrl;
      _active = $v.active;
      _ownerId = $v.ownerId;
      _owner = $v.owner?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCarSortInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCarSortInput;
  }

  @override
  void update(void Function(GCarSortInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCarSortInput build() => _build();

  _$GCarSortInput _build() {
    _$GCarSortInput _$result;
    try {
      _$result = _$v ??
          new _$GCarSortInput._(
              id: id,
              color: color,
              model: model,
              licensePlate: licensePlate,
              imageUrl: imageUrl,
              active: active,
              ownerId: ownerId,
              owner: _owner?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'owner';
        _owner?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCarSortInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GStringOperationFilterInput extends GStringOperationFilterInput {
  @override
  final BuiltList<GStringOperationFilterInput>? and;
  @override
  final BuiltList<GStringOperationFilterInput>? or;
  @override
  final String? eq;
  @override
  final String? neq;
  @override
  final String? contains;
  @override
  final String? ncontains;
  @override
  final BuiltList<String>? Gin;
  @override
  final BuiltList<String>? nin;
  @override
  final String? startsWith;
  @override
  final String? nstartsWith;
  @override
  final String? endsWith;
  @override
  final String? nendsWith;

  factory _$GStringOperationFilterInput(
          [void Function(GStringOperationFilterInputBuilder)? updates]) =>
      (new GStringOperationFilterInputBuilder()..update(updates))._build();

  _$GStringOperationFilterInput._(
      {this.and,
      this.or,
      this.eq,
      this.neq,
      this.contains,
      this.ncontains,
      this.Gin,
      this.nin,
      this.startsWith,
      this.nstartsWith,
      this.endsWith,
      this.nendsWith})
      : super._();

  @override
  GStringOperationFilterInput rebuild(
          void Function(GStringOperationFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GStringOperationFilterInputBuilder toBuilder() =>
      new GStringOperationFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GStringOperationFilterInput &&
        and == other.and &&
        or == other.or &&
        eq == other.eq &&
        neq == other.neq &&
        contains == other.contains &&
        ncontains == other.ncontains &&
        Gin == other.Gin &&
        nin == other.nin &&
        startsWith == other.startsWith &&
        nstartsWith == other.nstartsWith &&
        endsWith == other.endsWith &&
        nendsWith == other.nendsWith;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, and.hashCode);
    _$hash = $jc(_$hash, or.hashCode);
    _$hash = $jc(_$hash, eq.hashCode);
    _$hash = $jc(_$hash, neq.hashCode);
    _$hash = $jc(_$hash, contains.hashCode);
    _$hash = $jc(_$hash, ncontains.hashCode);
    _$hash = $jc(_$hash, Gin.hashCode);
    _$hash = $jc(_$hash, nin.hashCode);
    _$hash = $jc(_$hash, startsWith.hashCode);
    _$hash = $jc(_$hash, nstartsWith.hashCode);
    _$hash = $jc(_$hash, endsWith.hashCode);
    _$hash = $jc(_$hash, nendsWith.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GStringOperationFilterInput')
          ..add('and', and)
          ..add('or', or)
          ..add('eq', eq)
          ..add('neq', neq)
          ..add('contains', contains)
          ..add('ncontains', ncontains)
          ..add('Gin', Gin)
          ..add('nin', nin)
          ..add('startsWith', startsWith)
          ..add('nstartsWith', nstartsWith)
          ..add('endsWith', endsWith)
          ..add('nendsWith', nendsWith))
        .toString();
  }
}

class GStringOperationFilterInputBuilder
    implements
        Builder<GStringOperationFilterInput,
            GStringOperationFilterInputBuilder> {
  _$GStringOperationFilterInput? _$v;

  ListBuilder<GStringOperationFilterInput>? _and;
  ListBuilder<GStringOperationFilterInput> get and =>
      _$this._and ??= new ListBuilder<GStringOperationFilterInput>();
  set and(ListBuilder<GStringOperationFilterInput>? and) => _$this._and = and;

  ListBuilder<GStringOperationFilterInput>? _or;
  ListBuilder<GStringOperationFilterInput> get or =>
      _$this._or ??= new ListBuilder<GStringOperationFilterInput>();
  set or(ListBuilder<GStringOperationFilterInput>? or) => _$this._or = or;

  String? _eq;
  String? get eq => _$this._eq;
  set eq(String? eq) => _$this._eq = eq;

  String? _neq;
  String? get neq => _$this._neq;
  set neq(String? neq) => _$this._neq = neq;

  String? _contains;
  String? get contains => _$this._contains;
  set contains(String? contains) => _$this._contains = contains;

  String? _ncontains;
  String? get ncontains => _$this._ncontains;
  set ncontains(String? ncontains) => _$this._ncontains = ncontains;

  ListBuilder<String>? _Gin;
  ListBuilder<String> get Gin => _$this._Gin ??= new ListBuilder<String>();
  set Gin(ListBuilder<String>? Gin) => _$this._Gin = Gin;

  ListBuilder<String>? _nin;
  ListBuilder<String> get nin => _$this._nin ??= new ListBuilder<String>();
  set nin(ListBuilder<String>? nin) => _$this._nin = nin;

  String? _startsWith;
  String? get startsWith => _$this._startsWith;
  set startsWith(String? startsWith) => _$this._startsWith = startsWith;

  String? _nstartsWith;
  String? get nstartsWith => _$this._nstartsWith;
  set nstartsWith(String? nstartsWith) => _$this._nstartsWith = nstartsWith;

  String? _endsWith;
  String? get endsWith => _$this._endsWith;
  set endsWith(String? endsWith) => _$this._endsWith = endsWith;

  String? _nendsWith;
  String? get nendsWith => _$this._nendsWith;
  set nendsWith(String? nendsWith) => _$this._nendsWith = nendsWith;

  GStringOperationFilterInputBuilder();

  GStringOperationFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _and = $v.and?.toBuilder();
      _or = $v.or?.toBuilder();
      _eq = $v.eq;
      _neq = $v.neq;
      _contains = $v.contains;
      _ncontains = $v.ncontains;
      _Gin = $v.Gin?.toBuilder();
      _nin = $v.nin?.toBuilder();
      _startsWith = $v.startsWith;
      _nstartsWith = $v.nstartsWith;
      _endsWith = $v.endsWith;
      _nendsWith = $v.nendsWith;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GStringOperationFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GStringOperationFilterInput;
  }

  @override
  void update(void Function(GStringOperationFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GStringOperationFilterInput build() => _build();

  _$GStringOperationFilterInput _build() {
    _$GStringOperationFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GStringOperationFilterInput._(
              and: _and?.build(),
              or: _or?.build(),
              eq: eq,
              neq: neq,
              contains: contains,
              ncontains: ncontains,
              Gin: _Gin?.build(),
              nin: _nin?.build(),
              startsWith: startsWith,
              nstartsWith: nstartsWith,
              endsWith: endsWith,
              nendsWith: nendsWith);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'and';
        _and?.build();
        _$failedField = 'or';
        _or?.build();

        _$failedField = 'Gin';
        _Gin?.build();
        _$failedField = 'nin';
        _nin?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GStringOperationFilterInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GListFilterInputTypeOfCarFilterInput
    extends GListFilterInputTypeOfCarFilterInput {
  @override
  final GCarFilterInput? all;
  @override
  final GCarFilterInput? none;
  @override
  final GCarFilterInput? some;
  @override
  final bool? any;

  factory _$GListFilterInputTypeOfCarFilterInput(
          [void Function(GListFilterInputTypeOfCarFilterInputBuilder)?
              updates]) =>
      (new GListFilterInputTypeOfCarFilterInputBuilder()..update(updates))
          ._build();

  _$GListFilterInputTypeOfCarFilterInput._(
      {this.all, this.none, this.some, this.any})
      : super._();

  @override
  GListFilterInputTypeOfCarFilterInput rebuild(
          void Function(GListFilterInputTypeOfCarFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GListFilterInputTypeOfCarFilterInputBuilder toBuilder() =>
      new GListFilterInputTypeOfCarFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GListFilterInputTypeOfCarFilterInput &&
        all == other.all &&
        none == other.none &&
        some == other.some &&
        any == other.any;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, all.hashCode);
    _$hash = $jc(_$hash, none.hashCode);
    _$hash = $jc(_$hash, some.hashCode);
    _$hash = $jc(_$hash, any.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GListFilterInputTypeOfCarFilterInput')
          ..add('all', all)
          ..add('none', none)
          ..add('some', some)
          ..add('any', any))
        .toString();
  }
}

class GListFilterInputTypeOfCarFilterInputBuilder
    implements
        Builder<GListFilterInputTypeOfCarFilterInput,
            GListFilterInputTypeOfCarFilterInputBuilder> {
  _$GListFilterInputTypeOfCarFilterInput? _$v;

  GCarFilterInputBuilder? _all;
  GCarFilterInputBuilder get all =>
      _$this._all ??= new GCarFilterInputBuilder();
  set all(GCarFilterInputBuilder? all) => _$this._all = all;

  GCarFilterInputBuilder? _none;
  GCarFilterInputBuilder get none =>
      _$this._none ??= new GCarFilterInputBuilder();
  set none(GCarFilterInputBuilder? none) => _$this._none = none;

  GCarFilterInputBuilder? _some;
  GCarFilterInputBuilder get some =>
      _$this._some ??= new GCarFilterInputBuilder();
  set some(GCarFilterInputBuilder? some) => _$this._some = some;

  bool? _any;
  bool? get any => _$this._any;
  set any(bool? any) => _$this._any = any;

  GListFilterInputTypeOfCarFilterInputBuilder();

  GListFilterInputTypeOfCarFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _all = $v.all?.toBuilder();
      _none = $v.none?.toBuilder();
      _some = $v.some?.toBuilder();
      _any = $v.any;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GListFilterInputTypeOfCarFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GListFilterInputTypeOfCarFilterInput;
  }

  @override
  void update(
      void Function(GListFilterInputTypeOfCarFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GListFilterInputTypeOfCarFilterInput build() => _build();

  _$GListFilterInputTypeOfCarFilterInput _build() {
    _$GListFilterInputTypeOfCarFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GListFilterInputTypeOfCarFilterInput._(
              all: _all?.build(),
              none: _none?.build(),
              some: _some?.build(),
              any: any);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'all';
        _all?.build();
        _$failedField = 'none';
        _none?.build();
        _$failedField = 'some';
        _some?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GListFilterInputTypeOfCarFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GIdentificationDocumentFilterInput
    extends GIdentificationDocumentFilterInput {
  @override
  final BuiltList<GIdentificationDocumentFilterInput>? and;
  @override
  final BuiltList<GIdentificationDocumentFilterInput>? or;
  @override
  final GComparableInt32OperationFilterInput? id;
  @override
  final GStringOperationFilterInput? nationalIdFront;
  @override
  final GStringOperationFilterInput? nationalIdRear;
  @override
  final GStringOperationFilterInput? drivingLicenceFront;
  @override
  final GStringOperationFilterInput? drivingLicenceRear;

  factory _$GIdentificationDocumentFilterInput(
          [void Function(GIdentificationDocumentFilterInputBuilder)?
              updates]) =>
      (new GIdentificationDocumentFilterInputBuilder()..update(updates))
          ._build();

  _$GIdentificationDocumentFilterInput._(
      {this.and,
      this.or,
      this.id,
      this.nationalIdFront,
      this.nationalIdRear,
      this.drivingLicenceFront,
      this.drivingLicenceRear})
      : super._();

  @override
  GIdentificationDocumentFilterInput rebuild(
          void Function(GIdentificationDocumentFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GIdentificationDocumentFilterInputBuilder toBuilder() =>
      new GIdentificationDocumentFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GIdentificationDocumentFilterInput &&
        and == other.and &&
        or == other.or &&
        id == other.id &&
        nationalIdFront == other.nationalIdFront &&
        nationalIdRear == other.nationalIdRear &&
        drivingLicenceFront == other.drivingLicenceFront &&
        drivingLicenceRear == other.drivingLicenceRear;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, and.hashCode);
    _$hash = $jc(_$hash, or.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, nationalIdFront.hashCode);
    _$hash = $jc(_$hash, nationalIdRear.hashCode);
    _$hash = $jc(_$hash, drivingLicenceFront.hashCode);
    _$hash = $jc(_$hash, drivingLicenceRear.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GIdentificationDocumentFilterInput')
          ..add('and', and)
          ..add('or', or)
          ..add('id', id)
          ..add('nationalIdFront', nationalIdFront)
          ..add('nationalIdRear', nationalIdRear)
          ..add('drivingLicenceFront', drivingLicenceFront)
          ..add('drivingLicenceRear', drivingLicenceRear))
        .toString();
  }
}

class GIdentificationDocumentFilterInputBuilder
    implements
        Builder<GIdentificationDocumentFilterInput,
            GIdentificationDocumentFilterInputBuilder> {
  _$GIdentificationDocumentFilterInput? _$v;

  ListBuilder<GIdentificationDocumentFilterInput>? _and;
  ListBuilder<GIdentificationDocumentFilterInput> get and =>
      _$this._and ??= new ListBuilder<GIdentificationDocumentFilterInput>();
  set and(ListBuilder<GIdentificationDocumentFilterInput>? and) =>
      _$this._and = and;

  ListBuilder<GIdentificationDocumentFilterInput>? _or;
  ListBuilder<GIdentificationDocumentFilterInput> get or =>
      _$this._or ??= new ListBuilder<GIdentificationDocumentFilterInput>();
  set or(ListBuilder<GIdentificationDocumentFilterInput>? or) =>
      _$this._or = or;

  GComparableInt32OperationFilterInputBuilder? _id;
  GComparableInt32OperationFilterInputBuilder get id =>
      _$this._id ??= new GComparableInt32OperationFilterInputBuilder();
  set id(GComparableInt32OperationFilterInputBuilder? id) => _$this._id = id;

  GStringOperationFilterInputBuilder? _nationalIdFront;
  GStringOperationFilterInputBuilder get nationalIdFront =>
      _$this._nationalIdFront ??= new GStringOperationFilterInputBuilder();
  set nationalIdFront(GStringOperationFilterInputBuilder? nationalIdFront) =>
      _$this._nationalIdFront = nationalIdFront;

  GStringOperationFilterInputBuilder? _nationalIdRear;
  GStringOperationFilterInputBuilder get nationalIdRear =>
      _$this._nationalIdRear ??= new GStringOperationFilterInputBuilder();
  set nationalIdRear(GStringOperationFilterInputBuilder? nationalIdRear) =>
      _$this._nationalIdRear = nationalIdRear;

  GStringOperationFilterInputBuilder? _drivingLicenceFront;
  GStringOperationFilterInputBuilder get drivingLicenceFront =>
      _$this._drivingLicenceFront ??= new GStringOperationFilterInputBuilder();
  set drivingLicenceFront(
          GStringOperationFilterInputBuilder? drivingLicenceFront) =>
      _$this._drivingLicenceFront = drivingLicenceFront;

  GStringOperationFilterInputBuilder? _drivingLicenceRear;
  GStringOperationFilterInputBuilder get drivingLicenceRear =>
      _$this._drivingLicenceRear ??= new GStringOperationFilterInputBuilder();
  set drivingLicenceRear(
          GStringOperationFilterInputBuilder? drivingLicenceRear) =>
      _$this._drivingLicenceRear = drivingLicenceRear;

  GIdentificationDocumentFilterInputBuilder();

  GIdentificationDocumentFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _and = $v.and?.toBuilder();
      _or = $v.or?.toBuilder();
      _id = $v.id?.toBuilder();
      _nationalIdFront = $v.nationalIdFront?.toBuilder();
      _nationalIdRear = $v.nationalIdRear?.toBuilder();
      _drivingLicenceFront = $v.drivingLicenceFront?.toBuilder();
      _drivingLicenceRear = $v.drivingLicenceRear?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GIdentificationDocumentFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GIdentificationDocumentFilterInput;
  }

  @override
  void update(
      void Function(GIdentificationDocumentFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GIdentificationDocumentFilterInput build() => _build();

  _$GIdentificationDocumentFilterInput _build() {
    _$GIdentificationDocumentFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GIdentificationDocumentFilterInput._(
              and: _and?.build(),
              or: _or?.build(),
              id: _id?.build(),
              nationalIdFront: _nationalIdFront?.build(),
              nationalIdRear: _nationalIdRear?.build(),
              drivingLicenceFront: _drivingLicenceFront?.build(),
              drivingLicenceRear: _drivingLicenceRear?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'and';
        _and?.build();
        _$failedField = 'or';
        _or?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'nationalIdFront';
        _nationalIdFront?.build();
        _$failedField = 'nationalIdRear';
        _nationalIdRear?.build();
        _$failedField = 'drivingLicenceFront';
        _drivingLicenceFront?.build();
        _$failedField = 'drivingLicenceRear';
        _drivingLicenceRear?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GIdentificationDocumentFilterInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GComparableNullableOfDateTimeOperationFilterInput
    extends GComparableNullableOfDateTimeOperationFilterInput {
  @override
  final GDateTime? eq;
  @override
  final GDateTime? neq;
  @override
  final BuiltList<GDateTime>? Gin;
  @override
  final BuiltList<GDateTime>? nin;
  @override
  final GDateTime? gt;
  @override
  final GDateTime? ngt;
  @override
  final GDateTime? gte;
  @override
  final GDateTime? ngte;
  @override
  final GDateTime? lt;
  @override
  final GDateTime? nlt;
  @override
  final GDateTime? lte;
  @override
  final GDateTime? nlte;

  factory _$GComparableNullableOfDateTimeOperationFilterInput(
          [void Function(
                  GComparableNullableOfDateTimeOperationFilterInputBuilder)?
              updates]) =>
      (new GComparableNullableOfDateTimeOperationFilterInputBuilder()
            ..update(updates))
          ._build();

  _$GComparableNullableOfDateTimeOperationFilterInput._(
      {this.eq,
      this.neq,
      this.Gin,
      this.nin,
      this.gt,
      this.ngt,
      this.gte,
      this.ngte,
      this.lt,
      this.nlt,
      this.lte,
      this.nlte})
      : super._();

  @override
  GComparableNullableOfDateTimeOperationFilterInput rebuild(
          void Function(
                  GComparableNullableOfDateTimeOperationFilterInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GComparableNullableOfDateTimeOperationFilterInputBuilder toBuilder() =>
      new GComparableNullableOfDateTimeOperationFilterInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GComparableNullableOfDateTimeOperationFilterInput &&
        eq == other.eq &&
        neq == other.neq &&
        Gin == other.Gin &&
        nin == other.nin &&
        gt == other.gt &&
        ngt == other.ngt &&
        gte == other.gte &&
        ngte == other.ngte &&
        lt == other.lt &&
        nlt == other.nlt &&
        lte == other.lte &&
        nlte == other.nlte;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, eq.hashCode);
    _$hash = $jc(_$hash, neq.hashCode);
    _$hash = $jc(_$hash, Gin.hashCode);
    _$hash = $jc(_$hash, nin.hashCode);
    _$hash = $jc(_$hash, gt.hashCode);
    _$hash = $jc(_$hash, ngt.hashCode);
    _$hash = $jc(_$hash, gte.hashCode);
    _$hash = $jc(_$hash, ngte.hashCode);
    _$hash = $jc(_$hash, lt.hashCode);
    _$hash = $jc(_$hash, nlt.hashCode);
    _$hash = $jc(_$hash, lte.hashCode);
    _$hash = $jc(_$hash, nlte.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GComparableNullableOfDateTimeOperationFilterInput')
          ..add('eq', eq)
          ..add('neq', neq)
          ..add('Gin', Gin)
          ..add('nin', nin)
          ..add('gt', gt)
          ..add('ngt', ngt)
          ..add('gte', gte)
          ..add('ngte', ngte)
          ..add('lt', lt)
          ..add('nlt', nlt)
          ..add('lte', lte)
          ..add('nlte', nlte))
        .toString();
  }
}

class GComparableNullableOfDateTimeOperationFilterInputBuilder
    implements
        Builder<GComparableNullableOfDateTimeOperationFilterInput,
            GComparableNullableOfDateTimeOperationFilterInputBuilder> {
  _$GComparableNullableOfDateTimeOperationFilterInput? _$v;

  GDateTimeBuilder? _eq;
  GDateTimeBuilder get eq => _$this._eq ??= new GDateTimeBuilder();
  set eq(GDateTimeBuilder? eq) => _$this._eq = eq;

  GDateTimeBuilder? _neq;
  GDateTimeBuilder get neq => _$this._neq ??= new GDateTimeBuilder();
  set neq(GDateTimeBuilder? neq) => _$this._neq = neq;

  ListBuilder<GDateTime>? _Gin;
  ListBuilder<GDateTime> get Gin =>
      _$this._Gin ??= new ListBuilder<GDateTime>();
  set Gin(ListBuilder<GDateTime>? Gin) => _$this._Gin = Gin;

  ListBuilder<GDateTime>? _nin;
  ListBuilder<GDateTime> get nin =>
      _$this._nin ??= new ListBuilder<GDateTime>();
  set nin(ListBuilder<GDateTime>? nin) => _$this._nin = nin;

  GDateTimeBuilder? _gt;
  GDateTimeBuilder get gt => _$this._gt ??= new GDateTimeBuilder();
  set gt(GDateTimeBuilder? gt) => _$this._gt = gt;

  GDateTimeBuilder? _ngt;
  GDateTimeBuilder get ngt => _$this._ngt ??= new GDateTimeBuilder();
  set ngt(GDateTimeBuilder? ngt) => _$this._ngt = ngt;

  GDateTimeBuilder? _gte;
  GDateTimeBuilder get gte => _$this._gte ??= new GDateTimeBuilder();
  set gte(GDateTimeBuilder? gte) => _$this._gte = gte;

  GDateTimeBuilder? _ngte;
  GDateTimeBuilder get ngte => _$this._ngte ??= new GDateTimeBuilder();
  set ngte(GDateTimeBuilder? ngte) => _$this._ngte = ngte;

  GDateTimeBuilder? _lt;
  GDateTimeBuilder get lt => _$this._lt ??= new GDateTimeBuilder();
  set lt(GDateTimeBuilder? lt) => _$this._lt = lt;

  GDateTimeBuilder? _nlt;
  GDateTimeBuilder get nlt => _$this._nlt ??= new GDateTimeBuilder();
  set nlt(GDateTimeBuilder? nlt) => _$this._nlt = nlt;

  GDateTimeBuilder? _lte;
  GDateTimeBuilder get lte => _$this._lte ??= new GDateTimeBuilder();
  set lte(GDateTimeBuilder? lte) => _$this._lte = lte;

  GDateTimeBuilder? _nlte;
  GDateTimeBuilder get nlte => _$this._nlte ??= new GDateTimeBuilder();
  set nlte(GDateTimeBuilder? nlte) => _$this._nlte = nlte;

  GComparableNullableOfDateTimeOperationFilterInputBuilder();

  GComparableNullableOfDateTimeOperationFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _eq = $v.eq?.toBuilder();
      _neq = $v.neq?.toBuilder();
      _Gin = $v.Gin?.toBuilder();
      _nin = $v.nin?.toBuilder();
      _gt = $v.gt?.toBuilder();
      _ngt = $v.ngt?.toBuilder();
      _gte = $v.gte?.toBuilder();
      _ngte = $v.ngte?.toBuilder();
      _lt = $v.lt?.toBuilder();
      _nlt = $v.nlt?.toBuilder();
      _lte = $v.lte?.toBuilder();
      _nlte = $v.nlte?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GComparableNullableOfDateTimeOperationFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GComparableNullableOfDateTimeOperationFilterInput;
  }

  @override
  void update(
      void Function(GComparableNullableOfDateTimeOperationFilterInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GComparableNullableOfDateTimeOperationFilterInput build() => _build();

  _$GComparableNullableOfDateTimeOperationFilterInput _build() {
    _$GComparableNullableOfDateTimeOperationFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GComparableNullableOfDateTimeOperationFilterInput._(
              eq: _eq?.build(),
              neq: _neq?.build(),
              Gin: _Gin?.build(),
              nin: _nin?.build(),
              gt: _gt?.build(),
              ngt: _ngt?.build(),
              gte: _gte?.build(),
              ngte: _ngte?.build(),
              lt: _lt?.build(),
              nlt: _nlt?.build(),
              lte: _lte?.build(),
              nlte: _nlte?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'eq';
        _eq?.build();
        _$failedField = 'neq';
        _neq?.build();
        _$failedField = 'Gin';
        _Gin?.build();
        _$failedField = 'nin';
        _nin?.build();
        _$failedField = 'gt';
        _gt?.build();
        _$failedField = 'ngt';
        _ngt?.build();
        _$failedField = 'gte';
        _gte?.build();
        _$failedField = 'ngte';
        _ngte?.build();
        _$failedField = 'lt';
        _lt?.build();
        _$failedField = 'nlt';
        _nlt?.build();
        _$failedField = 'lte';
        _lte?.build();
        _$failedField = 'nlte';
        _nlte?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GComparableNullableOfDateTimeOperationFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GBooleanOperationFilterInput extends GBooleanOperationFilterInput {
  @override
  final bool? eq;
  @override
  final bool? neq;

  factory _$GBooleanOperationFilterInput(
          [void Function(GBooleanOperationFilterInputBuilder)? updates]) =>
      (new GBooleanOperationFilterInputBuilder()..update(updates))._build();

  _$GBooleanOperationFilterInput._({this.eq, this.neq}) : super._();

  @override
  GBooleanOperationFilterInput rebuild(
          void Function(GBooleanOperationFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GBooleanOperationFilterInputBuilder toBuilder() =>
      new GBooleanOperationFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GBooleanOperationFilterInput &&
        eq == other.eq &&
        neq == other.neq;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, eq.hashCode);
    _$hash = $jc(_$hash, neq.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GBooleanOperationFilterInput')
          ..add('eq', eq)
          ..add('neq', neq))
        .toString();
  }
}

class GBooleanOperationFilterInputBuilder
    implements
        Builder<GBooleanOperationFilterInput,
            GBooleanOperationFilterInputBuilder> {
  _$GBooleanOperationFilterInput? _$v;

  bool? _eq;
  bool? get eq => _$this._eq;
  set eq(bool? eq) => _$this._eq = eq;

  bool? _neq;
  bool? get neq => _$this._neq;
  set neq(bool? neq) => _$this._neq = neq;

  GBooleanOperationFilterInputBuilder();

  GBooleanOperationFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _eq = $v.eq;
      _neq = $v.neq;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GBooleanOperationFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GBooleanOperationFilterInput;
  }

  @override
  void update(void Function(GBooleanOperationFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GBooleanOperationFilterInput build() => _build();

  _$GBooleanOperationFilterInput _build() {
    final _$result =
        _$v ?? new _$GBooleanOperationFilterInput._(eq: eq, neq: neq);
    replace(_$result);
    return _$result;
  }
}

class _$GComparableInt32OperationFilterInput
    extends GComparableInt32OperationFilterInput {
  @override
  final int? eq;
  @override
  final int? neq;
  @override
  final BuiltList<int>? Gin;
  @override
  final BuiltList<int>? nin;
  @override
  final int? gt;
  @override
  final int? ngt;
  @override
  final int? gte;
  @override
  final int? ngte;
  @override
  final int? lt;
  @override
  final int? nlt;
  @override
  final int? lte;
  @override
  final int? nlte;

  factory _$GComparableInt32OperationFilterInput(
          [void Function(GComparableInt32OperationFilterInputBuilder)?
              updates]) =>
      (new GComparableInt32OperationFilterInputBuilder()..update(updates))
          ._build();

  _$GComparableInt32OperationFilterInput._(
      {this.eq,
      this.neq,
      this.Gin,
      this.nin,
      this.gt,
      this.ngt,
      this.gte,
      this.ngte,
      this.lt,
      this.nlt,
      this.lte,
      this.nlte})
      : super._();

  @override
  GComparableInt32OperationFilterInput rebuild(
          void Function(GComparableInt32OperationFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GComparableInt32OperationFilterInputBuilder toBuilder() =>
      new GComparableInt32OperationFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GComparableInt32OperationFilterInput &&
        eq == other.eq &&
        neq == other.neq &&
        Gin == other.Gin &&
        nin == other.nin &&
        gt == other.gt &&
        ngt == other.ngt &&
        gte == other.gte &&
        ngte == other.ngte &&
        lt == other.lt &&
        nlt == other.nlt &&
        lte == other.lte &&
        nlte == other.nlte;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, eq.hashCode);
    _$hash = $jc(_$hash, neq.hashCode);
    _$hash = $jc(_$hash, Gin.hashCode);
    _$hash = $jc(_$hash, nin.hashCode);
    _$hash = $jc(_$hash, gt.hashCode);
    _$hash = $jc(_$hash, ngt.hashCode);
    _$hash = $jc(_$hash, gte.hashCode);
    _$hash = $jc(_$hash, ngte.hashCode);
    _$hash = $jc(_$hash, lt.hashCode);
    _$hash = $jc(_$hash, nlt.hashCode);
    _$hash = $jc(_$hash, lte.hashCode);
    _$hash = $jc(_$hash, nlte.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GComparableInt32OperationFilterInput')
          ..add('eq', eq)
          ..add('neq', neq)
          ..add('Gin', Gin)
          ..add('nin', nin)
          ..add('gt', gt)
          ..add('ngt', ngt)
          ..add('gte', gte)
          ..add('ngte', ngte)
          ..add('lt', lt)
          ..add('nlt', nlt)
          ..add('lte', lte)
          ..add('nlte', nlte))
        .toString();
  }
}

class GComparableInt32OperationFilterInputBuilder
    implements
        Builder<GComparableInt32OperationFilterInput,
            GComparableInt32OperationFilterInputBuilder> {
  _$GComparableInt32OperationFilterInput? _$v;

  int? _eq;
  int? get eq => _$this._eq;
  set eq(int? eq) => _$this._eq = eq;

  int? _neq;
  int? get neq => _$this._neq;
  set neq(int? neq) => _$this._neq = neq;

  ListBuilder<int>? _Gin;
  ListBuilder<int> get Gin => _$this._Gin ??= new ListBuilder<int>();
  set Gin(ListBuilder<int>? Gin) => _$this._Gin = Gin;

  ListBuilder<int>? _nin;
  ListBuilder<int> get nin => _$this._nin ??= new ListBuilder<int>();
  set nin(ListBuilder<int>? nin) => _$this._nin = nin;

  int? _gt;
  int? get gt => _$this._gt;
  set gt(int? gt) => _$this._gt = gt;

  int? _ngt;
  int? get ngt => _$this._ngt;
  set ngt(int? ngt) => _$this._ngt = ngt;

  int? _gte;
  int? get gte => _$this._gte;
  set gte(int? gte) => _$this._gte = gte;

  int? _ngte;
  int? get ngte => _$this._ngte;
  set ngte(int? ngte) => _$this._ngte = ngte;

  int? _lt;
  int? get lt => _$this._lt;
  set lt(int? lt) => _$this._lt = lt;

  int? _nlt;
  int? get nlt => _$this._nlt;
  set nlt(int? nlt) => _$this._nlt = nlt;

  int? _lte;
  int? get lte => _$this._lte;
  set lte(int? lte) => _$this._lte = lte;

  int? _nlte;
  int? get nlte => _$this._nlte;
  set nlte(int? nlte) => _$this._nlte = nlte;

  GComparableInt32OperationFilterInputBuilder();

  GComparableInt32OperationFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _eq = $v.eq;
      _neq = $v.neq;
      _Gin = $v.Gin?.toBuilder();
      _nin = $v.nin?.toBuilder();
      _gt = $v.gt;
      _ngt = $v.ngt;
      _gte = $v.gte;
      _ngte = $v.ngte;
      _lt = $v.lt;
      _nlt = $v.nlt;
      _lte = $v.lte;
      _nlte = $v.nlte;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GComparableInt32OperationFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GComparableInt32OperationFilterInput;
  }

  @override
  void update(
      void Function(GComparableInt32OperationFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GComparableInt32OperationFilterInput build() => _build();

  _$GComparableInt32OperationFilterInput _build() {
    _$GComparableInt32OperationFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GComparableInt32OperationFilterInput._(
              eq: eq,
              neq: neq,
              Gin: _Gin?.build(),
              nin: _nin?.build(),
              gt: gt,
              ngt: ngt,
              gte: gte,
              ngte: ngte,
              lt: lt,
              nlt: nlt,
              lte: lte,
              nlte: nlte);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'Gin';
        _Gin?.build();
        _$failedField = 'nin';
        _nin?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GComparableInt32OperationFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GComparableDoubleOperationFilterInput
    extends GComparableDoubleOperationFilterInput {
  @override
  final double? eq;
  @override
  final double? neq;
  @override
  final BuiltList<double>? Gin;
  @override
  final BuiltList<double>? nin;
  @override
  final double? gt;
  @override
  final double? ngt;
  @override
  final double? gte;
  @override
  final double? ngte;
  @override
  final double? lt;
  @override
  final double? nlt;
  @override
  final double? lte;
  @override
  final double? nlte;

  factory _$GComparableDoubleOperationFilterInput(
          [void Function(GComparableDoubleOperationFilterInputBuilder)?
              updates]) =>
      (new GComparableDoubleOperationFilterInputBuilder()..update(updates))
          ._build();

  _$GComparableDoubleOperationFilterInput._(
      {this.eq,
      this.neq,
      this.Gin,
      this.nin,
      this.gt,
      this.ngt,
      this.gte,
      this.ngte,
      this.lt,
      this.nlt,
      this.lte,
      this.nlte})
      : super._();

  @override
  GComparableDoubleOperationFilterInput rebuild(
          void Function(GComparableDoubleOperationFilterInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GComparableDoubleOperationFilterInputBuilder toBuilder() =>
      new GComparableDoubleOperationFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GComparableDoubleOperationFilterInput &&
        eq == other.eq &&
        neq == other.neq &&
        Gin == other.Gin &&
        nin == other.nin &&
        gt == other.gt &&
        ngt == other.ngt &&
        gte == other.gte &&
        ngte == other.ngte &&
        lt == other.lt &&
        nlt == other.nlt &&
        lte == other.lte &&
        nlte == other.nlte;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, eq.hashCode);
    _$hash = $jc(_$hash, neq.hashCode);
    _$hash = $jc(_$hash, Gin.hashCode);
    _$hash = $jc(_$hash, nin.hashCode);
    _$hash = $jc(_$hash, gt.hashCode);
    _$hash = $jc(_$hash, ngt.hashCode);
    _$hash = $jc(_$hash, gte.hashCode);
    _$hash = $jc(_$hash, ngte.hashCode);
    _$hash = $jc(_$hash, lt.hashCode);
    _$hash = $jc(_$hash, nlt.hashCode);
    _$hash = $jc(_$hash, lte.hashCode);
    _$hash = $jc(_$hash, nlte.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GComparableDoubleOperationFilterInput')
          ..add('eq', eq)
          ..add('neq', neq)
          ..add('Gin', Gin)
          ..add('nin', nin)
          ..add('gt', gt)
          ..add('ngt', ngt)
          ..add('gte', gte)
          ..add('ngte', ngte)
          ..add('lt', lt)
          ..add('nlt', nlt)
          ..add('lte', lte)
          ..add('nlte', nlte))
        .toString();
  }
}

class GComparableDoubleOperationFilterInputBuilder
    implements
        Builder<GComparableDoubleOperationFilterInput,
            GComparableDoubleOperationFilterInputBuilder> {
  _$GComparableDoubleOperationFilterInput? _$v;

  double? _eq;
  double? get eq => _$this._eq;
  set eq(double? eq) => _$this._eq = eq;

  double? _neq;
  double? get neq => _$this._neq;
  set neq(double? neq) => _$this._neq = neq;

  ListBuilder<double>? _Gin;
  ListBuilder<double> get Gin => _$this._Gin ??= new ListBuilder<double>();
  set Gin(ListBuilder<double>? Gin) => _$this._Gin = Gin;

  ListBuilder<double>? _nin;
  ListBuilder<double> get nin => _$this._nin ??= new ListBuilder<double>();
  set nin(ListBuilder<double>? nin) => _$this._nin = nin;

  double? _gt;
  double? get gt => _$this._gt;
  set gt(double? gt) => _$this._gt = gt;

  double? _ngt;
  double? get ngt => _$this._ngt;
  set ngt(double? ngt) => _$this._ngt = ngt;

  double? _gte;
  double? get gte => _$this._gte;
  set gte(double? gte) => _$this._gte = gte;

  double? _ngte;
  double? get ngte => _$this._ngte;
  set ngte(double? ngte) => _$this._ngte = ngte;

  double? _lt;
  double? get lt => _$this._lt;
  set lt(double? lt) => _$this._lt = lt;

  double? _nlt;
  double? get nlt => _$this._nlt;
  set nlt(double? nlt) => _$this._nlt = nlt;

  double? _lte;
  double? get lte => _$this._lte;
  set lte(double? lte) => _$this._lte = lte;

  double? _nlte;
  double? get nlte => _$this._nlte;
  set nlte(double? nlte) => _$this._nlte = nlte;

  GComparableDoubleOperationFilterInputBuilder();

  GComparableDoubleOperationFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _eq = $v.eq;
      _neq = $v.neq;
      _Gin = $v.Gin?.toBuilder();
      _nin = $v.nin?.toBuilder();
      _gt = $v.gt;
      _ngt = $v.ngt;
      _gte = $v.gte;
      _ngte = $v.ngte;
      _lt = $v.lt;
      _nlt = $v.nlt;
      _lte = $v.lte;
      _nlte = $v.nlte;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GComparableDoubleOperationFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GComparableDoubleOperationFilterInput;
  }

  @override
  void update(
      void Function(GComparableDoubleOperationFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GComparableDoubleOperationFilterInput build() => _build();

  _$GComparableDoubleOperationFilterInput _build() {
    _$GComparableDoubleOperationFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GComparableDoubleOperationFilterInput._(
              eq: eq,
              neq: neq,
              Gin: _Gin?.build(),
              nin: _nin?.build(),
              gt: gt,
              ngt: ngt,
              gte: gte,
              ngte: ngte,
              lt: lt,
              nlt: nlt,
              lte: lte,
              nlte: nlte);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'Gin';
        _Gin?.build();
        _$failedField = 'nin';
        _nin?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GComparableDoubleOperationFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GComparableSingleOperationFilterInput
    extends GComparableSingleOperationFilterInput {
  @override
  final double? eq;
  @override
  final double? neq;
  @override
  final BuiltList<double>? Gin;
  @override
  final BuiltList<double>? nin;
  @override
  final double? gt;
  @override
  final double? ngt;
  @override
  final double? gte;
  @override
  final double? ngte;
  @override
  final double? lt;
  @override
  final double? nlt;
  @override
  final double? lte;
  @override
  final double? nlte;

  factory _$GComparableSingleOperationFilterInput(
          [void Function(GComparableSingleOperationFilterInputBuilder)?
              updates]) =>
      (new GComparableSingleOperationFilterInputBuilder()..update(updates))
          ._build();

  _$GComparableSingleOperationFilterInput._(
      {this.eq,
      this.neq,
      this.Gin,
      this.nin,
      this.gt,
      this.ngt,
      this.gte,
      this.ngte,
      this.lt,
      this.nlt,
      this.lte,
      this.nlte})
      : super._();

  @override
  GComparableSingleOperationFilterInput rebuild(
          void Function(GComparableSingleOperationFilterInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GComparableSingleOperationFilterInputBuilder toBuilder() =>
      new GComparableSingleOperationFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GComparableSingleOperationFilterInput &&
        eq == other.eq &&
        neq == other.neq &&
        Gin == other.Gin &&
        nin == other.nin &&
        gt == other.gt &&
        ngt == other.ngt &&
        gte == other.gte &&
        ngte == other.ngte &&
        lt == other.lt &&
        nlt == other.nlt &&
        lte == other.lte &&
        nlte == other.nlte;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, eq.hashCode);
    _$hash = $jc(_$hash, neq.hashCode);
    _$hash = $jc(_$hash, Gin.hashCode);
    _$hash = $jc(_$hash, nin.hashCode);
    _$hash = $jc(_$hash, gt.hashCode);
    _$hash = $jc(_$hash, ngt.hashCode);
    _$hash = $jc(_$hash, gte.hashCode);
    _$hash = $jc(_$hash, ngte.hashCode);
    _$hash = $jc(_$hash, lt.hashCode);
    _$hash = $jc(_$hash, nlt.hashCode);
    _$hash = $jc(_$hash, lte.hashCode);
    _$hash = $jc(_$hash, nlte.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GComparableSingleOperationFilterInput')
          ..add('eq', eq)
          ..add('neq', neq)
          ..add('Gin', Gin)
          ..add('nin', nin)
          ..add('gt', gt)
          ..add('ngt', ngt)
          ..add('gte', gte)
          ..add('ngte', ngte)
          ..add('lt', lt)
          ..add('nlt', nlt)
          ..add('lte', lte)
          ..add('nlte', nlte))
        .toString();
  }
}

class GComparableSingleOperationFilterInputBuilder
    implements
        Builder<GComparableSingleOperationFilterInput,
            GComparableSingleOperationFilterInputBuilder> {
  _$GComparableSingleOperationFilterInput? _$v;

  double? _eq;
  double? get eq => _$this._eq;
  set eq(double? eq) => _$this._eq = eq;

  double? _neq;
  double? get neq => _$this._neq;
  set neq(double? neq) => _$this._neq = neq;

  ListBuilder<double>? _Gin;
  ListBuilder<double> get Gin => _$this._Gin ??= new ListBuilder<double>();
  set Gin(ListBuilder<double>? Gin) => _$this._Gin = Gin;

  ListBuilder<double>? _nin;
  ListBuilder<double> get nin => _$this._nin ??= new ListBuilder<double>();
  set nin(ListBuilder<double>? nin) => _$this._nin = nin;

  double? _gt;
  double? get gt => _$this._gt;
  set gt(double? gt) => _$this._gt = gt;

  double? _ngt;
  double? get ngt => _$this._ngt;
  set ngt(double? ngt) => _$this._ngt = ngt;

  double? _gte;
  double? get gte => _$this._gte;
  set gte(double? gte) => _$this._gte = gte;

  double? _ngte;
  double? get ngte => _$this._ngte;
  set ngte(double? ngte) => _$this._ngte = ngte;

  double? _lt;
  double? get lt => _$this._lt;
  set lt(double? lt) => _$this._lt = lt;

  double? _nlt;
  double? get nlt => _$this._nlt;
  set nlt(double? nlt) => _$this._nlt = nlt;

  double? _lte;
  double? get lte => _$this._lte;
  set lte(double? lte) => _$this._lte = lte;

  double? _nlte;
  double? get nlte => _$this._nlte;
  set nlte(double? nlte) => _$this._nlte = nlte;

  GComparableSingleOperationFilterInputBuilder();

  GComparableSingleOperationFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _eq = $v.eq;
      _neq = $v.neq;
      _Gin = $v.Gin?.toBuilder();
      _nin = $v.nin?.toBuilder();
      _gt = $v.gt;
      _ngt = $v.ngt;
      _gte = $v.gte;
      _ngte = $v.ngte;
      _lt = $v.lt;
      _nlt = $v.nlt;
      _lte = $v.lte;
      _nlte = $v.nlte;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GComparableSingleOperationFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GComparableSingleOperationFilterInput;
  }

  @override
  void update(
      void Function(GComparableSingleOperationFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GComparableSingleOperationFilterInput build() => _build();

  _$GComparableSingleOperationFilterInput _build() {
    _$GComparableSingleOperationFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GComparableSingleOperationFilterInput._(
              eq: eq,
              neq: neq,
              Gin: _Gin?.build(),
              nin: _nin?.build(),
              gt: gt,
              ngt: ngt,
              gte: gte,
              ngte: ngte,
              lt: lt,
              nlt: nlt,
              lte: lte,
              nlte: nlte);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'Gin';
        _Gin?.build();
        _$failedField = 'nin';
        _nin?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GComparableSingleOperationFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GDeviceFilterInput extends GDeviceFilterInput {
  @override
  final BuiltList<GDeviceFilterInput>? and;
  @override
  final BuiltList<GDeviceFilterInput>? or;
  @override
  final GComparableInt32OperationFilterInput? id;
  @override
  final GStringOperationFilterInput? deviceRegToken;
  @override
  final GComparableNullableOfDateTimeOperationFilterInput? createdOn;
  @override
  final GStringOperationFilterInput? createdBy;
  @override
  final GComparableNullableOfDateTimeOperationFilterInput? lastModifiedOn;
  @override
  final GStringOperationFilterInput? lastModifiedBy;

  factory _$GDeviceFilterInput(
          [void Function(GDeviceFilterInputBuilder)? updates]) =>
      (new GDeviceFilterInputBuilder()..update(updates))._build();

  _$GDeviceFilterInput._(
      {this.and,
      this.or,
      this.id,
      this.deviceRegToken,
      this.createdOn,
      this.createdBy,
      this.lastModifiedOn,
      this.lastModifiedBy})
      : super._();

  @override
  GDeviceFilterInput rebuild(
          void Function(GDeviceFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GDeviceFilterInputBuilder toBuilder() =>
      new GDeviceFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GDeviceFilterInput &&
        and == other.and &&
        or == other.or &&
        id == other.id &&
        deviceRegToken == other.deviceRegToken &&
        createdOn == other.createdOn &&
        createdBy == other.createdBy &&
        lastModifiedOn == other.lastModifiedOn &&
        lastModifiedBy == other.lastModifiedBy;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, and.hashCode);
    _$hash = $jc(_$hash, or.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, deviceRegToken.hashCode);
    _$hash = $jc(_$hash, createdOn.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, lastModifiedOn.hashCode);
    _$hash = $jc(_$hash, lastModifiedBy.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GDeviceFilterInput')
          ..add('and', and)
          ..add('or', or)
          ..add('id', id)
          ..add('deviceRegToken', deviceRegToken)
          ..add('createdOn', createdOn)
          ..add('createdBy', createdBy)
          ..add('lastModifiedOn', lastModifiedOn)
          ..add('lastModifiedBy', lastModifiedBy))
        .toString();
  }
}

class GDeviceFilterInputBuilder
    implements Builder<GDeviceFilterInput, GDeviceFilterInputBuilder> {
  _$GDeviceFilterInput? _$v;

  ListBuilder<GDeviceFilterInput>? _and;
  ListBuilder<GDeviceFilterInput> get and =>
      _$this._and ??= new ListBuilder<GDeviceFilterInput>();
  set and(ListBuilder<GDeviceFilterInput>? and) => _$this._and = and;

  ListBuilder<GDeviceFilterInput>? _or;
  ListBuilder<GDeviceFilterInput> get or =>
      _$this._or ??= new ListBuilder<GDeviceFilterInput>();
  set or(ListBuilder<GDeviceFilterInput>? or) => _$this._or = or;

  GComparableInt32OperationFilterInputBuilder? _id;
  GComparableInt32OperationFilterInputBuilder get id =>
      _$this._id ??= new GComparableInt32OperationFilterInputBuilder();
  set id(GComparableInt32OperationFilterInputBuilder? id) => _$this._id = id;

  GStringOperationFilterInputBuilder? _deviceRegToken;
  GStringOperationFilterInputBuilder get deviceRegToken =>
      _$this._deviceRegToken ??= new GStringOperationFilterInputBuilder();
  set deviceRegToken(GStringOperationFilterInputBuilder? deviceRegToken) =>
      _$this._deviceRegToken = deviceRegToken;

  GComparableNullableOfDateTimeOperationFilterInputBuilder? _createdOn;
  GComparableNullableOfDateTimeOperationFilterInputBuilder get createdOn =>
      _$this._createdOn ??=
          new GComparableNullableOfDateTimeOperationFilterInputBuilder();
  set createdOn(
          GComparableNullableOfDateTimeOperationFilterInputBuilder?
              createdOn) =>
      _$this._createdOn = createdOn;

  GStringOperationFilterInputBuilder? _createdBy;
  GStringOperationFilterInputBuilder get createdBy =>
      _$this._createdBy ??= new GStringOperationFilterInputBuilder();
  set createdBy(GStringOperationFilterInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GComparableNullableOfDateTimeOperationFilterInputBuilder? _lastModifiedOn;
  GComparableNullableOfDateTimeOperationFilterInputBuilder get lastModifiedOn =>
      _$this._lastModifiedOn ??=
          new GComparableNullableOfDateTimeOperationFilterInputBuilder();
  set lastModifiedOn(
          GComparableNullableOfDateTimeOperationFilterInputBuilder?
              lastModifiedOn) =>
      _$this._lastModifiedOn = lastModifiedOn;

  GStringOperationFilterInputBuilder? _lastModifiedBy;
  GStringOperationFilterInputBuilder get lastModifiedBy =>
      _$this._lastModifiedBy ??= new GStringOperationFilterInputBuilder();
  set lastModifiedBy(GStringOperationFilterInputBuilder? lastModifiedBy) =>
      _$this._lastModifiedBy = lastModifiedBy;

  GDeviceFilterInputBuilder();

  GDeviceFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _and = $v.and?.toBuilder();
      _or = $v.or?.toBuilder();
      _id = $v.id?.toBuilder();
      _deviceRegToken = $v.deviceRegToken?.toBuilder();
      _createdOn = $v.createdOn?.toBuilder();
      _createdBy = $v.createdBy?.toBuilder();
      _lastModifiedOn = $v.lastModifiedOn?.toBuilder();
      _lastModifiedBy = $v.lastModifiedBy?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GDeviceFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GDeviceFilterInput;
  }

  @override
  void update(void Function(GDeviceFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GDeviceFilterInput build() => _build();

  _$GDeviceFilterInput _build() {
    _$GDeviceFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GDeviceFilterInput._(
              and: _and?.build(),
              or: _or?.build(),
              id: _id?.build(),
              deviceRegToken: _deviceRegToken?.build(),
              createdOn: _createdOn?.build(),
              createdBy: _createdBy?.build(),
              lastModifiedOn: _lastModifiedOn?.build(),
              lastModifiedBy: _lastModifiedBy?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'and';
        _and?.build();
        _$failedField = 'or';
        _or?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'deviceRegToken';
        _deviceRegToken?.build();
        _$failedField = 'createdOn';
        _createdOn?.build();
        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'lastModifiedOn';
        _lastModifiedOn?.build();
        _$failedField = 'lastModifiedBy';
        _lastModifiedBy?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GDeviceFilterInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GListFilterInputTypeOfUserRidesFilterInput
    extends GListFilterInputTypeOfUserRidesFilterInput {
  @override
  final GUserRidesFilterInput? all;
  @override
  final GUserRidesFilterInput? none;
  @override
  final GUserRidesFilterInput? some;
  @override
  final bool? any;

  factory _$GListFilterInputTypeOfUserRidesFilterInput(
          [void Function(GListFilterInputTypeOfUserRidesFilterInputBuilder)?
              updates]) =>
      (new GListFilterInputTypeOfUserRidesFilterInputBuilder()..update(updates))
          ._build();

  _$GListFilterInputTypeOfUserRidesFilterInput._(
      {this.all, this.none, this.some, this.any})
      : super._();

  @override
  GListFilterInputTypeOfUserRidesFilterInput rebuild(
          void Function(GListFilterInputTypeOfUserRidesFilterInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GListFilterInputTypeOfUserRidesFilterInputBuilder toBuilder() =>
      new GListFilterInputTypeOfUserRidesFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GListFilterInputTypeOfUserRidesFilterInput &&
        all == other.all &&
        none == other.none &&
        some == other.some &&
        any == other.any;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, all.hashCode);
    _$hash = $jc(_$hash, none.hashCode);
    _$hash = $jc(_$hash, some.hashCode);
    _$hash = $jc(_$hash, any.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GListFilterInputTypeOfUserRidesFilterInput')
          ..add('all', all)
          ..add('none', none)
          ..add('some', some)
          ..add('any', any))
        .toString();
  }
}

class GListFilterInputTypeOfUserRidesFilterInputBuilder
    implements
        Builder<GListFilterInputTypeOfUserRidesFilterInput,
            GListFilterInputTypeOfUserRidesFilterInputBuilder> {
  _$GListFilterInputTypeOfUserRidesFilterInput? _$v;

  GUserRidesFilterInputBuilder? _all;
  GUserRidesFilterInputBuilder get all =>
      _$this._all ??= new GUserRidesFilterInputBuilder();
  set all(GUserRidesFilterInputBuilder? all) => _$this._all = all;

  GUserRidesFilterInputBuilder? _none;
  GUserRidesFilterInputBuilder get none =>
      _$this._none ??= new GUserRidesFilterInputBuilder();
  set none(GUserRidesFilterInputBuilder? none) => _$this._none = none;

  GUserRidesFilterInputBuilder? _some;
  GUserRidesFilterInputBuilder get some =>
      _$this._some ??= new GUserRidesFilterInputBuilder();
  set some(GUserRidesFilterInputBuilder? some) => _$this._some = some;

  bool? _any;
  bool? get any => _$this._any;
  set any(bool? any) => _$this._any = any;

  GListFilterInputTypeOfUserRidesFilterInputBuilder();

  GListFilterInputTypeOfUserRidesFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _all = $v.all?.toBuilder();
      _none = $v.none?.toBuilder();
      _some = $v.some?.toBuilder();
      _any = $v.any;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GListFilterInputTypeOfUserRidesFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GListFilterInputTypeOfUserRidesFilterInput;
  }

  @override
  void update(
      void Function(GListFilterInputTypeOfUserRidesFilterInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GListFilterInputTypeOfUserRidesFilterInput build() => _build();

  _$GListFilterInputTypeOfUserRidesFilterInput _build() {
    _$GListFilterInputTypeOfUserRidesFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GListFilterInputTypeOfUserRidesFilterInput._(
              all: _all?.build(),
              none: _none?.build(),
              some: _some?.build(),
              any: any);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'all';
        _all?.build();
        _$failedField = 'none';
        _none?.build();
        _$failedField = 'some';
        _some?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GListFilterInputTypeOfUserRidesFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GListFilterInputTypeOfUserRatingFilterInput
    extends GListFilterInputTypeOfUserRatingFilterInput {
  @override
  final GUserRatingFilterInput? all;
  @override
  final GUserRatingFilterInput? none;
  @override
  final GUserRatingFilterInput? some;
  @override
  final bool? any;

  factory _$GListFilterInputTypeOfUserRatingFilterInput(
          [void Function(GListFilterInputTypeOfUserRatingFilterInputBuilder)?
              updates]) =>
      (new GListFilterInputTypeOfUserRatingFilterInputBuilder()
            ..update(updates))
          ._build();

  _$GListFilterInputTypeOfUserRatingFilterInput._(
      {this.all, this.none, this.some, this.any})
      : super._();

  @override
  GListFilterInputTypeOfUserRatingFilterInput rebuild(
          void Function(GListFilterInputTypeOfUserRatingFilterInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GListFilterInputTypeOfUserRatingFilterInputBuilder toBuilder() =>
      new GListFilterInputTypeOfUserRatingFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GListFilterInputTypeOfUserRatingFilterInput &&
        all == other.all &&
        none == other.none &&
        some == other.some &&
        any == other.any;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, all.hashCode);
    _$hash = $jc(_$hash, none.hashCode);
    _$hash = $jc(_$hash, some.hashCode);
    _$hash = $jc(_$hash, any.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GListFilterInputTypeOfUserRatingFilterInput')
          ..add('all', all)
          ..add('none', none)
          ..add('some', some)
          ..add('any', any))
        .toString();
  }
}

class GListFilterInputTypeOfUserRatingFilterInputBuilder
    implements
        Builder<GListFilterInputTypeOfUserRatingFilterInput,
            GListFilterInputTypeOfUserRatingFilterInputBuilder> {
  _$GListFilterInputTypeOfUserRatingFilterInput? _$v;

  GUserRatingFilterInputBuilder? _all;
  GUserRatingFilterInputBuilder get all =>
      _$this._all ??= new GUserRatingFilterInputBuilder();
  set all(GUserRatingFilterInputBuilder? all) => _$this._all = all;

  GUserRatingFilterInputBuilder? _none;
  GUserRatingFilterInputBuilder get none =>
      _$this._none ??= new GUserRatingFilterInputBuilder();
  set none(GUserRatingFilterInputBuilder? none) => _$this._none = none;

  GUserRatingFilterInputBuilder? _some;
  GUserRatingFilterInputBuilder get some =>
      _$this._some ??= new GUserRatingFilterInputBuilder();
  set some(GUserRatingFilterInputBuilder? some) => _$this._some = some;

  bool? _any;
  bool? get any => _$this._any;
  set any(bool? any) => _$this._any = any;

  GListFilterInputTypeOfUserRatingFilterInputBuilder();

  GListFilterInputTypeOfUserRatingFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _all = $v.all?.toBuilder();
      _none = $v.none?.toBuilder();
      _some = $v.some?.toBuilder();
      _any = $v.any;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GListFilterInputTypeOfUserRatingFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GListFilterInputTypeOfUserRatingFilterInput;
  }

  @override
  void update(
      void Function(GListFilterInputTypeOfUserRatingFilterInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GListFilterInputTypeOfUserRatingFilterInput build() => _build();

  _$GListFilterInputTypeOfUserRatingFilterInput _build() {
    _$GListFilterInputTypeOfUserRatingFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GListFilterInputTypeOfUserRatingFilterInput._(
              all: _all?.build(),
              none: _none?.build(),
              some: _some?.build(),
              any: any);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'all';
        _all?.build();
        _$failedField = 'none';
        _none?.build();
        _$failedField = 'some';
        _some?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GListFilterInputTypeOfUserRatingFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GListFilterInputTypeOfFrequentRouteFilterInput
    extends GListFilterInputTypeOfFrequentRouteFilterInput {
  @override
  final GFrequentRouteFilterInput? all;
  @override
  final GFrequentRouteFilterInput? none;
  @override
  final GFrequentRouteFilterInput? some;
  @override
  final bool? any;

  factory _$GListFilterInputTypeOfFrequentRouteFilterInput(
          [void Function(GListFilterInputTypeOfFrequentRouteFilterInputBuilder)?
              updates]) =>
      (new GListFilterInputTypeOfFrequentRouteFilterInputBuilder()
            ..update(updates))
          ._build();

  _$GListFilterInputTypeOfFrequentRouteFilterInput._(
      {this.all, this.none, this.some, this.any})
      : super._();

  @override
  GListFilterInputTypeOfFrequentRouteFilterInput rebuild(
          void Function(GListFilterInputTypeOfFrequentRouteFilterInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GListFilterInputTypeOfFrequentRouteFilterInputBuilder toBuilder() =>
      new GListFilterInputTypeOfFrequentRouteFilterInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GListFilterInputTypeOfFrequentRouteFilterInput &&
        all == other.all &&
        none == other.none &&
        some == other.some &&
        any == other.any;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, all.hashCode);
    _$hash = $jc(_$hash, none.hashCode);
    _$hash = $jc(_$hash, some.hashCode);
    _$hash = $jc(_$hash, any.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GListFilterInputTypeOfFrequentRouteFilterInput')
          ..add('all', all)
          ..add('none', none)
          ..add('some', some)
          ..add('any', any))
        .toString();
  }
}

class GListFilterInputTypeOfFrequentRouteFilterInputBuilder
    implements
        Builder<GListFilterInputTypeOfFrequentRouteFilterInput,
            GListFilterInputTypeOfFrequentRouteFilterInputBuilder> {
  _$GListFilterInputTypeOfFrequentRouteFilterInput? _$v;

  GFrequentRouteFilterInputBuilder? _all;
  GFrequentRouteFilterInputBuilder get all =>
      _$this._all ??= new GFrequentRouteFilterInputBuilder();
  set all(GFrequentRouteFilterInputBuilder? all) => _$this._all = all;

  GFrequentRouteFilterInputBuilder? _none;
  GFrequentRouteFilterInputBuilder get none =>
      _$this._none ??= new GFrequentRouteFilterInputBuilder();
  set none(GFrequentRouteFilterInputBuilder? none) => _$this._none = none;

  GFrequentRouteFilterInputBuilder? _some;
  GFrequentRouteFilterInputBuilder get some =>
      _$this._some ??= new GFrequentRouteFilterInputBuilder();
  set some(GFrequentRouteFilterInputBuilder? some) => _$this._some = some;

  bool? _any;
  bool? get any => _$this._any;
  set any(bool? any) => _$this._any = any;

  GListFilterInputTypeOfFrequentRouteFilterInputBuilder();

  GListFilterInputTypeOfFrequentRouteFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _all = $v.all?.toBuilder();
      _none = $v.none?.toBuilder();
      _some = $v.some?.toBuilder();
      _any = $v.any;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GListFilterInputTypeOfFrequentRouteFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GListFilterInputTypeOfFrequentRouteFilterInput;
  }

  @override
  void update(
      void Function(GListFilterInputTypeOfFrequentRouteFilterInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GListFilterInputTypeOfFrequentRouteFilterInput build() => _build();

  _$GListFilterInputTypeOfFrequentRouteFilterInput _build() {
    _$GListFilterInputTypeOfFrequentRouteFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GListFilterInputTypeOfFrequentRouteFilterInput._(
              all: _all?.build(),
              none: _none?.build(),
              some: _some?.build(),
              any: any);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'all';
        _all?.build();
        _$failedField = 'none';
        _none?.build();
        _$failedField = 'some';
        _some?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GListFilterInputTypeOfFrequentRouteFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GListFilterInputTypeOfSafiriCarUserFilterInput
    extends GListFilterInputTypeOfSafiriCarUserFilterInput {
  @override
  final GSafiriCarUserFilterInput? all;
  @override
  final GSafiriCarUserFilterInput? none;
  @override
  final GSafiriCarUserFilterInput? some;
  @override
  final bool? any;

  factory _$GListFilterInputTypeOfSafiriCarUserFilterInput(
          [void Function(GListFilterInputTypeOfSafiriCarUserFilterInputBuilder)?
              updates]) =>
      (new GListFilterInputTypeOfSafiriCarUserFilterInputBuilder()
            ..update(updates))
          ._build();

  _$GListFilterInputTypeOfSafiriCarUserFilterInput._(
      {this.all, this.none, this.some, this.any})
      : super._();

  @override
  GListFilterInputTypeOfSafiriCarUserFilterInput rebuild(
          void Function(GListFilterInputTypeOfSafiriCarUserFilterInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GListFilterInputTypeOfSafiriCarUserFilterInputBuilder toBuilder() =>
      new GListFilterInputTypeOfSafiriCarUserFilterInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GListFilterInputTypeOfSafiriCarUserFilterInput &&
        all == other.all &&
        none == other.none &&
        some == other.some &&
        any == other.any;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, all.hashCode);
    _$hash = $jc(_$hash, none.hashCode);
    _$hash = $jc(_$hash, some.hashCode);
    _$hash = $jc(_$hash, any.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GListFilterInputTypeOfSafiriCarUserFilterInput')
          ..add('all', all)
          ..add('none', none)
          ..add('some', some)
          ..add('any', any))
        .toString();
  }
}

class GListFilterInputTypeOfSafiriCarUserFilterInputBuilder
    implements
        Builder<GListFilterInputTypeOfSafiriCarUserFilterInput,
            GListFilterInputTypeOfSafiriCarUserFilterInputBuilder> {
  _$GListFilterInputTypeOfSafiriCarUserFilterInput? _$v;

  GSafiriCarUserFilterInputBuilder? _all;
  GSafiriCarUserFilterInputBuilder get all =>
      _$this._all ??= new GSafiriCarUserFilterInputBuilder();
  set all(GSafiriCarUserFilterInputBuilder? all) => _$this._all = all;

  GSafiriCarUserFilterInputBuilder? _none;
  GSafiriCarUserFilterInputBuilder get none =>
      _$this._none ??= new GSafiriCarUserFilterInputBuilder();
  set none(GSafiriCarUserFilterInputBuilder? none) => _$this._none = none;

  GSafiriCarUserFilterInputBuilder? _some;
  GSafiriCarUserFilterInputBuilder get some =>
      _$this._some ??= new GSafiriCarUserFilterInputBuilder();
  set some(GSafiriCarUserFilterInputBuilder? some) => _$this._some = some;

  bool? _any;
  bool? get any => _$this._any;
  set any(bool? any) => _$this._any = any;

  GListFilterInputTypeOfSafiriCarUserFilterInputBuilder();

  GListFilterInputTypeOfSafiriCarUserFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _all = $v.all?.toBuilder();
      _none = $v.none?.toBuilder();
      _some = $v.some?.toBuilder();
      _any = $v.any;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GListFilterInputTypeOfSafiriCarUserFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GListFilterInputTypeOfSafiriCarUserFilterInput;
  }

  @override
  void update(
      void Function(GListFilterInputTypeOfSafiriCarUserFilterInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GListFilterInputTypeOfSafiriCarUserFilterInput build() => _build();

  _$GListFilterInputTypeOfSafiriCarUserFilterInput _build() {
    _$GListFilterInputTypeOfSafiriCarUserFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GListFilterInputTypeOfSafiriCarUserFilterInput._(
              all: _all?.build(),
              none: _none?.build(),
              some: _some?.build(),
              any: any);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'all';
        _all?.build();
        _$failedField = 'none';
        _none?.build();
        _$failedField = 'some';
        _some?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GListFilterInputTypeOfSafiriCarUserFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GComparableNullableOfDateTimeOffsetOperationFilterInput
    extends GComparableNullableOfDateTimeOffsetOperationFilterInput {
  @override
  final GDateTime? eq;
  @override
  final GDateTime? neq;
  @override
  final BuiltList<GDateTime>? Gin;
  @override
  final BuiltList<GDateTime>? nin;
  @override
  final GDateTime? gt;
  @override
  final GDateTime? ngt;
  @override
  final GDateTime? gte;
  @override
  final GDateTime? ngte;
  @override
  final GDateTime? lt;
  @override
  final GDateTime? nlt;
  @override
  final GDateTime? lte;
  @override
  final GDateTime? nlte;

  factory _$GComparableNullableOfDateTimeOffsetOperationFilterInput(
          [void Function(
                  GComparableNullableOfDateTimeOffsetOperationFilterInputBuilder)?
              updates]) =>
      (new GComparableNullableOfDateTimeOffsetOperationFilterInputBuilder()
            ..update(updates))
          ._build();

  _$GComparableNullableOfDateTimeOffsetOperationFilterInput._(
      {this.eq,
      this.neq,
      this.Gin,
      this.nin,
      this.gt,
      this.ngt,
      this.gte,
      this.ngte,
      this.lt,
      this.nlt,
      this.lte,
      this.nlte})
      : super._();

  @override
  GComparableNullableOfDateTimeOffsetOperationFilterInput rebuild(
          void Function(
                  GComparableNullableOfDateTimeOffsetOperationFilterInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GComparableNullableOfDateTimeOffsetOperationFilterInputBuilder toBuilder() =>
      new GComparableNullableOfDateTimeOffsetOperationFilterInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GComparableNullableOfDateTimeOffsetOperationFilterInput &&
        eq == other.eq &&
        neq == other.neq &&
        Gin == other.Gin &&
        nin == other.nin &&
        gt == other.gt &&
        ngt == other.ngt &&
        gte == other.gte &&
        ngte == other.ngte &&
        lt == other.lt &&
        nlt == other.nlt &&
        lte == other.lte &&
        nlte == other.nlte;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, eq.hashCode);
    _$hash = $jc(_$hash, neq.hashCode);
    _$hash = $jc(_$hash, Gin.hashCode);
    _$hash = $jc(_$hash, nin.hashCode);
    _$hash = $jc(_$hash, gt.hashCode);
    _$hash = $jc(_$hash, ngt.hashCode);
    _$hash = $jc(_$hash, gte.hashCode);
    _$hash = $jc(_$hash, ngte.hashCode);
    _$hash = $jc(_$hash, lt.hashCode);
    _$hash = $jc(_$hash, nlt.hashCode);
    _$hash = $jc(_$hash, lte.hashCode);
    _$hash = $jc(_$hash, nlte.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GComparableNullableOfDateTimeOffsetOperationFilterInput')
          ..add('eq', eq)
          ..add('neq', neq)
          ..add('Gin', Gin)
          ..add('nin', nin)
          ..add('gt', gt)
          ..add('ngt', ngt)
          ..add('gte', gte)
          ..add('ngte', ngte)
          ..add('lt', lt)
          ..add('nlt', nlt)
          ..add('lte', lte)
          ..add('nlte', nlte))
        .toString();
  }
}

class GComparableNullableOfDateTimeOffsetOperationFilterInputBuilder
    implements
        Builder<GComparableNullableOfDateTimeOffsetOperationFilterInput,
            GComparableNullableOfDateTimeOffsetOperationFilterInputBuilder> {
  _$GComparableNullableOfDateTimeOffsetOperationFilterInput? _$v;

  GDateTimeBuilder? _eq;
  GDateTimeBuilder get eq => _$this._eq ??= new GDateTimeBuilder();
  set eq(GDateTimeBuilder? eq) => _$this._eq = eq;

  GDateTimeBuilder? _neq;
  GDateTimeBuilder get neq => _$this._neq ??= new GDateTimeBuilder();
  set neq(GDateTimeBuilder? neq) => _$this._neq = neq;

  ListBuilder<GDateTime>? _Gin;
  ListBuilder<GDateTime> get Gin =>
      _$this._Gin ??= new ListBuilder<GDateTime>();
  set Gin(ListBuilder<GDateTime>? Gin) => _$this._Gin = Gin;

  ListBuilder<GDateTime>? _nin;
  ListBuilder<GDateTime> get nin =>
      _$this._nin ??= new ListBuilder<GDateTime>();
  set nin(ListBuilder<GDateTime>? nin) => _$this._nin = nin;

  GDateTimeBuilder? _gt;
  GDateTimeBuilder get gt => _$this._gt ??= new GDateTimeBuilder();
  set gt(GDateTimeBuilder? gt) => _$this._gt = gt;

  GDateTimeBuilder? _ngt;
  GDateTimeBuilder get ngt => _$this._ngt ??= new GDateTimeBuilder();
  set ngt(GDateTimeBuilder? ngt) => _$this._ngt = ngt;

  GDateTimeBuilder? _gte;
  GDateTimeBuilder get gte => _$this._gte ??= new GDateTimeBuilder();
  set gte(GDateTimeBuilder? gte) => _$this._gte = gte;

  GDateTimeBuilder? _ngte;
  GDateTimeBuilder get ngte => _$this._ngte ??= new GDateTimeBuilder();
  set ngte(GDateTimeBuilder? ngte) => _$this._ngte = ngte;

  GDateTimeBuilder? _lt;
  GDateTimeBuilder get lt => _$this._lt ??= new GDateTimeBuilder();
  set lt(GDateTimeBuilder? lt) => _$this._lt = lt;

  GDateTimeBuilder? _nlt;
  GDateTimeBuilder get nlt => _$this._nlt ??= new GDateTimeBuilder();
  set nlt(GDateTimeBuilder? nlt) => _$this._nlt = nlt;

  GDateTimeBuilder? _lte;
  GDateTimeBuilder get lte => _$this._lte ??= new GDateTimeBuilder();
  set lte(GDateTimeBuilder? lte) => _$this._lte = lte;

  GDateTimeBuilder? _nlte;
  GDateTimeBuilder get nlte => _$this._nlte ??= new GDateTimeBuilder();
  set nlte(GDateTimeBuilder? nlte) => _$this._nlte = nlte;

  GComparableNullableOfDateTimeOffsetOperationFilterInputBuilder();

  GComparableNullableOfDateTimeOffsetOperationFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _eq = $v.eq?.toBuilder();
      _neq = $v.neq?.toBuilder();
      _Gin = $v.Gin?.toBuilder();
      _nin = $v.nin?.toBuilder();
      _gt = $v.gt?.toBuilder();
      _ngt = $v.ngt?.toBuilder();
      _gte = $v.gte?.toBuilder();
      _ngte = $v.ngte?.toBuilder();
      _lt = $v.lt?.toBuilder();
      _nlt = $v.nlt?.toBuilder();
      _lte = $v.lte?.toBuilder();
      _nlte = $v.nlte?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GComparableNullableOfDateTimeOffsetOperationFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GComparableNullableOfDateTimeOffsetOperationFilterInput;
  }

  @override
  void update(
      void Function(
              GComparableNullableOfDateTimeOffsetOperationFilterInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GComparableNullableOfDateTimeOffsetOperationFilterInput build() => _build();

  _$GComparableNullableOfDateTimeOffsetOperationFilterInput _build() {
    _$GComparableNullableOfDateTimeOffsetOperationFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GComparableNullableOfDateTimeOffsetOperationFilterInput._(
              eq: _eq?.build(),
              neq: _neq?.build(),
              Gin: _Gin?.build(),
              nin: _nin?.build(),
              gt: _gt?.build(),
              ngt: _ngt?.build(),
              gte: _gte?.build(),
              ngte: _ngte?.build(),
              lt: _lt?.build(),
              nlt: _nlt?.build(),
              lte: _lte?.build(),
              nlte: _nlte?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'eq';
        _eq?.build();
        _$failedField = 'neq';
        _neq?.build();
        _$failedField = 'Gin';
        _Gin?.build();
        _$failedField = 'nin';
        _nin?.build();
        _$failedField = 'gt';
        _gt?.build();
        _$failedField = 'ngt';
        _ngt?.build();
        _$failedField = 'gte';
        _gte?.build();
        _$failedField = 'ngte';
        _ngte?.build();
        _$failedField = 'lt';
        _lt?.build();
        _$failedField = 'nlt';
        _nlt?.build();
        _$failedField = 'lte';
        _lte?.build();
        _$failedField = 'nlte';
        _nlte?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GComparableNullableOfDateTimeOffsetOperationFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GIdentificationDocumentSortInput
    extends GIdentificationDocumentSortInput {
  @override
  final GSortEnumType? id;
  @override
  final GSortEnumType? nationalIdFront;
  @override
  final GSortEnumType? nationalIdRear;
  @override
  final GSortEnumType? drivingLicenceFront;
  @override
  final GSortEnumType? drivingLicenceRear;

  factory _$GIdentificationDocumentSortInput(
          [void Function(GIdentificationDocumentSortInputBuilder)? updates]) =>
      (new GIdentificationDocumentSortInputBuilder()..update(updates))._build();

  _$GIdentificationDocumentSortInput._(
      {this.id,
      this.nationalIdFront,
      this.nationalIdRear,
      this.drivingLicenceFront,
      this.drivingLicenceRear})
      : super._();

  @override
  GIdentificationDocumentSortInput rebuild(
          void Function(GIdentificationDocumentSortInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GIdentificationDocumentSortInputBuilder toBuilder() =>
      new GIdentificationDocumentSortInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GIdentificationDocumentSortInput &&
        id == other.id &&
        nationalIdFront == other.nationalIdFront &&
        nationalIdRear == other.nationalIdRear &&
        drivingLicenceFront == other.drivingLicenceFront &&
        drivingLicenceRear == other.drivingLicenceRear;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, nationalIdFront.hashCode);
    _$hash = $jc(_$hash, nationalIdRear.hashCode);
    _$hash = $jc(_$hash, drivingLicenceFront.hashCode);
    _$hash = $jc(_$hash, drivingLicenceRear.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GIdentificationDocumentSortInput')
          ..add('id', id)
          ..add('nationalIdFront', nationalIdFront)
          ..add('nationalIdRear', nationalIdRear)
          ..add('drivingLicenceFront', drivingLicenceFront)
          ..add('drivingLicenceRear', drivingLicenceRear))
        .toString();
  }
}

class GIdentificationDocumentSortInputBuilder
    implements
        Builder<GIdentificationDocumentSortInput,
            GIdentificationDocumentSortInputBuilder> {
  _$GIdentificationDocumentSortInput? _$v;

  GSortEnumType? _id;
  GSortEnumType? get id => _$this._id;
  set id(GSortEnumType? id) => _$this._id = id;

  GSortEnumType? _nationalIdFront;
  GSortEnumType? get nationalIdFront => _$this._nationalIdFront;
  set nationalIdFront(GSortEnumType? nationalIdFront) =>
      _$this._nationalIdFront = nationalIdFront;

  GSortEnumType? _nationalIdRear;
  GSortEnumType? get nationalIdRear => _$this._nationalIdRear;
  set nationalIdRear(GSortEnumType? nationalIdRear) =>
      _$this._nationalIdRear = nationalIdRear;

  GSortEnumType? _drivingLicenceFront;
  GSortEnumType? get drivingLicenceFront => _$this._drivingLicenceFront;
  set drivingLicenceFront(GSortEnumType? drivingLicenceFront) =>
      _$this._drivingLicenceFront = drivingLicenceFront;

  GSortEnumType? _drivingLicenceRear;
  GSortEnumType? get drivingLicenceRear => _$this._drivingLicenceRear;
  set drivingLicenceRear(GSortEnumType? drivingLicenceRear) =>
      _$this._drivingLicenceRear = drivingLicenceRear;

  GIdentificationDocumentSortInputBuilder();

  GIdentificationDocumentSortInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _nationalIdFront = $v.nationalIdFront;
      _nationalIdRear = $v.nationalIdRear;
      _drivingLicenceFront = $v.drivingLicenceFront;
      _drivingLicenceRear = $v.drivingLicenceRear;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GIdentificationDocumentSortInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GIdentificationDocumentSortInput;
  }

  @override
  void update(void Function(GIdentificationDocumentSortInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GIdentificationDocumentSortInput build() => _build();

  _$GIdentificationDocumentSortInput _build() {
    final _$result = _$v ??
        new _$GIdentificationDocumentSortInput._(
            id: id,
            nationalIdFront: nationalIdFront,
            nationalIdRear: nationalIdRear,
            drivingLicenceFront: drivingLicenceFront,
            drivingLicenceRear: drivingLicenceRear);
    replace(_$result);
    return _$result;
  }
}

class _$GDeviceSortInput extends GDeviceSortInput {
  @override
  final GSortEnumType? id;
  @override
  final GSortEnumType? deviceRegToken;
  @override
  final GSortEnumType? createdOn;
  @override
  final GSortEnumType? createdBy;
  @override
  final GSortEnumType? lastModifiedOn;
  @override
  final GSortEnumType? lastModifiedBy;

  factory _$GDeviceSortInput(
          [void Function(GDeviceSortInputBuilder)? updates]) =>
      (new GDeviceSortInputBuilder()..update(updates))._build();

  _$GDeviceSortInput._(
      {this.id,
      this.deviceRegToken,
      this.createdOn,
      this.createdBy,
      this.lastModifiedOn,
      this.lastModifiedBy})
      : super._();

  @override
  GDeviceSortInput rebuild(void Function(GDeviceSortInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GDeviceSortInputBuilder toBuilder() =>
      new GDeviceSortInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GDeviceSortInput &&
        id == other.id &&
        deviceRegToken == other.deviceRegToken &&
        createdOn == other.createdOn &&
        createdBy == other.createdBy &&
        lastModifiedOn == other.lastModifiedOn &&
        lastModifiedBy == other.lastModifiedBy;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, deviceRegToken.hashCode);
    _$hash = $jc(_$hash, createdOn.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, lastModifiedOn.hashCode);
    _$hash = $jc(_$hash, lastModifiedBy.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GDeviceSortInput')
          ..add('id', id)
          ..add('deviceRegToken', deviceRegToken)
          ..add('createdOn', createdOn)
          ..add('createdBy', createdBy)
          ..add('lastModifiedOn', lastModifiedOn)
          ..add('lastModifiedBy', lastModifiedBy))
        .toString();
  }
}

class GDeviceSortInputBuilder
    implements Builder<GDeviceSortInput, GDeviceSortInputBuilder> {
  _$GDeviceSortInput? _$v;

  GSortEnumType? _id;
  GSortEnumType? get id => _$this._id;
  set id(GSortEnumType? id) => _$this._id = id;

  GSortEnumType? _deviceRegToken;
  GSortEnumType? get deviceRegToken => _$this._deviceRegToken;
  set deviceRegToken(GSortEnumType? deviceRegToken) =>
      _$this._deviceRegToken = deviceRegToken;

  GSortEnumType? _createdOn;
  GSortEnumType? get createdOn => _$this._createdOn;
  set createdOn(GSortEnumType? createdOn) => _$this._createdOn = createdOn;

  GSortEnumType? _createdBy;
  GSortEnumType? get createdBy => _$this._createdBy;
  set createdBy(GSortEnumType? createdBy) => _$this._createdBy = createdBy;

  GSortEnumType? _lastModifiedOn;
  GSortEnumType? get lastModifiedOn => _$this._lastModifiedOn;
  set lastModifiedOn(GSortEnumType? lastModifiedOn) =>
      _$this._lastModifiedOn = lastModifiedOn;

  GSortEnumType? _lastModifiedBy;
  GSortEnumType? get lastModifiedBy => _$this._lastModifiedBy;
  set lastModifiedBy(GSortEnumType? lastModifiedBy) =>
      _$this._lastModifiedBy = lastModifiedBy;

  GDeviceSortInputBuilder();

  GDeviceSortInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _deviceRegToken = $v.deviceRegToken;
      _createdOn = $v.createdOn;
      _createdBy = $v.createdBy;
      _lastModifiedOn = $v.lastModifiedOn;
      _lastModifiedBy = $v.lastModifiedBy;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GDeviceSortInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GDeviceSortInput;
  }

  @override
  void update(void Function(GDeviceSortInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GDeviceSortInput build() => _build();

  _$GDeviceSortInput _build() {
    final _$result = _$v ??
        new _$GDeviceSortInput._(
            id: id,
            deviceRegToken: deviceRegToken,
            createdOn: createdOn,
            createdBy: createdBy,
            lastModifiedOn: lastModifiedOn,
            lastModifiedBy: lastModifiedBy);
    replace(_$result);
    return _$result;
  }
}

class _$GCountryFilterInput extends GCountryFilterInput {
  @override
  final BuiltList<GCountryFilterInput>? and;
  @override
  final BuiltList<GCountryFilterInput>? or;
  @override
  final GComparableInt32OperationFilterInput? id;
  @override
  final GStringOperationFilterInput? name;
  @override
  final GStringOperationFilterInput? code;
  @override
  final GStringOperationFilterInput? abbrev;

  factory _$GCountryFilterInput(
          [void Function(GCountryFilterInputBuilder)? updates]) =>
      (new GCountryFilterInputBuilder()..update(updates))._build();

  _$GCountryFilterInput._(
      {this.and, this.or, this.id, this.name, this.code, this.abbrev})
      : super._();

  @override
  GCountryFilterInput rebuild(
          void Function(GCountryFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCountryFilterInputBuilder toBuilder() =>
      new GCountryFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCountryFilterInput &&
        and == other.and &&
        or == other.or &&
        id == other.id &&
        name == other.name &&
        code == other.code &&
        abbrev == other.abbrev;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, and.hashCode);
    _$hash = $jc(_$hash, or.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, name.hashCode);
    _$hash = $jc(_$hash, code.hashCode);
    _$hash = $jc(_$hash, abbrev.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCountryFilterInput')
          ..add('and', and)
          ..add('or', or)
          ..add('id', id)
          ..add('name', name)
          ..add('code', code)
          ..add('abbrev', abbrev))
        .toString();
  }
}

class GCountryFilterInputBuilder
    implements Builder<GCountryFilterInput, GCountryFilterInputBuilder> {
  _$GCountryFilterInput? _$v;

  ListBuilder<GCountryFilterInput>? _and;
  ListBuilder<GCountryFilterInput> get and =>
      _$this._and ??= new ListBuilder<GCountryFilterInput>();
  set and(ListBuilder<GCountryFilterInput>? and) => _$this._and = and;

  ListBuilder<GCountryFilterInput>? _or;
  ListBuilder<GCountryFilterInput> get or =>
      _$this._or ??= new ListBuilder<GCountryFilterInput>();
  set or(ListBuilder<GCountryFilterInput>? or) => _$this._or = or;

  GComparableInt32OperationFilterInputBuilder? _id;
  GComparableInt32OperationFilterInputBuilder get id =>
      _$this._id ??= new GComparableInt32OperationFilterInputBuilder();
  set id(GComparableInt32OperationFilterInputBuilder? id) => _$this._id = id;

  GStringOperationFilterInputBuilder? _name;
  GStringOperationFilterInputBuilder get name =>
      _$this._name ??= new GStringOperationFilterInputBuilder();
  set name(GStringOperationFilterInputBuilder? name) => _$this._name = name;

  GStringOperationFilterInputBuilder? _code;
  GStringOperationFilterInputBuilder get code =>
      _$this._code ??= new GStringOperationFilterInputBuilder();
  set code(GStringOperationFilterInputBuilder? code) => _$this._code = code;

  GStringOperationFilterInputBuilder? _abbrev;
  GStringOperationFilterInputBuilder get abbrev =>
      _$this._abbrev ??= new GStringOperationFilterInputBuilder();
  set abbrev(GStringOperationFilterInputBuilder? abbrev) =>
      _$this._abbrev = abbrev;

  GCountryFilterInputBuilder();

  GCountryFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _and = $v.and?.toBuilder();
      _or = $v.or?.toBuilder();
      _id = $v.id?.toBuilder();
      _name = $v.name?.toBuilder();
      _code = $v.code?.toBuilder();
      _abbrev = $v.abbrev?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCountryFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCountryFilterInput;
  }

  @override
  void update(void Function(GCountryFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCountryFilterInput build() => _build();

  _$GCountryFilterInput _build() {
    _$GCountryFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GCountryFilterInput._(
              and: _and?.build(),
              or: _or?.build(),
              id: _id?.build(),
              name: _name?.build(),
              code: _code?.build(),
              abbrev: _abbrev?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'and';
        _and?.build();
        _$failedField = 'or';
        _or?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'name';
        _name?.build();
        _$failedField = 'code';
        _code?.build();
        _$failedField = 'abbrev';
        _abbrev?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCountryFilterInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCountrySortInput extends GCountrySortInput {
  @override
  final GSortEnumType? id;
  @override
  final GSortEnumType? name;
  @override
  final GSortEnumType? code;
  @override
  final GSortEnumType? abbrev;

  factory _$GCountrySortInput(
          [void Function(GCountrySortInputBuilder)? updates]) =>
      (new GCountrySortInputBuilder()..update(updates))._build();

  _$GCountrySortInput._({this.id, this.name, this.code, this.abbrev})
      : super._();

  @override
  GCountrySortInput rebuild(void Function(GCountrySortInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCountrySortInputBuilder toBuilder() =>
      new GCountrySortInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCountrySortInput &&
        id == other.id &&
        name == other.name &&
        code == other.code &&
        abbrev == other.abbrev;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, name.hashCode);
    _$hash = $jc(_$hash, code.hashCode);
    _$hash = $jc(_$hash, abbrev.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCountrySortInput')
          ..add('id', id)
          ..add('name', name)
          ..add('code', code)
          ..add('abbrev', abbrev))
        .toString();
  }
}

class GCountrySortInputBuilder
    implements Builder<GCountrySortInput, GCountrySortInputBuilder> {
  _$GCountrySortInput? _$v;

  GSortEnumType? _id;
  GSortEnumType? get id => _$this._id;
  set id(GSortEnumType? id) => _$this._id = id;

  GSortEnumType? _name;
  GSortEnumType? get name => _$this._name;
  set name(GSortEnumType? name) => _$this._name = name;

  GSortEnumType? _code;
  GSortEnumType? get code => _$this._code;
  set code(GSortEnumType? code) => _$this._code = code;

  GSortEnumType? _abbrev;
  GSortEnumType? get abbrev => _$this._abbrev;
  set abbrev(GSortEnumType? abbrev) => _$this._abbrev = abbrev;

  GCountrySortInputBuilder();

  GCountrySortInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _name = $v.name;
      _code = $v.code;
      _abbrev = $v.abbrev;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCountrySortInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCountrySortInput;
  }

  @override
  void update(void Function(GCountrySortInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCountrySortInput build() => _build();

  _$GCountrySortInput _build() {
    final _$result = _$v ??
        new _$GCountrySortInput._(
            id: id, name: name, code: code, abbrev: abbrev);
    replace(_$result);
    return _$result;
  }
}

class _$GComparableDateTimeOperationFilterInput
    extends GComparableDateTimeOperationFilterInput {
  @override
  final GDateTime? eq;
  @override
  final GDateTime? neq;
  @override
  final BuiltList<GDateTime>? Gin;
  @override
  final BuiltList<GDateTime>? nin;
  @override
  final GDateTime? gt;
  @override
  final GDateTime? ngt;
  @override
  final GDateTime? gte;
  @override
  final GDateTime? ngte;
  @override
  final GDateTime? lt;
  @override
  final GDateTime? nlt;
  @override
  final GDateTime? lte;
  @override
  final GDateTime? nlte;

  factory _$GComparableDateTimeOperationFilterInput(
          [void Function(GComparableDateTimeOperationFilterInputBuilder)?
              updates]) =>
      (new GComparableDateTimeOperationFilterInputBuilder()..update(updates))
          ._build();

  _$GComparableDateTimeOperationFilterInput._(
      {this.eq,
      this.neq,
      this.Gin,
      this.nin,
      this.gt,
      this.ngt,
      this.gte,
      this.ngte,
      this.lt,
      this.nlt,
      this.lte,
      this.nlte})
      : super._();

  @override
  GComparableDateTimeOperationFilterInput rebuild(
          void Function(GComparableDateTimeOperationFilterInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GComparableDateTimeOperationFilterInputBuilder toBuilder() =>
      new GComparableDateTimeOperationFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GComparableDateTimeOperationFilterInput &&
        eq == other.eq &&
        neq == other.neq &&
        Gin == other.Gin &&
        nin == other.nin &&
        gt == other.gt &&
        ngt == other.ngt &&
        gte == other.gte &&
        ngte == other.ngte &&
        lt == other.lt &&
        nlt == other.nlt &&
        lte == other.lte &&
        nlte == other.nlte;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, eq.hashCode);
    _$hash = $jc(_$hash, neq.hashCode);
    _$hash = $jc(_$hash, Gin.hashCode);
    _$hash = $jc(_$hash, nin.hashCode);
    _$hash = $jc(_$hash, gt.hashCode);
    _$hash = $jc(_$hash, ngt.hashCode);
    _$hash = $jc(_$hash, gte.hashCode);
    _$hash = $jc(_$hash, ngte.hashCode);
    _$hash = $jc(_$hash, lt.hashCode);
    _$hash = $jc(_$hash, nlt.hashCode);
    _$hash = $jc(_$hash, lte.hashCode);
    _$hash = $jc(_$hash, nlte.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GComparableDateTimeOperationFilterInput')
          ..add('eq', eq)
          ..add('neq', neq)
          ..add('Gin', Gin)
          ..add('nin', nin)
          ..add('gt', gt)
          ..add('ngt', ngt)
          ..add('gte', gte)
          ..add('ngte', ngte)
          ..add('lt', lt)
          ..add('nlt', nlt)
          ..add('lte', lte)
          ..add('nlte', nlte))
        .toString();
  }
}

class GComparableDateTimeOperationFilterInputBuilder
    implements
        Builder<GComparableDateTimeOperationFilterInput,
            GComparableDateTimeOperationFilterInputBuilder> {
  _$GComparableDateTimeOperationFilterInput? _$v;

  GDateTimeBuilder? _eq;
  GDateTimeBuilder get eq => _$this._eq ??= new GDateTimeBuilder();
  set eq(GDateTimeBuilder? eq) => _$this._eq = eq;

  GDateTimeBuilder? _neq;
  GDateTimeBuilder get neq => _$this._neq ??= new GDateTimeBuilder();
  set neq(GDateTimeBuilder? neq) => _$this._neq = neq;

  ListBuilder<GDateTime>? _Gin;
  ListBuilder<GDateTime> get Gin =>
      _$this._Gin ??= new ListBuilder<GDateTime>();
  set Gin(ListBuilder<GDateTime>? Gin) => _$this._Gin = Gin;

  ListBuilder<GDateTime>? _nin;
  ListBuilder<GDateTime> get nin =>
      _$this._nin ??= new ListBuilder<GDateTime>();
  set nin(ListBuilder<GDateTime>? nin) => _$this._nin = nin;

  GDateTimeBuilder? _gt;
  GDateTimeBuilder get gt => _$this._gt ??= new GDateTimeBuilder();
  set gt(GDateTimeBuilder? gt) => _$this._gt = gt;

  GDateTimeBuilder? _ngt;
  GDateTimeBuilder get ngt => _$this._ngt ??= new GDateTimeBuilder();
  set ngt(GDateTimeBuilder? ngt) => _$this._ngt = ngt;

  GDateTimeBuilder? _gte;
  GDateTimeBuilder get gte => _$this._gte ??= new GDateTimeBuilder();
  set gte(GDateTimeBuilder? gte) => _$this._gte = gte;

  GDateTimeBuilder? _ngte;
  GDateTimeBuilder get ngte => _$this._ngte ??= new GDateTimeBuilder();
  set ngte(GDateTimeBuilder? ngte) => _$this._ngte = ngte;

  GDateTimeBuilder? _lt;
  GDateTimeBuilder get lt => _$this._lt ??= new GDateTimeBuilder();
  set lt(GDateTimeBuilder? lt) => _$this._lt = lt;

  GDateTimeBuilder? _nlt;
  GDateTimeBuilder get nlt => _$this._nlt ??= new GDateTimeBuilder();
  set nlt(GDateTimeBuilder? nlt) => _$this._nlt = nlt;

  GDateTimeBuilder? _lte;
  GDateTimeBuilder get lte => _$this._lte ??= new GDateTimeBuilder();
  set lte(GDateTimeBuilder? lte) => _$this._lte = lte;

  GDateTimeBuilder? _nlte;
  GDateTimeBuilder get nlte => _$this._nlte ??= new GDateTimeBuilder();
  set nlte(GDateTimeBuilder? nlte) => _$this._nlte = nlte;

  GComparableDateTimeOperationFilterInputBuilder();

  GComparableDateTimeOperationFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _eq = $v.eq?.toBuilder();
      _neq = $v.neq?.toBuilder();
      _Gin = $v.Gin?.toBuilder();
      _nin = $v.nin?.toBuilder();
      _gt = $v.gt?.toBuilder();
      _ngt = $v.ngt?.toBuilder();
      _gte = $v.gte?.toBuilder();
      _ngte = $v.ngte?.toBuilder();
      _lt = $v.lt?.toBuilder();
      _nlt = $v.nlt?.toBuilder();
      _lte = $v.lte?.toBuilder();
      _nlte = $v.nlte?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GComparableDateTimeOperationFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GComparableDateTimeOperationFilterInput;
  }

  @override
  void update(
      void Function(GComparableDateTimeOperationFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GComparableDateTimeOperationFilterInput build() => _build();

  _$GComparableDateTimeOperationFilterInput _build() {
    _$GComparableDateTimeOperationFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GComparableDateTimeOperationFilterInput._(
              eq: _eq?.build(),
              neq: _neq?.build(),
              Gin: _Gin?.build(),
              nin: _nin?.build(),
              gt: _gt?.build(),
              ngt: _ngt?.build(),
              gte: _gte?.build(),
              ngte: _ngte?.build(),
              lt: _lt?.build(),
              nlt: _nlt?.build(),
              lte: _lte?.build(),
              nlte: _nlte?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'eq';
        _eq?.build();
        _$failedField = 'neq';
        _neq?.build();
        _$failedField = 'Gin';
        _Gin?.build();
        _$failedField = 'nin';
        _nin?.build();
        _$failedField = 'gt';
        _gt?.build();
        _$failedField = 'ngt';
        _ngt?.build();
        _$failedField = 'gte';
        _gte?.build();
        _$failedField = 'ngte';
        _ngte?.build();
        _$failedField = 'lt';
        _lt?.build();
        _$failedField = 'nlt';
        _nlt?.build();
        _$failedField = 'lte';
        _lte?.build();
        _$failedField = 'nlte';
        _nlte?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GComparableDateTimeOperationFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GSeatFilterInput extends GSeatFilterInput {
  @override
  final BuiltList<GSeatFilterInput>? and;
  @override
  final BuiltList<GSeatFilterInput>? or;
  @override
  final GStringOperationFilterInput? id;
  @override
  final GStringOperationFilterInput? frontLeft;
  @override
  final GStringOperationFilterInput? middleLeft;
  @override
  final GStringOperationFilterInput? middleCentre;
  @override
  final GStringOperationFilterInput? middleRight;
  @override
  final GStringOperationFilterInput? backLeft;
  @override
  final GStringOperationFilterInput? backCentre;
  @override
  final GStringOperationFilterInput? backRight;

  factory _$GSeatFilterInput(
          [void Function(GSeatFilterInputBuilder)? updates]) =>
      (new GSeatFilterInputBuilder()..update(updates))._build();

  _$GSeatFilterInput._(
      {this.and,
      this.or,
      this.id,
      this.frontLeft,
      this.middleLeft,
      this.middleCentre,
      this.middleRight,
      this.backLeft,
      this.backCentre,
      this.backRight})
      : super._();

  @override
  GSeatFilterInput rebuild(void Function(GSeatFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GSeatFilterInputBuilder toBuilder() =>
      new GSeatFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GSeatFilterInput &&
        and == other.and &&
        or == other.or &&
        id == other.id &&
        frontLeft == other.frontLeft &&
        middleLeft == other.middleLeft &&
        middleCentre == other.middleCentre &&
        middleRight == other.middleRight &&
        backLeft == other.backLeft &&
        backCentre == other.backCentre &&
        backRight == other.backRight;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, and.hashCode);
    _$hash = $jc(_$hash, or.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, frontLeft.hashCode);
    _$hash = $jc(_$hash, middleLeft.hashCode);
    _$hash = $jc(_$hash, middleCentre.hashCode);
    _$hash = $jc(_$hash, middleRight.hashCode);
    _$hash = $jc(_$hash, backLeft.hashCode);
    _$hash = $jc(_$hash, backCentre.hashCode);
    _$hash = $jc(_$hash, backRight.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GSeatFilterInput')
          ..add('and', and)
          ..add('or', or)
          ..add('id', id)
          ..add('frontLeft', frontLeft)
          ..add('middleLeft', middleLeft)
          ..add('middleCentre', middleCentre)
          ..add('middleRight', middleRight)
          ..add('backLeft', backLeft)
          ..add('backCentre', backCentre)
          ..add('backRight', backRight))
        .toString();
  }
}

class GSeatFilterInputBuilder
    implements Builder<GSeatFilterInput, GSeatFilterInputBuilder> {
  _$GSeatFilterInput? _$v;

  ListBuilder<GSeatFilterInput>? _and;
  ListBuilder<GSeatFilterInput> get and =>
      _$this._and ??= new ListBuilder<GSeatFilterInput>();
  set and(ListBuilder<GSeatFilterInput>? and) => _$this._and = and;

  ListBuilder<GSeatFilterInput>? _or;
  ListBuilder<GSeatFilterInput> get or =>
      _$this._or ??= new ListBuilder<GSeatFilterInput>();
  set or(ListBuilder<GSeatFilterInput>? or) => _$this._or = or;

  GStringOperationFilterInputBuilder? _id;
  GStringOperationFilterInputBuilder get id =>
      _$this._id ??= new GStringOperationFilterInputBuilder();
  set id(GStringOperationFilterInputBuilder? id) => _$this._id = id;

  GStringOperationFilterInputBuilder? _frontLeft;
  GStringOperationFilterInputBuilder get frontLeft =>
      _$this._frontLeft ??= new GStringOperationFilterInputBuilder();
  set frontLeft(GStringOperationFilterInputBuilder? frontLeft) =>
      _$this._frontLeft = frontLeft;

  GStringOperationFilterInputBuilder? _middleLeft;
  GStringOperationFilterInputBuilder get middleLeft =>
      _$this._middleLeft ??= new GStringOperationFilterInputBuilder();
  set middleLeft(GStringOperationFilterInputBuilder? middleLeft) =>
      _$this._middleLeft = middleLeft;

  GStringOperationFilterInputBuilder? _middleCentre;
  GStringOperationFilterInputBuilder get middleCentre =>
      _$this._middleCentre ??= new GStringOperationFilterInputBuilder();
  set middleCentre(GStringOperationFilterInputBuilder? middleCentre) =>
      _$this._middleCentre = middleCentre;

  GStringOperationFilterInputBuilder? _middleRight;
  GStringOperationFilterInputBuilder get middleRight =>
      _$this._middleRight ??= new GStringOperationFilterInputBuilder();
  set middleRight(GStringOperationFilterInputBuilder? middleRight) =>
      _$this._middleRight = middleRight;

  GStringOperationFilterInputBuilder? _backLeft;
  GStringOperationFilterInputBuilder get backLeft =>
      _$this._backLeft ??= new GStringOperationFilterInputBuilder();
  set backLeft(GStringOperationFilterInputBuilder? backLeft) =>
      _$this._backLeft = backLeft;

  GStringOperationFilterInputBuilder? _backCentre;
  GStringOperationFilterInputBuilder get backCentre =>
      _$this._backCentre ??= new GStringOperationFilterInputBuilder();
  set backCentre(GStringOperationFilterInputBuilder? backCentre) =>
      _$this._backCentre = backCentre;

  GStringOperationFilterInputBuilder? _backRight;
  GStringOperationFilterInputBuilder get backRight =>
      _$this._backRight ??= new GStringOperationFilterInputBuilder();
  set backRight(GStringOperationFilterInputBuilder? backRight) =>
      _$this._backRight = backRight;

  GSeatFilterInputBuilder();

  GSeatFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _and = $v.and?.toBuilder();
      _or = $v.or?.toBuilder();
      _id = $v.id?.toBuilder();
      _frontLeft = $v.frontLeft?.toBuilder();
      _middleLeft = $v.middleLeft?.toBuilder();
      _middleCentre = $v.middleCentre?.toBuilder();
      _middleRight = $v.middleRight?.toBuilder();
      _backLeft = $v.backLeft?.toBuilder();
      _backCentre = $v.backCentre?.toBuilder();
      _backRight = $v.backRight?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GSeatFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GSeatFilterInput;
  }

  @override
  void update(void Function(GSeatFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GSeatFilterInput build() => _build();

  _$GSeatFilterInput _build() {
    _$GSeatFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GSeatFilterInput._(
              and: _and?.build(),
              or: _or?.build(),
              id: _id?.build(),
              frontLeft: _frontLeft?.build(),
              middleLeft: _middleLeft?.build(),
              middleCentre: _middleCentre?.build(),
              middleRight: _middleRight?.build(),
              backLeft: _backLeft?.build(),
              backCentre: _backCentre?.build(),
              backRight: _backRight?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'and';
        _and?.build();
        _$failedField = 'or';
        _or?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'frontLeft';
        _frontLeft?.build();
        _$failedField = 'middleLeft';
        _middleLeft?.build();
        _$failedField = 'middleCentre';
        _middleCentre?.build();
        _$failedField = 'middleRight';
        _middleRight?.build();
        _$failedField = 'backLeft';
        _backLeft?.build();
        _$failedField = 'backCentre';
        _backCentre?.build();
        _$failedField = 'backRight';
        _backRight?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GSeatFilterInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GComparableDecimalOperationFilterInput
    extends GComparableDecimalOperationFilterInput {
  @override
  final GDecimal? eq;
  @override
  final GDecimal? neq;
  @override
  final BuiltList<GDecimal>? Gin;
  @override
  final BuiltList<GDecimal>? nin;
  @override
  final GDecimal? gt;
  @override
  final GDecimal? ngt;
  @override
  final GDecimal? gte;
  @override
  final GDecimal? ngte;
  @override
  final GDecimal? lt;
  @override
  final GDecimal? nlt;
  @override
  final GDecimal? lte;
  @override
  final GDecimal? nlte;

  factory _$GComparableDecimalOperationFilterInput(
          [void Function(GComparableDecimalOperationFilterInputBuilder)?
              updates]) =>
      (new GComparableDecimalOperationFilterInputBuilder()..update(updates))
          ._build();

  _$GComparableDecimalOperationFilterInput._(
      {this.eq,
      this.neq,
      this.Gin,
      this.nin,
      this.gt,
      this.ngt,
      this.gte,
      this.ngte,
      this.lt,
      this.nlt,
      this.lte,
      this.nlte})
      : super._();

  @override
  GComparableDecimalOperationFilterInput rebuild(
          void Function(GComparableDecimalOperationFilterInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GComparableDecimalOperationFilterInputBuilder toBuilder() =>
      new GComparableDecimalOperationFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GComparableDecimalOperationFilterInput &&
        eq == other.eq &&
        neq == other.neq &&
        Gin == other.Gin &&
        nin == other.nin &&
        gt == other.gt &&
        ngt == other.ngt &&
        gte == other.gte &&
        ngte == other.ngte &&
        lt == other.lt &&
        nlt == other.nlt &&
        lte == other.lte &&
        nlte == other.nlte;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, eq.hashCode);
    _$hash = $jc(_$hash, neq.hashCode);
    _$hash = $jc(_$hash, Gin.hashCode);
    _$hash = $jc(_$hash, nin.hashCode);
    _$hash = $jc(_$hash, gt.hashCode);
    _$hash = $jc(_$hash, ngt.hashCode);
    _$hash = $jc(_$hash, gte.hashCode);
    _$hash = $jc(_$hash, ngte.hashCode);
    _$hash = $jc(_$hash, lt.hashCode);
    _$hash = $jc(_$hash, nlt.hashCode);
    _$hash = $jc(_$hash, lte.hashCode);
    _$hash = $jc(_$hash, nlte.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GComparableDecimalOperationFilterInput')
          ..add('eq', eq)
          ..add('neq', neq)
          ..add('Gin', Gin)
          ..add('nin', nin)
          ..add('gt', gt)
          ..add('ngt', ngt)
          ..add('gte', gte)
          ..add('ngte', ngte)
          ..add('lt', lt)
          ..add('nlt', nlt)
          ..add('lte', lte)
          ..add('nlte', nlte))
        .toString();
  }
}

class GComparableDecimalOperationFilterInputBuilder
    implements
        Builder<GComparableDecimalOperationFilterInput,
            GComparableDecimalOperationFilterInputBuilder> {
  _$GComparableDecimalOperationFilterInput? _$v;

  GDecimalBuilder? _eq;
  GDecimalBuilder get eq => _$this._eq ??= new GDecimalBuilder();
  set eq(GDecimalBuilder? eq) => _$this._eq = eq;

  GDecimalBuilder? _neq;
  GDecimalBuilder get neq => _$this._neq ??= new GDecimalBuilder();
  set neq(GDecimalBuilder? neq) => _$this._neq = neq;

  ListBuilder<GDecimal>? _Gin;
  ListBuilder<GDecimal> get Gin => _$this._Gin ??= new ListBuilder<GDecimal>();
  set Gin(ListBuilder<GDecimal>? Gin) => _$this._Gin = Gin;

  ListBuilder<GDecimal>? _nin;
  ListBuilder<GDecimal> get nin => _$this._nin ??= new ListBuilder<GDecimal>();
  set nin(ListBuilder<GDecimal>? nin) => _$this._nin = nin;

  GDecimalBuilder? _gt;
  GDecimalBuilder get gt => _$this._gt ??= new GDecimalBuilder();
  set gt(GDecimalBuilder? gt) => _$this._gt = gt;

  GDecimalBuilder? _ngt;
  GDecimalBuilder get ngt => _$this._ngt ??= new GDecimalBuilder();
  set ngt(GDecimalBuilder? ngt) => _$this._ngt = ngt;

  GDecimalBuilder? _gte;
  GDecimalBuilder get gte => _$this._gte ??= new GDecimalBuilder();
  set gte(GDecimalBuilder? gte) => _$this._gte = gte;

  GDecimalBuilder? _ngte;
  GDecimalBuilder get ngte => _$this._ngte ??= new GDecimalBuilder();
  set ngte(GDecimalBuilder? ngte) => _$this._ngte = ngte;

  GDecimalBuilder? _lt;
  GDecimalBuilder get lt => _$this._lt ??= new GDecimalBuilder();
  set lt(GDecimalBuilder? lt) => _$this._lt = lt;

  GDecimalBuilder? _nlt;
  GDecimalBuilder get nlt => _$this._nlt ??= new GDecimalBuilder();
  set nlt(GDecimalBuilder? nlt) => _$this._nlt = nlt;

  GDecimalBuilder? _lte;
  GDecimalBuilder get lte => _$this._lte ??= new GDecimalBuilder();
  set lte(GDecimalBuilder? lte) => _$this._lte = lte;

  GDecimalBuilder? _nlte;
  GDecimalBuilder get nlte => _$this._nlte ??= new GDecimalBuilder();
  set nlte(GDecimalBuilder? nlte) => _$this._nlte = nlte;

  GComparableDecimalOperationFilterInputBuilder();

  GComparableDecimalOperationFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _eq = $v.eq?.toBuilder();
      _neq = $v.neq?.toBuilder();
      _Gin = $v.Gin?.toBuilder();
      _nin = $v.nin?.toBuilder();
      _gt = $v.gt?.toBuilder();
      _ngt = $v.ngt?.toBuilder();
      _gte = $v.gte?.toBuilder();
      _ngte = $v.ngte?.toBuilder();
      _lt = $v.lt?.toBuilder();
      _nlt = $v.nlt?.toBuilder();
      _lte = $v.lte?.toBuilder();
      _nlte = $v.nlte?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GComparableDecimalOperationFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GComparableDecimalOperationFilterInput;
  }

  @override
  void update(
      void Function(GComparableDecimalOperationFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GComparableDecimalOperationFilterInput build() => _build();

  _$GComparableDecimalOperationFilterInput _build() {
    _$GComparableDecimalOperationFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GComparableDecimalOperationFilterInput._(
              eq: _eq?.build(),
              neq: _neq?.build(),
              Gin: _Gin?.build(),
              nin: _nin?.build(),
              gt: _gt?.build(),
              ngt: _ngt?.build(),
              gte: _gte?.build(),
              ngte: _ngte?.build(),
              lt: _lt?.build(),
              nlt: _nlt?.build(),
              lte: _lte?.build(),
              nlte: _nlte?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'eq';
        _eq?.build();
        _$failedField = 'neq';
        _neq?.build();
        _$failedField = 'Gin';
        _Gin?.build();
        _$failedField = 'nin';
        _nin?.build();
        _$failedField = 'gt';
        _gt?.build();
        _$failedField = 'ngt';
        _ngt?.build();
        _$failedField = 'gte';
        _gte?.build();
        _$failedField = 'ngte';
        _ngte?.build();
        _$failedField = 'lt';
        _lt?.build();
        _$failedField = 'nlt';
        _nlt?.build();
        _$failedField = 'lte';
        _lte?.build();
        _$failedField = 'nlte';
        _nlte?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GComparableDecimalOperationFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GComparableNullableOfTimeSpanOperationFilterInput
    extends GComparableNullableOfTimeSpanOperationFilterInput {
  @override
  final GTimeSpan? eq;
  @override
  final GTimeSpan? neq;
  @override
  final BuiltList<GTimeSpan>? Gin;
  @override
  final BuiltList<GTimeSpan>? nin;
  @override
  final GTimeSpan? gt;
  @override
  final GTimeSpan? ngt;
  @override
  final GTimeSpan? gte;
  @override
  final GTimeSpan? ngte;
  @override
  final GTimeSpan? lt;
  @override
  final GTimeSpan? nlt;
  @override
  final GTimeSpan? lte;
  @override
  final GTimeSpan? nlte;

  factory _$GComparableNullableOfTimeSpanOperationFilterInput(
          [void Function(
                  GComparableNullableOfTimeSpanOperationFilterInputBuilder)?
              updates]) =>
      (new GComparableNullableOfTimeSpanOperationFilterInputBuilder()
            ..update(updates))
          ._build();

  _$GComparableNullableOfTimeSpanOperationFilterInput._(
      {this.eq,
      this.neq,
      this.Gin,
      this.nin,
      this.gt,
      this.ngt,
      this.gte,
      this.ngte,
      this.lt,
      this.nlt,
      this.lte,
      this.nlte})
      : super._();

  @override
  GComparableNullableOfTimeSpanOperationFilterInput rebuild(
          void Function(
                  GComparableNullableOfTimeSpanOperationFilterInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GComparableNullableOfTimeSpanOperationFilterInputBuilder toBuilder() =>
      new GComparableNullableOfTimeSpanOperationFilterInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GComparableNullableOfTimeSpanOperationFilterInput &&
        eq == other.eq &&
        neq == other.neq &&
        Gin == other.Gin &&
        nin == other.nin &&
        gt == other.gt &&
        ngt == other.ngt &&
        gte == other.gte &&
        ngte == other.ngte &&
        lt == other.lt &&
        nlt == other.nlt &&
        lte == other.lte &&
        nlte == other.nlte;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, eq.hashCode);
    _$hash = $jc(_$hash, neq.hashCode);
    _$hash = $jc(_$hash, Gin.hashCode);
    _$hash = $jc(_$hash, nin.hashCode);
    _$hash = $jc(_$hash, gt.hashCode);
    _$hash = $jc(_$hash, ngt.hashCode);
    _$hash = $jc(_$hash, gte.hashCode);
    _$hash = $jc(_$hash, ngte.hashCode);
    _$hash = $jc(_$hash, lt.hashCode);
    _$hash = $jc(_$hash, nlt.hashCode);
    _$hash = $jc(_$hash, lte.hashCode);
    _$hash = $jc(_$hash, nlte.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GComparableNullableOfTimeSpanOperationFilterInput')
          ..add('eq', eq)
          ..add('neq', neq)
          ..add('Gin', Gin)
          ..add('nin', nin)
          ..add('gt', gt)
          ..add('ngt', ngt)
          ..add('gte', gte)
          ..add('ngte', ngte)
          ..add('lt', lt)
          ..add('nlt', nlt)
          ..add('lte', lte)
          ..add('nlte', nlte))
        .toString();
  }
}

class GComparableNullableOfTimeSpanOperationFilterInputBuilder
    implements
        Builder<GComparableNullableOfTimeSpanOperationFilterInput,
            GComparableNullableOfTimeSpanOperationFilterInputBuilder> {
  _$GComparableNullableOfTimeSpanOperationFilterInput? _$v;

  GTimeSpanBuilder? _eq;
  GTimeSpanBuilder get eq => _$this._eq ??= new GTimeSpanBuilder();
  set eq(GTimeSpanBuilder? eq) => _$this._eq = eq;

  GTimeSpanBuilder? _neq;
  GTimeSpanBuilder get neq => _$this._neq ??= new GTimeSpanBuilder();
  set neq(GTimeSpanBuilder? neq) => _$this._neq = neq;

  ListBuilder<GTimeSpan>? _Gin;
  ListBuilder<GTimeSpan> get Gin =>
      _$this._Gin ??= new ListBuilder<GTimeSpan>();
  set Gin(ListBuilder<GTimeSpan>? Gin) => _$this._Gin = Gin;

  ListBuilder<GTimeSpan>? _nin;
  ListBuilder<GTimeSpan> get nin =>
      _$this._nin ??= new ListBuilder<GTimeSpan>();
  set nin(ListBuilder<GTimeSpan>? nin) => _$this._nin = nin;

  GTimeSpanBuilder? _gt;
  GTimeSpanBuilder get gt => _$this._gt ??= new GTimeSpanBuilder();
  set gt(GTimeSpanBuilder? gt) => _$this._gt = gt;

  GTimeSpanBuilder? _ngt;
  GTimeSpanBuilder get ngt => _$this._ngt ??= new GTimeSpanBuilder();
  set ngt(GTimeSpanBuilder? ngt) => _$this._ngt = ngt;

  GTimeSpanBuilder? _gte;
  GTimeSpanBuilder get gte => _$this._gte ??= new GTimeSpanBuilder();
  set gte(GTimeSpanBuilder? gte) => _$this._gte = gte;

  GTimeSpanBuilder? _ngte;
  GTimeSpanBuilder get ngte => _$this._ngte ??= new GTimeSpanBuilder();
  set ngte(GTimeSpanBuilder? ngte) => _$this._ngte = ngte;

  GTimeSpanBuilder? _lt;
  GTimeSpanBuilder get lt => _$this._lt ??= new GTimeSpanBuilder();
  set lt(GTimeSpanBuilder? lt) => _$this._lt = lt;

  GTimeSpanBuilder? _nlt;
  GTimeSpanBuilder get nlt => _$this._nlt ??= new GTimeSpanBuilder();
  set nlt(GTimeSpanBuilder? nlt) => _$this._nlt = nlt;

  GTimeSpanBuilder? _lte;
  GTimeSpanBuilder get lte => _$this._lte ??= new GTimeSpanBuilder();
  set lte(GTimeSpanBuilder? lte) => _$this._lte = lte;

  GTimeSpanBuilder? _nlte;
  GTimeSpanBuilder get nlte => _$this._nlte ??= new GTimeSpanBuilder();
  set nlte(GTimeSpanBuilder? nlte) => _$this._nlte = nlte;

  GComparableNullableOfTimeSpanOperationFilterInputBuilder();

  GComparableNullableOfTimeSpanOperationFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _eq = $v.eq?.toBuilder();
      _neq = $v.neq?.toBuilder();
      _Gin = $v.Gin?.toBuilder();
      _nin = $v.nin?.toBuilder();
      _gt = $v.gt?.toBuilder();
      _ngt = $v.ngt?.toBuilder();
      _gte = $v.gte?.toBuilder();
      _ngte = $v.ngte?.toBuilder();
      _lt = $v.lt?.toBuilder();
      _nlt = $v.nlt?.toBuilder();
      _lte = $v.lte?.toBuilder();
      _nlte = $v.nlte?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GComparableNullableOfTimeSpanOperationFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GComparableNullableOfTimeSpanOperationFilterInput;
  }

  @override
  void update(
      void Function(GComparableNullableOfTimeSpanOperationFilterInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GComparableNullableOfTimeSpanOperationFilterInput build() => _build();

  _$GComparableNullableOfTimeSpanOperationFilterInput _build() {
    _$GComparableNullableOfTimeSpanOperationFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GComparableNullableOfTimeSpanOperationFilterInput._(
              eq: _eq?.build(),
              neq: _neq?.build(),
              Gin: _Gin?.build(),
              nin: _nin?.build(),
              gt: _gt?.build(),
              ngt: _ngt?.build(),
              gte: _gte?.build(),
              ngte: _ngte?.build(),
              lt: _lt?.build(),
              nlt: _nlt?.build(),
              lte: _lte?.build(),
              nlte: _nlte?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'eq';
        _eq?.build();
        _$failedField = 'neq';
        _neq?.build();
        _$failedField = 'Gin';
        _Gin?.build();
        _$failedField = 'nin';
        _nin?.build();
        _$failedField = 'gt';
        _gt?.build();
        _$failedField = 'ngt';
        _ngt?.build();
        _$failedField = 'gte';
        _gte?.build();
        _$failedField = 'ngte';
        _ngte?.build();
        _$failedField = 'lt';
        _lt?.build();
        _$failedField = 'nlt';
        _nlt?.build();
        _$failedField = 'lte';
        _lte?.build();
        _$failedField = 'nlte';
        _nlte?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GComparableNullableOfTimeSpanOperationFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GComparableNullableOfInt32OperationFilterInput
    extends GComparableNullableOfInt32OperationFilterInput {
  @override
  final int? eq;
  @override
  final int? neq;
  @override
  final BuiltList<int>? Gin;
  @override
  final BuiltList<int>? nin;
  @override
  final int? gt;
  @override
  final int? ngt;
  @override
  final int? gte;
  @override
  final int? ngte;
  @override
  final int? lt;
  @override
  final int? nlt;
  @override
  final int? lte;
  @override
  final int? nlte;

  factory _$GComparableNullableOfInt32OperationFilterInput(
          [void Function(GComparableNullableOfInt32OperationFilterInputBuilder)?
              updates]) =>
      (new GComparableNullableOfInt32OperationFilterInputBuilder()
            ..update(updates))
          ._build();

  _$GComparableNullableOfInt32OperationFilterInput._(
      {this.eq,
      this.neq,
      this.Gin,
      this.nin,
      this.gt,
      this.ngt,
      this.gte,
      this.ngte,
      this.lt,
      this.nlt,
      this.lte,
      this.nlte})
      : super._();

  @override
  GComparableNullableOfInt32OperationFilterInput rebuild(
          void Function(GComparableNullableOfInt32OperationFilterInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GComparableNullableOfInt32OperationFilterInputBuilder toBuilder() =>
      new GComparableNullableOfInt32OperationFilterInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GComparableNullableOfInt32OperationFilterInput &&
        eq == other.eq &&
        neq == other.neq &&
        Gin == other.Gin &&
        nin == other.nin &&
        gt == other.gt &&
        ngt == other.ngt &&
        gte == other.gte &&
        ngte == other.ngte &&
        lt == other.lt &&
        nlt == other.nlt &&
        lte == other.lte &&
        nlte == other.nlte;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, eq.hashCode);
    _$hash = $jc(_$hash, neq.hashCode);
    _$hash = $jc(_$hash, Gin.hashCode);
    _$hash = $jc(_$hash, nin.hashCode);
    _$hash = $jc(_$hash, gt.hashCode);
    _$hash = $jc(_$hash, ngt.hashCode);
    _$hash = $jc(_$hash, gte.hashCode);
    _$hash = $jc(_$hash, ngte.hashCode);
    _$hash = $jc(_$hash, lt.hashCode);
    _$hash = $jc(_$hash, nlt.hashCode);
    _$hash = $jc(_$hash, lte.hashCode);
    _$hash = $jc(_$hash, nlte.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GComparableNullableOfInt32OperationFilterInput')
          ..add('eq', eq)
          ..add('neq', neq)
          ..add('Gin', Gin)
          ..add('nin', nin)
          ..add('gt', gt)
          ..add('ngt', ngt)
          ..add('gte', gte)
          ..add('ngte', ngte)
          ..add('lt', lt)
          ..add('nlt', nlt)
          ..add('lte', lte)
          ..add('nlte', nlte))
        .toString();
  }
}

class GComparableNullableOfInt32OperationFilterInputBuilder
    implements
        Builder<GComparableNullableOfInt32OperationFilterInput,
            GComparableNullableOfInt32OperationFilterInputBuilder> {
  _$GComparableNullableOfInt32OperationFilterInput? _$v;

  int? _eq;
  int? get eq => _$this._eq;
  set eq(int? eq) => _$this._eq = eq;

  int? _neq;
  int? get neq => _$this._neq;
  set neq(int? neq) => _$this._neq = neq;

  ListBuilder<int>? _Gin;
  ListBuilder<int> get Gin => _$this._Gin ??= new ListBuilder<int>();
  set Gin(ListBuilder<int>? Gin) => _$this._Gin = Gin;

  ListBuilder<int>? _nin;
  ListBuilder<int> get nin => _$this._nin ??= new ListBuilder<int>();
  set nin(ListBuilder<int>? nin) => _$this._nin = nin;

  int? _gt;
  int? get gt => _$this._gt;
  set gt(int? gt) => _$this._gt = gt;

  int? _ngt;
  int? get ngt => _$this._ngt;
  set ngt(int? ngt) => _$this._ngt = ngt;

  int? _gte;
  int? get gte => _$this._gte;
  set gte(int? gte) => _$this._gte = gte;

  int? _ngte;
  int? get ngte => _$this._ngte;
  set ngte(int? ngte) => _$this._ngte = ngte;

  int? _lt;
  int? get lt => _$this._lt;
  set lt(int? lt) => _$this._lt = lt;

  int? _nlt;
  int? get nlt => _$this._nlt;
  set nlt(int? nlt) => _$this._nlt = nlt;

  int? _lte;
  int? get lte => _$this._lte;
  set lte(int? lte) => _$this._lte = lte;

  int? _nlte;
  int? get nlte => _$this._nlte;
  set nlte(int? nlte) => _$this._nlte = nlte;

  GComparableNullableOfInt32OperationFilterInputBuilder();

  GComparableNullableOfInt32OperationFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _eq = $v.eq;
      _neq = $v.neq;
      _Gin = $v.Gin?.toBuilder();
      _nin = $v.nin?.toBuilder();
      _gt = $v.gt;
      _ngt = $v.ngt;
      _gte = $v.gte;
      _ngte = $v.ngte;
      _lt = $v.lt;
      _nlt = $v.nlt;
      _lte = $v.lte;
      _nlte = $v.nlte;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GComparableNullableOfInt32OperationFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GComparableNullableOfInt32OperationFilterInput;
  }

  @override
  void update(
      void Function(GComparableNullableOfInt32OperationFilterInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GComparableNullableOfInt32OperationFilterInput build() => _build();

  _$GComparableNullableOfInt32OperationFilterInput _build() {
    _$GComparableNullableOfInt32OperationFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GComparableNullableOfInt32OperationFilterInput._(
              eq: eq,
              neq: neq,
              Gin: _Gin?.build(),
              nin: _nin?.build(),
              gt: gt,
              ngt: ngt,
              gte: gte,
              ngte: ngte,
              lt: lt,
              nlt: nlt,
              lte: lte,
              nlte: nlte);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'Gin';
        _Gin?.build();
        _$failedField = 'nin';
        _nin?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GComparableNullableOfInt32OperationFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GListFilterInputTypeOfRideTransactionFilterInput
    extends GListFilterInputTypeOfRideTransactionFilterInput {
  @override
  final GRideTransactionFilterInput? all;
  @override
  final GRideTransactionFilterInput? none;
  @override
  final GRideTransactionFilterInput? some;
  @override
  final bool? any;

  factory _$GListFilterInputTypeOfRideTransactionFilterInput(
          [void Function(
                  GListFilterInputTypeOfRideTransactionFilterInputBuilder)?
              updates]) =>
      (new GListFilterInputTypeOfRideTransactionFilterInputBuilder()
            ..update(updates))
          ._build();

  _$GListFilterInputTypeOfRideTransactionFilterInput._(
      {this.all, this.none, this.some, this.any})
      : super._();

  @override
  GListFilterInputTypeOfRideTransactionFilterInput rebuild(
          void Function(GListFilterInputTypeOfRideTransactionFilterInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GListFilterInputTypeOfRideTransactionFilterInputBuilder toBuilder() =>
      new GListFilterInputTypeOfRideTransactionFilterInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GListFilterInputTypeOfRideTransactionFilterInput &&
        all == other.all &&
        none == other.none &&
        some == other.some &&
        any == other.any;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, all.hashCode);
    _$hash = $jc(_$hash, none.hashCode);
    _$hash = $jc(_$hash, some.hashCode);
    _$hash = $jc(_$hash, any.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GListFilterInputTypeOfRideTransactionFilterInput')
          ..add('all', all)
          ..add('none', none)
          ..add('some', some)
          ..add('any', any))
        .toString();
  }
}

class GListFilterInputTypeOfRideTransactionFilterInputBuilder
    implements
        Builder<GListFilterInputTypeOfRideTransactionFilterInput,
            GListFilterInputTypeOfRideTransactionFilterInputBuilder> {
  _$GListFilterInputTypeOfRideTransactionFilterInput? _$v;

  GRideTransactionFilterInputBuilder? _all;
  GRideTransactionFilterInputBuilder get all =>
      _$this._all ??= new GRideTransactionFilterInputBuilder();
  set all(GRideTransactionFilterInputBuilder? all) => _$this._all = all;

  GRideTransactionFilterInputBuilder? _none;
  GRideTransactionFilterInputBuilder get none =>
      _$this._none ??= new GRideTransactionFilterInputBuilder();
  set none(GRideTransactionFilterInputBuilder? none) => _$this._none = none;

  GRideTransactionFilterInputBuilder? _some;
  GRideTransactionFilterInputBuilder get some =>
      _$this._some ??= new GRideTransactionFilterInputBuilder();
  set some(GRideTransactionFilterInputBuilder? some) => _$this._some = some;

  bool? _any;
  bool? get any => _$this._any;
  set any(bool? any) => _$this._any = any;

  GListFilterInputTypeOfRideTransactionFilterInputBuilder();

  GListFilterInputTypeOfRideTransactionFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _all = $v.all?.toBuilder();
      _none = $v.none?.toBuilder();
      _some = $v.some?.toBuilder();
      _any = $v.any;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GListFilterInputTypeOfRideTransactionFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GListFilterInputTypeOfRideTransactionFilterInput;
  }

  @override
  void update(
      void Function(GListFilterInputTypeOfRideTransactionFilterInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GListFilterInputTypeOfRideTransactionFilterInput build() => _build();

  _$GListFilterInputTypeOfRideTransactionFilterInput _build() {
    _$GListFilterInputTypeOfRideTransactionFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GListFilterInputTypeOfRideTransactionFilterInput._(
              all: _all?.build(),
              none: _none?.build(),
              some: _some?.build(),
              any: any);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'all';
        _all?.build();
        _$failedField = 'none';
        _none?.build();
        _$failedField = 'some';
        _some?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GListFilterInputTypeOfRideTransactionFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GSeatSortInput extends GSeatSortInput {
  @override
  final GSortEnumType? id;
  @override
  final GSortEnumType? frontLeft;
  @override
  final GSortEnumType? middleLeft;
  @override
  final GSortEnumType? middleCentre;
  @override
  final GSortEnumType? middleRight;
  @override
  final GSortEnumType? backLeft;
  @override
  final GSortEnumType? backCentre;
  @override
  final GSortEnumType? backRight;

  factory _$GSeatSortInput([void Function(GSeatSortInputBuilder)? updates]) =>
      (new GSeatSortInputBuilder()..update(updates))._build();

  _$GSeatSortInput._(
      {this.id,
      this.frontLeft,
      this.middleLeft,
      this.middleCentre,
      this.middleRight,
      this.backLeft,
      this.backCentre,
      this.backRight})
      : super._();

  @override
  GSeatSortInput rebuild(void Function(GSeatSortInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GSeatSortInputBuilder toBuilder() =>
      new GSeatSortInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GSeatSortInput &&
        id == other.id &&
        frontLeft == other.frontLeft &&
        middleLeft == other.middleLeft &&
        middleCentre == other.middleCentre &&
        middleRight == other.middleRight &&
        backLeft == other.backLeft &&
        backCentre == other.backCentre &&
        backRight == other.backRight;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, frontLeft.hashCode);
    _$hash = $jc(_$hash, middleLeft.hashCode);
    _$hash = $jc(_$hash, middleCentre.hashCode);
    _$hash = $jc(_$hash, middleRight.hashCode);
    _$hash = $jc(_$hash, backLeft.hashCode);
    _$hash = $jc(_$hash, backCentre.hashCode);
    _$hash = $jc(_$hash, backRight.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GSeatSortInput')
          ..add('id', id)
          ..add('frontLeft', frontLeft)
          ..add('middleLeft', middleLeft)
          ..add('middleCentre', middleCentre)
          ..add('middleRight', middleRight)
          ..add('backLeft', backLeft)
          ..add('backCentre', backCentre)
          ..add('backRight', backRight))
        .toString();
  }
}

class GSeatSortInputBuilder
    implements Builder<GSeatSortInput, GSeatSortInputBuilder> {
  _$GSeatSortInput? _$v;

  GSortEnumType? _id;
  GSortEnumType? get id => _$this._id;
  set id(GSortEnumType? id) => _$this._id = id;

  GSortEnumType? _frontLeft;
  GSortEnumType? get frontLeft => _$this._frontLeft;
  set frontLeft(GSortEnumType? frontLeft) => _$this._frontLeft = frontLeft;

  GSortEnumType? _middleLeft;
  GSortEnumType? get middleLeft => _$this._middleLeft;
  set middleLeft(GSortEnumType? middleLeft) => _$this._middleLeft = middleLeft;

  GSortEnumType? _middleCentre;
  GSortEnumType? get middleCentre => _$this._middleCentre;
  set middleCentre(GSortEnumType? middleCentre) =>
      _$this._middleCentre = middleCentre;

  GSortEnumType? _middleRight;
  GSortEnumType? get middleRight => _$this._middleRight;
  set middleRight(GSortEnumType? middleRight) =>
      _$this._middleRight = middleRight;

  GSortEnumType? _backLeft;
  GSortEnumType? get backLeft => _$this._backLeft;
  set backLeft(GSortEnumType? backLeft) => _$this._backLeft = backLeft;

  GSortEnumType? _backCentre;
  GSortEnumType? get backCentre => _$this._backCentre;
  set backCentre(GSortEnumType? backCentre) => _$this._backCentre = backCentre;

  GSortEnumType? _backRight;
  GSortEnumType? get backRight => _$this._backRight;
  set backRight(GSortEnumType? backRight) => _$this._backRight = backRight;

  GSeatSortInputBuilder();

  GSeatSortInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _frontLeft = $v.frontLeft;
      _middleLeft = $v.middleLeft;
      _middleCentre = $v.middleCentre;
      _middleRight = $v.middleRight;
      _backLeft = $v.backLeft;
      _backCentre = $v.backCentre;
      _backRight = $v.backRight;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GSeatSortInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GSeatSortInput;
  }

  @override
  void update(void Function(GSeatSortInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GSeatSortInput build() => _build();

  _$GSeatSortInput _build() {
    final _$result = _$v ??
        new _$GSeatSortInput._(
            id: id,
            frontLeft: frontLeft,
            middleLeft: middleLeft,
            middleCentre: middleCentre,
            middleRight: middleRight,
            backLeft: backLeft,
            backCentre: backCentre,
            backRight: backRight);
    replace(_$result);
    return _$result;
  }
}

class _$GListFilterInputTypeOfRideFilterInput
    extends GListFilterInputTypeOfRideFilterInput {
  @override
  final GRideFilterInput? all;
  @override
  final GRideFilterInput? none;
  @override
  final GRideFilterInput? some;
  @override
  final bool? any;

  factory _$GListFilterInputTypeOfRideFilterInput(
          [void Function(GListFilterInputTypeOfRideFilterInputBuilder)?
              updates]) =>
      (new GListFilterInputTypeOfRideFilterInputBuilder()..update(updates))
          ._build();

  _$GListFilterInputTypeOfRideFilterInput._(
      {this.all, this.none, this.some, this.any})
      : super._();

  @override
  GListFilterInputTypeOfRideFilterInput rebuild(
          void Function(GListFilterInputTypeOfRideFilterInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GListFilterInputTypeOfRideFilterInputBuilder toBuilder() =>
      new GListFilterInputTypeOfRideFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GListFilterInputTypeOfRideFilterInput &&
        all == other.all &&
        none == other.none &&
        some == other.some &&
        any == other.any;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, all.hashCode);
    _$hash = $jc(_$hash, none.hashCode);
    _$hash = $jc(_$hash, some.hashCode);
    _$hash = $jc(_$hash, any.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GListFilterInputTypeOfRideFilterInput')
          ..add('all', all)
          ..add('none', none)
          ..add('some', some)
          ..add('any', any))
        .toString();
  }
}

class GListFilterInputTypeOfRideFilterInputBuilder
    implements
        Builder<GListFilterInputTypeOfRideFilterInput,
            GListFilterInputTypeOfRideFilterInputBuilder> {
  _$GListFilterInputTypeOfRideFilterInput? _$v;

  GRideFilterInputBuilder? _all;
  GRideFilterInputBuilder get all =>
      _$this._all ??= new GRideFilterInputBuilder();
  set all(GRideFilterInputBuilder? all) => _$this._all = all;

  GRideFilterInputBuilder? _none;
  GRideFilterInputBuilder get none =>
      _$this._none ??= new GRideFilterInputBuilder();
  set none(GRideFilterInputBuilder? none) => _$this._none = none;

  GRideFilterInputBuilder? _some;
  GRideFilterInputBuilder get some =>
      _$this._some ??= new GRideFilterInputBuilder();
  set some(GRideFilterInputBuilder? some) => _$this._some = some;

  bool? _any;
  bool? get any => _$this._any;
  set any(bool? any) => _$this._any = any;

  GListFilterInputTypeOfRideFilterInputBuilder();

  GListFilterInputTypeOfRideFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _all = $v.all?.toBuilder();
      _none = $v.none?.toBuilder();
      _some = $v.some?.toBuilder();
      _any = $v.any;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GListFilterInputTypeOfRideFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GListFilterInputTypeOfRideFilterInput;
  }

  @override
  void update(
      void Function(GListFilterInputTypeOfRideFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GListFilterInputTypeOfRideFilterInput build() => _build();

  _$GListFilterInputTypeOfRideFilterInput _build() {
    _$GListFilterInputTypeOfRideFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GListFilterInputTypeOfRideFilterInput._(
              all: _all?.build(),
              none: _none?.build(),
              some: _some?.build(),
              any: any);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'all';
        _all?.build();
        _$failedField = 'none';
        _none?.build();
        _$failedField = 'some';
        _some?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GListFilterInputTypeOfRideFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserRatingFilterInput extends GUserRatingFilterInput {
  @override
  final BuiltList<GUserRatingFilterInput>? and;
  @override
  final BuiltList<GUserRatingFilterInput>? or;
  @override
  final GComparableInt32OperationFilterInput? id;
  @override
  final GStringOperationFilterInput? userThatRate;
  @override
  final GStringOperationFilterInput? userToRate;
  @override
  final GComparableDoubleOperationFilterInput? ratingValue;
  @override
  final GComparableInt32OperationFilterInput? rideId;
  @override
  final GStringOperationFilterInput? levelOfSatisfaction;
  @override
  final GStringOperationFilterInput? comment;
  @override
  final GComparableDateTimeOperationFilterInput? dateOfRating;
  @override
  final GComparableTimeSpanOperationFilterInput? timeOfRating;
  @override
  final GComparableDateTimeOperationFilterInput? dateOfLastUpadte;
  @override
  final GComparableTimeSpanOperationFilterInput? timeOfLastUpdate;
  @override
  final GSafiriCarUserFilterInput? reviewer;

  factory _$GUserRatingFilterInput(
          [void Function(GUserRatingFilterInputBuilder)? updates]) =>
      (new GUserRatingFilterInputBuilder()..update(updates))._build();

  _$GUserRatingFilterInput._(
      {this.and,
      this.or,
      this.id,
      this.userThatRate,
      this.userToRate,
      this.ratingValue,
      this.rideId,
      this.levelOfSatisfaction,
      this.comment,
      this.dateOfRating,
      this.timeOfRating,
      this.dateOfLastUpadte,
      this.timeOfLastUpdate,
      this.reviewer})
      : super._();

  @override
  GUserRatingFilterInput rebuild(
          void Function(GUserRatingFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserRatingFilterInputBuilder toBuilder() =>
      new GUserRatingFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserRatingFilterInput &&
        and == other.and &&
        or == other.or &&
        id == other.id &&
        userThatRate == other.userThatRate &&
        userToRate == other.userToRate &&
        ratingValue == other.ratingValue &&
        rideId == other.rideId &&
        levelOfSatisfaction == other.levelOfSatisfaction &&
        comment == other.comment &&
        dateOfRating == other.dateOfRating &&
        timeOfRating == other.timeOfRating &&
        dateOfLastUpadte == other.dateOfLastUpadte &&
        timeOfLastUpdate == other.timeOfLastUpdate &&
        reviewer == other.reviewer;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, and.hashCode);
    _$hash = $jc(_$hash, or.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, userThatRate.hashCode);
    _$hash = $jc(_$hash, userToRate.hashCode);
    _$hash = $jc(_$hash, ratingValue.hashCode);
    _$hash = $jc(_$hash, rideId.hashCode);
    _$hash = $jc(_$hash, levelOfSatisfaction.hashCode);
    _$hash = $jc(_$hash, comment.hashCode);
    _$hash = $jc(_$hash, dateOfRating.hashCode);
    _$hash = $jc(_$hash, timeOfRating.hashCode);
    _$hash = $jc(_$hash, dateOfLastUpadte.hashCode);
    _$hash = $jc(_$hash, timeOfLastUpdate.hashCode);
    _$hash = $jc(_$hash, reviewer.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUserRatingFilterInput')
          ..add('and', and)
          ..add('or', or)
          ..add('id', id)
          ..add('userThatRate', userThatRate)
          ..add('userToRate', userToRate)
          ..add('ratingValue', ratingValue)
          ..add('rideId', rideId)
          ..add('levelOfSatisfaction', levelOfSatisfaction)
          ..add('comment', comment)
          ..add('dateOfRating', dateOfRating)
          ..add('timeOfRating', timeOfRating)
          ..add('dateOfLastUpadte', dateOfLastUpadte)
          ..add('timeOfLastUpdate', timeOfLastUpdate)
          ..add('reviewer', reviewer))
        .toString();
  }
}

class GUserRatingFilterInputBuilder
    implements Builder<GUserRatingFilterInput, GUserRatingFilterInputBuilder> {
  _$GUserRatingFilterInput? _$v;

  ListBuilder<GUserRatingFilterInput>? _and;
  ListBuilder<GUserRatingFilterInput> get and =>
      _$this._and ??= new ListBuilder<GUserRatingFilterInput>();
  set and(ListBuilder<GUserRatingFilterInput>? and) => _$this._and = and;

  ListBuilder<GUserRatingFilterInput>? _or;
  ListBuilder<GUserRatingFilterInput> get or =>
      _$this._or ??= new ListBuilder<GUserRatingFilterInput>();
  set or(ListBuilder<GUserRatingFilterInput>? or) => _$this._or = or;

  GComparableInt32OperationFilterInputBuilder? _id;
  GComparableInt32OperationFilterInputBuilder get id =>
      _$this._id ??= new GComparableInt32OperationFilterInputBuilder();
  set id(GComparableInt32OperationFilterInputBuilder? id) => _$this._id = id;

  GStringOperationFilterInputBuilder? _userThatRate;
  GStringOperationFilterInputBuilder get userThatRate =>
      _$this._userThatRate ??= new GStringOperationFilterInputBuilder();
  set userThatRate(GStringOperationFilterInputBuilder? userThatRate) =>
      _$this._userThatRate = userThatRate;

  GStringOperationFilterInputBuilder? _userToRate;
  GStringOperationFilterInputBuilder get userToRate =>
      _$this._userToRate ??= new GStringOperationFilterInputBuilder();
  set userToRate(GStringOperationFilterInputBuilder? userToRate) =>
      _$this._userToRate = userToRate;

  GComparableDoubleOperationFilterInputBuilder? _ratingValue;
  GComparableDoubleOperationFilterInputBuilder get ratingValue =>
      _$this._ratingValue ??=
          new GComparableDoubleOperationFilterInputBuilder();
  set ratingValue(GComparableDoubleOperationFilterInputBuilder? ratingValue) =>
      _$this._ratingValue = ratingValue;

  GComparableInt32OperationFilterInputBuilder? _rideId;
  GComparableInt32OperationFilterInputBuilder get rideId =>
      _$this._rideId ??= new GComparableInt32OperationFilterInputBuilder();
  set rideId(GComparableInt32OperationFilterInputBuilder? rideId) =>
      _$this._rideId = rideId;

  GStringOperationFilterInputBuilder? _levelOfSatisfaction;
  GStringOperationFilterInputBuilder get levelOfSatisfaction =>
      _$this._levelOfSatisfaction ??= new GStringOperationFilterInputBuilder();
  set levelOfSatisfaction(
          GStringOperationFilterInputBuilder? levelOfSatisfaction) =>
      _$this._levelOfSatisfaction = levelOfSatisfaction;

  GStringOperationFilterInputBuilder? _comment;
  GStringOperationFilterInputBuilder get comment =>
      _$this._comment ??= new GStringOperationFilterInputBuilder();
  set comment(GStringOperationFilterInputBuilder? comment) =>
      _$this._comment = comment;

  GComparableDateTimeOperationFilterInputBuilder? _dateOfRating;
  GComparableDateTimeOperationFilterInputBuilder get dateOfRating =>
      _$this._dateOfRating ??=
          new GComparableDateTimeOperationFilterInputBuilder();
  set dateOfRating(
          GComparableDateTimeOperationFilterInputBuilder? dateOfRating) =>
      _$this._dateOfRating = dateOfRating;

  GComparableTimeSpanOperationFilterInputBuilder? _timeOfRating;
  GComparableTimeSpanOperationFilterInputBuilder get timeOfRating =>
      _$this._timeOfRating ??=
          new GComparableTimeSpanOperationFilterInputBuilder();
  set timeOfRating(
          GComparableTimeSpanOperationFilterInputBuilder? timeOfRating) =>
      _$this._timeOfRating = timeOfRating;

  GComparableDateTimeOperationFilterInputBuilder? _dateOfLastUpadte;
  GComparableDateTimeOperationFilterInputBuilder get dateOfLastUpadte =>
      _$this._dateOfLastUpadte ??=
          new GComparableDateTimeOperationFilterInputBuilder();
  set dateOfLastUpadte(
          GComparableDateTimeOperationFilterInputBuilder? dateOfLastUpadte) =>
      _$this._dateOfLastUpadte = dateOfLastUpadte;

  GComparableTimeSpanOperationFilterInputBuilder? _timeOfLastUpdate;
  GComparableTimeSpanOperationFilterInputBuilder get timeOfLastUpdate =>
      _$this._timeOfLastUpdate ??=
          new GComparableTimeSpanOperationFilterInputBuilder();
  set timeOfLastUpdate(
          GComparableTimeSpanOperationFilterInputBuilder? timeOfLastUpdate) =>
      _$this._timeOfLastUpdate = timeOfLastUpdate;

  GSafiriCarUserFilterInputBuilder? _reviewer;
  GSafiriCarUserFilterInputBuilder get reviewer =>
      _$this._reviewer ??= new GSafiriCarUserFilterInputBuilder();
  set reviewer(GSafiriCarUserFilterInputBuilder? reviewer) =>
      _$this._reviewer = reviewer;

  GUserRatingFilterInputBuilder();

  GUserRatingFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _and = $v.and?.toBuilder();
      _or = $v.or?.toBuilder();
      _id = $v.id?.toBuilder();
      _userThatRate = $v.userThatRate?.toBuilder();
      _userToRate = $v.userToRate?.toBuilder();
      _ratingValue = $v.ratingValue?.toBuilder();
      _rideId = $v.rideId?.toBuilder();
      _levelOfSatisfaction = $v.levelOfSatisfaction?.toBuilder();
      _comment = $v.comment?.toBuilder();
      _dateOfRating = $v.dateOfRating?.toBuilder();
      _timeOfRating = $v.timeOfRating?.toBuilder();
      _dateOfLastUpadte = $v.dateOfLastUpadte?.toBuilder();
      _timeOfLastUpdate = $v.timeOfLastUpdate?.toBuilder();
      _reviewer = $v.reviewer?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserRatingFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserRatingFilterInput;
  }

  @override
  void update(void Function(GUserRatingFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUserRatingFilterInput build() => _build();

  _$GUserRatingFilterInput _build() {
    _$GUserRatingFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GUserRatingFilterInput._(
              and: _and?.build(),
              or: _or?.build(),
              id: _id?.build(),
              userThatRate: _userThatRate?.build(),
              userToRate: _userToRate?.build(),
              ratingValue: _ratingValue?.build(),
              rideId: _rideId?.build(),
              levelOfSatisfaction: _levelOfSatisfaction?.build(),
              comment: _comment?.build(),
              dateOfRating: _dateOfRating?.build(),
              timeOfRating: _timeOfRating?.build(),
              dateOfLastUpadte: _dateOfLastUpadte?.build(),
              timeOfLastUpdate: _timeOfLastUpdate?.build(),
              reviewer: _reviewer?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'and';
        _and?.build();
        _$failedField = 'or';
        _or?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'userThatRate';
        _userThatRate?.build();
        _$failedField = 'userToRate';
        _userToRate?.build();
        _$failedField = 'ratingValue';
        _ratingValue?.build();
        _$failedField = 'rideId';
        _rideId?.build();
        _$failedField = 'levelOfSatisfaction';
        _levelOfSatisfaction?.build();
        _$failedField = 'comment';
        _comment?.build();
        _$failedField = 'dateOfRating';
        _dateOfRating?.build();
        _$failedField = 'timeOfRating';
        _timeOfRating?.build();
        _$failedField = 'dateOfLastUpadte';
        _dateOfLastUpadte?.build();
        _$failedField = 'timeOfLastUpdate';
        _timeOfLastUpdate?.build();
        _$failedField = 'reviewer';
        _reviewer?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUserRatingFilterInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFrequentRouteFilterInput extends GFrequentRouteFilterInput {
  @override
  final BuiltList<GFrequentRouteFilterInput>? and;
  @override
  final BuiltList<GFrequentRouteFilterInput>? or;
  @override
  final GStringOperationFilterInput? origin;
  @override
  final GStringOperationFilterInput? destination;
  @override
  final GStringOperationFilterInput? image;
  @override
  final GColorCustomFilterInput? color;
  @override
  final GStringOperationFilterInput? userId;
  @override
  final GComparableNullableOfDateTimeOperationFilterInput? createdDate;
  @override
  final GComparableInt32OperationFilterInput? id;

  factory _$GFrequentRouteFilterInput(
          [void Function(GFrequentRouteFilterInputBuilder)? updates]) =>
      (new GFrequentRouteFilterInputBuilder()..update(updates))._build();

  _$GFrequentRouteFilterInput._(
      {this.and,
      this.or,
      this.origin,
      this.destination,
      this.image,
      this.color,
      this.userId,
      this.createdDate,
      this.id})
      : super._();

  @override
  GFrequentRouteFilterInput rebuild(
          void Function(GFrequentRouteFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFrequentRouteFilterInputBuilder toBuilder() =>
      new GFrequentRouteFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFrequentRouteFilterInput &&
        and == other.and &&
        or == other.or &&
        origin == other.origin &&
        destination == other.destination &&
        image == other.image &&
        color == other.color &&
        userId == other.userId &&
        createdDate == other.createdDate &&
        id == other.id;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, and.hashCode);
    _$hash = $jc(_$hash, or.hashCode);
    _$hash = $jc(_$hash, origin.hashCode);
    _$hash = $jc(_$hash, destination.hashCode);
    _$hash = $jc(_$hash, image.hashCode);
    _$hash = $jc(_$hash, color.hashCode);
    _$hash = $jc(_$hash, userId.hashCode);
    _$hash = $jc(_$hash, createdDate.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GFrequentRouteFilterInput')
          ..add('and', and)
          ..add('or', or)
          ..add('origin', origin)
          ..add('destination', destination)
          ..add('image', image)
          ..add('color', color)
          ..add('userId', userId)
          ..add('createdDate', createdDate)
          ..add('id', id))
        .toString();
  }
}

class GFrequentRouteFilterInputBuilder
    implements
        Builder<GFrequentRouteFilterInput, GFrequentRouteFilterInputBuilder> {
  _$GFrequentRouteFilterInput? _$v;

  ListBuilder<GFrequentRouteFilterInput>? _and;
  ListBuilder<GFrequentRouteFilterInput> get and =>
      _$this._and ??= new ListBuilder<GFrequentRouteFilterInput>();
  set and(ListBuilder<GFrequentRouteFilterInput>? and) => _$this._and = and;

  ListBuilder<GFrequentRouteFilterInput>? _or;
  ListBuilder<GFrequentRouteFilterInput> get or =>
      _$this._or ??= new ListBuilder<GFrequentRouteFilterInput>();
  set or(ListBuilder<GFrequentRouteFilterInput>? or) => _$this._or = or;

  GStringOperationFilterInputBuilder? _origin;
  GStringOperationFilterInputBuilder get origin =>
      _$this._origin ??= new GStringOperationFilterInputBuilder();
  set origin(GStringOperationFilterInputBuilder? origin) =>
      _$this._origin = origin;

  GStringOperationFilterInputBuilder? _destination;
  GStringOperationFilterInputBuilder get destination =>
      _$this._destination ??= new GStringOperationFilterInputBuilder();
  set destination(GStringOperationFilterInputBuilder? destination) =>
      _$this._destination = destination;

  GStringOperationFilterInputBuilder? _image;
  GStringOperationFilterInputBuilder get image =>
      _$this._image ??= new GStringOperationFilterInputBuilder();
  set image(GStringOperationFilterInputBuilder? image) => _$this._image = image;

  GColorCustomFilterInputBuilder? _color;
  GColorCustomFilterInputBuilder get color =>
      _$this._color ??= new GColorCustomFilterInputBuilder();
  set color(GColorCustomFilterInputBuilder? color) => _$this._color = color;

  GStringOperationFilterInputBuilder? _userId;
  GStringOperationFilterInputBuilder get userId =>
      _$this._userId ??= new GStringOperationFilterInputBuilder();
  set userId(GStringOperationFilterInputBuilder? userId) =>
      _$this._userId = userId;

  GComparableNullableOfDateTimeOperationFilterInputBuilder? _createdDate;
  GComparableNullableOfDateTimeOperationFilterInputBuilder get createdDate =>
      _$this._createdDate ??=
          new GComparableNullableOfDateTimeOperationFilterInputBuilder();
  set createdDate(
          GComparableNullableOfDateTimeOperationFilterInputBuilder?
              createdDate) =>
      _$this._createdDate = createdDate;

  GComparableInt32OperationFilterInputBuilder? _id;
  GComparableInt32OperationFilterInputBuilder get id =>
      _$this._id ??= new GComparableInt32OperationFilterInputBuilder();
  set id(GComparableInt32OperationFilterInputBuilder? id) => _$this._id = id;

  GFrequentRouteFilterInputBuilder();

  GFrequentRouteFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _and = $v.and?.toBuilder();
      _or = $v.or?.toBuilder();
      _origin = $v.origin?.toBuilder();
      _destination = $v.destination?.toBuilder();
      _image = $v.image?.toBuilder();
      _color = $v.color?.toBuilder();
      _userId = $v.userId?.toBuilder();
      _createdDate = $v.createdDate?.toBuilder();
      _id = $v.id?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFrequentRouteFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFrequentRouteFilterInput;
  }

  @override
  void update(void Function(GFrequentRouteFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GFrequentRouteFilterInput build() => _build();

  _$GFrequentRouteFilterInput _build() {
    _$GFrequentRouteFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GFrequentRouteFilterInput._(
              and: _and?.build(),
              or: _or?.build(),
              origin: _origin?.build(),
              destination: _destination?.build(),
              image: _image?.build(),
              color: _color?.build(),
              userId: _userId?.build(),
              createdDate: _createdDate?.build(),
              id: _id?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'and';
        _and?.build();
        _$failedField = 'or';
        _or?.build();
        _$failedField = 'origin';
        _origin?.build();
        _$failedField = 'destination';
        _destination?.build();
        _$failedField = 'image';
        _image?.build();
        _$failedField = 'color';
        _color?.build();
        _$failedField = 'userId';
        _userId?.build();
        _$failedField = 'createdDate';
        _createdDate?.build();
        _$failedField = 'id';
        _id?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GFrequentRouteFilterInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GComparableTimeSpanOperationFilterInput
    extends GComparableTimeSpanOperationFilterInput {
  @override
  final GTimeSpan? eq;
  @override
  final GTimeSpan? neq;
  @override
  final BuiltList<GTimeSpan>? Gin;
  @override
  final BuiltList<GTimeSpan>? nin;
  @override
  final GTimeSpan? gt;
  @override
  final GTimeSpan? ngt;
  @override
  final GTimeSpan? gte;
  @override
  final GTimeSpan? ngte;
  @override
  final GTimeSpan? lt;
  @override
  final GTimeSpan? nlt;
  @override
  final GTimeSpan? lte;
  @override
  final GTimeSpan? nlte;

  factory _$GComparableTimeSpanOperationFilterInput(
          [void Function(GComparableTimeSpanOperationFilterInputBuilder)?
              updates]) =>
      (new GComparableTimeSpanOperationFilterInputBuilder()..update(updates))
          ._build();

  _$GComparableTimeSpanOperationFilterInput._(
      {this.eq,
      this.neq,
      this.Gin,
      this.nin,
      this.gt,
      this.ngt,
      this.gte,
      this.ngte,
      this.lt,
      this.nlt,
      this.lte,
      this.nlte})
      : super._();

  @override
  GComparableTimeSpanOperationFilterInput rebuild(
          void Function(GComparableTimeSpanOperationFilterInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GComparableTimeSpanOperationFilterInputBuilder toBuilder() =>
      new GComparableTimeSpanOperationFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GComparableTimeSpanOperationFilterInput &&
        eq == other.eq &&
        neq == other.neq &&
        Gin == other.Gin &&
        nin == other.nin &&
        gt == other.gt &&
        ngt == other.ngt &&
        gte == other.gte &&
        ngte == other.ngte &&
        lt == other.lt &&
        nlt == other.nlt &&
        lte == other.lte &&
        nlte == other.nlte;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, eq.hashCode);
    _$hash = $jc(_$hash, neq.hashCode);
    _$hash = $jc(_$hash, Gin.hashCode);
    _$hash = $jc(_$hash, nin.hashCode);
    _$hash = $jc(_$hash, gt.hashCode);
    _$hash = $jc(_$hash, ngt.hashCode);
    _$hash = $jc(_$hash, gte.hashCode);
    _$hash = $jc(_$hash, ngte.hashCode);
    _$hash = $jc(_$hash, lt.hashCode);
    _$hash = $jc(_$hash, nlt.hashCode);
    _$hash = $jc(_$hash, lte.hashCode);
    _$hash = $jc(_$hash, nlte.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GComparableTimeSpanOperationFilterInput')
          ..add('eq', eq)
          ..add('neq', neq)
          ..add('Gin', Gin)
          ..add('nin', nin)
          ..add('gt', gt)
          ..add('ngt', ngt)
          ..add('gte', gte)
          ..add('ngte', ngte)
          ..add('lt', lt)
          ..add('nlt', nlt)
          ..add('lte', lte)
          ..add('nlte', nlte))
        .toString();
  }
}

class GComparableTimeSpanOperationFilterInputBuilder
    implements
        Builder<GComparableTimeSpanOperationFilterInput,
            GComparableTimeSpanOperationFilterInputBuilder> {
  _$GComparableTimeSpanOperationFilterInput? _$v;

  GTimeSpanBuilder? _eq;
  GTimeSpanBuilder get eq => _$this._eq ??= new GTimeSpanBuilder();
  set eq(GTimeSpanBuilder? eq) => _$this._eq = eq;

  GTimeSpanBuilder? _neq;
  GTimeSpanBuilder get neq => _$this._neq ??= new GTimeSpanBuilder();
  set neq(GTimeSpanBuilder? neq) => _$this._neq = neq;

  ListBuilder<GTimeSpan>? _Gin;
  ListBuilder<GTimeSpan> get Gin =>
      _$this._Gin ??= new ListBuilder<GTimeSpan>();
  set Gin(ListBuilder<GTimeSpan>? Gin) => _$this._Gin = Gin;

  ListBuilder<GTimeSpan>? _nin;
  ListBuilder<GTimeSpan> get nin =>
      _$this._nin ??= new ListBuilder<GTimeSpan>();
  set nin(ListBuilder<GTimeSpan>? nin) => _$this._nin = nin;

  GTimeSpanBuilder? _gt;
  GTimeSpanBuilder get gt => _$this._gt ??= new GTimeSpanBuilder();
  set gt(GTimeSpanBuilder? gt) => _$this._gt = gt;

  GTimeSpanBuilder? _ngt;
  GTimeSpanBuilder get ngt => _$this._ngt ??= new GTimeSpanBuilder();
  set ngt(GTimeSpanBuilder? ngt) => _$this._ngt = ngt;

  GTimeSpanBuilder? _gte;
  GTimeSpanBuilder get gte => _$this._gte ??= new GTimeSpanBuilder();
  set gte(GTimeSpanBuilder? gte) => _$this._gte = gte;

  GTimeSpanBuilder? _ngte;
  GTimeSpanBuilder get ngte => _$this._ngte ??= new GTimeSpanBuilder();
  set ngte(GTimeSpanBuilder? ngte) => _$this._ngte = ngte;

  GTimeSpanBuilder? _lt;
  GTimeSpanBuilder get lt => _$this._lt ??= new GTimeSpanBuilder();
  set lt(GTimeSpanBuilder? lt) => _$this._lt = lt;

  GTimeSpanBuilder? _nlt;
  GTimeSpanBuilder get nlt => _$this._nlt ??= new GTimeSpanBuilder();
  set nlt(GTimeSpanBuilder? nlt) => _$this._nlt = nlt;

  GTimeSpanBuilder? _lte;
  GTimeSpanBuilder get lte => _$this._lte ??= new GTimeSpanBuilder();
  set lte(GTimeSpanBuilder? lte) => _$this._lte = lte;

  GTimeSpanBuilder? _nlte;
  GTimeSpanBuilder get nlte => _$this._nlte ??= new GTimeSpanBuilder();
  set nlte(GTimeSpanBuilder? nlte) => _$this._nlte = nlte;

  GComparableTimeSpanOperationFilterInputBuilder();

  GComparableTimeSpanOperationFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _eq = $v.eq?.toBuilder();
      _neq = $v.neq?.toBuilder();
      _Gin = $v.Gin?.toBuilder();
      _nin = $v.nin?.toBuilder();
      _gt = $v.gt?.toBuilder();
      _ngt = $v.ngt?.toBuilder();
      _gte = $v.gte?.toBuilder();
      _ngte = $v.ngte?.toBuilder();
      _lt = $v.lt?.toBuilder();
      _nlt = $v.nlt?.toBuilder();
      _lte = $v.lte?.toBuilder();
      _nlte = $v.nlte?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GComparableTimeSpanOperationFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GComparableTimeSpanOperationFilterInput;
  }

  @override
  void update(
      void Function(GComparableTimeSpanOperationFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GComparableTimeSpanOperationFilterInput build() => _build();

  _$GComparableTimeSpanOperationFilterInput _build() {
    _$GComparableTimeSpanOperationFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GComparableTimeSpanOperationFilterInput._(
              eq: _eq?.build(),
              neq: _neq?.build(),
              Gin: _Gin?.build(),
              nin: _nin?.build(),
              gt: _gt?.build(),
              ngt: _ngt?.build(),
              gte: _gte?.build(),
              ngte: _ngte?.build(),
              lt: _lt?.build(),
              nlt: _nlt?.build(),
              lte: _lte?.build(),
              nlte: _nlte?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'eq';
        _eq?.build();
        _$failedField = 'neq';
        _neq?.build();
        _$failedField = 'Gin';
        _Gin?.build();
        _$failedField = 'nin';
        _nin?.build();
        _$failedField = 'gt';
        _gt?.build();
        _$failedField = 'ngt';
        _ngt?.build();
        _$failedField = 'gte';
        _gte?.build();
        _$failedField = 'ngte';
        _ngte?.build();
        _$failedField = 'lt';
        _lt?.build();
        _$failedField = 'nlt';
        _nlt?.build();
        _$failedField = 'lte';
        _lte?.build();
        _$failedField = 'nlte';
        _nlte?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GComparableTimeSpanOperationFilterInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GColorCustomFilterInput extends GColorCustomFilterInput {
  @override
  final BuiltList<GColorCustomFilterInput>? and;
  @override
  final BuiltList<GColorCustomFilterInput>? or;
  @override
  final GStringOperationFilterInput? r;
  @override
  final GStringOperationFilterInput? g;
  @override
  final GStringOperationFilterInput? b;
  @override
  final GStringOperationFilterInput? a;
  @override
  final GComparableInt32OperationFilterInput? id;

  factory _$GColorCustomFilterInput(
          [void Function(GColorCustomFilterInputBuilder)? updates]) =>
      (new GColorCustomFilterInputBuilder()..update(updates))._build();

  _$GColorCustomFilterInput._(
      {this.and, this.or, this.r, this.g, this.b, this.a, this.id})
      : super._();

  @override
  GColorCustomFilterInput rebuild(
          void Function(GColorCustomFilterInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GColorCustomFilterInputBuilder toBuilder() =>
      new GColorCustomFilterInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GColorCustomFilterInput &&
        and == other.and &&
        or == other.or &&
        r == other.r &&
        g == other.g &&
        b == other.b &&
        a == other.a &&
        id == other.id;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, and.hashCode);
    _$hash = $jc(_$hash, or.hashCode);
    _$hash = $jc(_$hash, r.hashCode);
    _$hash = $jc(_$hash, g.hashCode);
    _$hash = $jc(_$hash, b.hashCode);
    _$hash = $jc(_$hash, a.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GColorCustomFilterInput')
          ..add('and', and)
          ..add('or', or)
          ..add('r', r)
          ..add('g', g)
          ..add('b', b)
          ..add('a', a)
          ..add('id', id))
        .toString();
  }
}

class GColorCustomFilterInputBuilder
    implements
        Builder<GColorCustomFilterInput, GColorCustomFilterInputBuilder> {
  _$GColorCustomFilterInput? _$v;

  ListBuilder<GColorCustomFilterInput>? _and;
  ListBuilder<GColorCustomFilterInput> get and =>
      _$this._and ??= new ListBuilder<GColorCustomFilterInput>();
  set and(ListBuilder<GColorCustomFilterInput>? and) => _$this._and = and;

  ListBuilder<GColorCustomFilterInput>? _or;
  ListBuilder<GColorCustomFilterInput> get or =>
      _$this._or ??= new ListBuilder<GColorCustomFilterInput>();
  set or(ListBuilder<GColorCustomFilterInput>? or) => _$this._or = or;

  GStringOperationFilterInputBuilder? _r;
  GStringOperationFilterInputBuilder get r =>
      _$this._r ??= new GStringOperationFilterInputBuilder();
  set r(GStringOperationFilterInputBuilder? r) => _$this._r = r;

  GStringOperationFilterInputBuilder? _g;
  GStringOperationFilterInputBuilder get g =>
      _$this._g ??= new GStringOperationFilterInputBuilder();
  set g(GStringOperationFilterInputBuilder? g) => _$this._g = g;

  GStringOperationFilterInputBuilder? _b;
  GStringOperationFilterInputBuilder get b =>
      _$this._b ??= new GStringOperationFilterInputBuilder();
  set b(GStringOperationFilterInputBuilder? b) => _$this._b = b;

  GStringOperationFilterInputBuilder? _a;
  GStringOperationFilterInputBuilder get a =>
      _$this._a ??= new GStringOperationFilterInputBuilder();
  set a(GStringOperationFilterInputBuilder? a) => _$this._a = a;

  GComparableInt32OperationFilterInputBuilder? _id;
  GComparableInt32OperationFilterInputBuilder get id =>
      _$this._id ??= new GComparableInt32OperationFilterInputBuilder();
  set id(GComparableInt32OperationFilterInputBuilder? id) => _$this._id = id;

  GColorCustomFilterInputBuilder();

  GColorCustomFilterInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _and = $v.and?.toBuilder();
      _or = $v.or?.toBuilder();
      _r = $v.r?.toBuilder();
      _g = $v.g?.toBuilder();
      _b = $v.b?.toBuilder();
      _a = $v.a?.toBuilder();
      _id = $v.id?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GColorCustomFilterInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GColorCustomFilterInput;
  }

  @override
  void update(void Function(GColorCustomFilterInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GColorCustomFilterInput build() => _build();

  _$GColorCustomFilterInput _build() {
    _$GColorCustomFilterInput _$result;
    try {
      _$result = _$v ??
          new _$GColorCustomFilterInput._(
              and: _and?.build(),
              or: _or?.build(),
              r: _r?.build(),
              g: _g?.build(),
              b: _b?.build(),
              a: _a?.build(),
              id: _id?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'and';
        _and?.build();
        _$failedField = 'or';
        _or?.build();
        _$failedField = 'r';
        _r?.build();
        _$failedField = 'g';
        _g?.build();
        _$failedField = 'b';
        _b?.build();
        _$failedField = 'a';
        _a?.build();
        _$failedField = 'id';
        _id?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GColorCustomFilterInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCreateRideRequestInput extends GCreateRideRequestInput {
  @override
  final String name;
  @override
  final String placeofStart;
  @override
  final String destination;
  @override
  final bool? isActive;
  @override
  final String departureDate;
  @override
  final String duration;
  @override
  final double estimatePrice;
  @override
  final String estimateDistance;
  @override
  final int numberOfPeople;
  @override
  final int maximumCarryWeight;
  @override
  final String carId;
  @override
  final GSeatInput seat;
  @override
  final String departureTime;
  @override
  final String? allowedBehDesc;
  @override
  final int? rideIndex;
  @override
  final String? exactPickupLocation;
  @override
  final String? exactDropOffLocation;
  @override
  final bool? isRecurring;

  factory _$GCreateRideRequestInput(
          [void Function(GCreateRideRequestInputBuilder)? updates]) =>
      (new GCreateRideRequestInputBuilder()..update(updates))._build();

  _$GCreateRideRequestInput._(
      {required this.name,
      required this.placeofStart,
      required this.destination,
      this.isActive,
      required this.departureDate,
      required this.duration,
      required this.estimatePrice,
      required this.estimateDistance,
      required this.numberOfPeople,
      required this.maximumCarryWeight,
      required this.carId,
      required this.seat,
      required this.departureTime,
      this.allowedBehDesc,
      this.rideIndex,
      this.exactPickupLocation,
      this.exactDropOffLocation,
      this.isRecurring})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        name, r'GCreateRideRequestInput', 'name');
    BuiltValueNullFieldError.checkNotNull(
        placeofStart, r'GCreateRideRequestInput', 'placeofStart');
    BuiltValueNullFieldError.checkNotNull(
        destination, r'GCreateRideRequestInput', 'destination');
    BuiltValueNullFieldError.checkNotNull(
        departureDate, r'GCreateRideRequestInput', 'departureDate');
    BuiltValueNullFieldError.checkNotNull(
        duration, r'GCreateRideRequestInput', 'duration');
    BuiltValueNullFieldError.checkNotNull(
        estimatePrice, r'GCreateRideRequestInput', 'estimatePrice');
    BuiltValueNullFieldError.checkNotNull(
        estimateDistance, r'GCreateRideRequestInput', 'estimateDistance');
    BuiltValueNullFieldError.checkNotNull(
        numberOfPeople, r'GCreateRideRequestInput', 'numberOfPeople');
    BuiltValueNullFieldError.checkNotNull(
        maximumCarryWeight, r'GCreateRideRequestInput', 'maximumCarryWeight');
    BuiltValueNullFieldError.checkNotNull(
        carId, r'GCreateRideRequestInput', 'carId');
    BuiltValueNullFieldError.checkNotNull(
        seat, r'GCreateRideRequestInput', 'seat');
    BuiltValueNullFieldError.checkNotNull(
        departureTime, r'GCreateRideRequestInput', 'departureTime');
  }

  @override
  GCreateRideRequestInput rebuild(
          void Function(GCreateRideRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCreateRideRequestInputBuilder toBuilder() =>
      new GCreateRideRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCreateRideRequestInput &&
        name == other.name &&
        placeofStart == other.placeofStart &&
        destination == other.destination &&
        isActive == other.isActive &&
        departureDate == other.departureDate &&
        duration == other.duration &&
        estimatePrice == other.estimatePrice &&
        estimateDistance == other.estimateDistance &&
        numberOfPeople == other.numberOfPeople &&
        maximumCarryWeight == other.maximumCarryWeight &&
        carId == other.carId &&
        seat == other.seat &&
        departureTime == other.departureTime &&
        allowedBehDesc == other.allowedBehDesc &&
        rideIndex == other.rideIndex &&
        exactPickupLocation == other.exactPickupLocation &&
        exactDropOffLocation == other.exactDropOffLocation &&
        isRecurring == other.isRecurring;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, name.hashCode);
    _$hash = $jc(_$hash, placeofStart.hashCode);
    _$hash = $jc(_$hash, destination.hashCode);
    _$hash = $jc(_$hash, isActive.hashCode);
    _$hash = $jc(_$hash, departureDate.hashCode);
    _$hash = $jc(_$hash, duration.hashCode);
    _$hash = $jc(_$hash, estimatePrice.hashCode);
    _$hash = $jc(_$hash, estimateDistance.hashCode);
    _$hash = $jc(_$hash, numberOfPeople.hashCode);
    _$hash = $jc(_$hash, maximumCarryWeight.hashCode);
    _$hash = $jc(_$hash, carId.hashCode);
    _$hash = $jc(_$hash, seat.hashCode);
    _$hash = $jc(_$hash, departureTime.hashCode);
    _$hash = $jc(_$hash, allowedBehDesc.hashCode);
    _$hash = $jc(_$hash, rideIndex.hashCode);
    _$hash = $jc(_$hash, exactPickupLocation.hashCode);
    _$hash = $jc(_$hash, exactDropOffLocation.hashCode);
    _$hash = $jc(_$hash, isRecurring.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCreateRideRequestInput')
          ..add('name', name)
          ..add('placeofStart', placeofStart)
          ..add('destination', destination)
          ..add('isActive', isActive)
          ..add('departureDate', departureDate)
          ..add('duration', duration)
          ..add('estimatePrice', estimatePrice)
          ..add('estimateDistance', estimateDistance)
          ..add('numberOfPeople', numberOfPeople)
          ..add('maximumCarryWeight', maximumCarryWeight)
          ..add('carId', carId)
          ..add('seat', seat)
          ..add('departureTime', departureTime)
          ..add('allowedBehDesc', allowedBehDesc)
          ..add('rideIndex', rideIndex)
          ..add('exactPickupLocation', exactPickupLocation)
          ..add('exactDropOffLocation', exactDropOffLocation)
          ..add('isRecurring', isRecurring))
        .toString();
  }
}

class GCreateRideRequestInputBuilder
    implements
        Builder<GCreateRideRequestInput, GCreateRideRequestInputBuilder> {
  _$GCreateRideRequestInput? _$v;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  String? _placeofStart;
  String? get placeofStart => _$this._placeofStart;
  set placeofStart(String? placeofStart) => _$this._placeofStart = placeofStart;

  String? _destination;
  String? get destination => _$this._destination;
  set destination(String? destination) => _$this._destination = destination;

  bool? _isActive;
  bool? get isActive => _$this._isActive;
  set isActive(bool? isActive) => _$this._isActive = isActive;

  String? _departureDate;
  String? get departureDate => _$this._departureDate;
  set departureDate(String? departureDate) =>
      _$this._departureDate = departureDate;

  String? _duration;
  String? get duration => _$this._duration;
  set duration(String? duration) => _$this._duration = duration;

  double? _estimatePrice;
  double? get estimatePrice => _$this._estimatePrice;
  set estimatePrice(double? estimatePrice) =>
      _$this._estimatePrice = estimatePrice;

  String? _estimateDistance;
  String? get estimateDistance => _$this._estimateDistance;
  set estimateDistance(String? estimateDistance) =>
      _$this._estimateDistance = estimateDistance;

  int? _numberOfPeople;
  int? get numberOfPeople => _$this._numberOfPeople;
  set numberOfPeople(int? numberOfPeople) =>
      _$this._numberOfPeople = numberOfPeople;

  int? _maximumCarryWeight;
  int? get maximumCarryWeight => _$this._maximumCarryWeight;
  set maximumCarryWeight(int? maximumCarryWeight) =>
      _$this._maximumCarryWeight = maximumCarryWeight;

  String? _carId;
  String? get carId => _$this._carId;
  set carId(String? carId) => _$this._carId = carId;

  GSeatInputBuilder? _seat;
  GSeatInputBuilder get seat => _$this._seat ??= new GSeatInputBuilder();
  set seat(GSeatInputBuilder? seat) => _$this._seat = seat;

  String? _departureTime;
  String? get departureTime => _$this._departureTime;
  set departureTime(String? departureTime) =>
      _$this._departureTime = departureTime;

  String? _allowedBehDesc;
  String? get allowedBehDesc => _$this._allowedBehDesc;
  set allowedBehDesc(String? allowedBehDesc) =>
      _$this._allowedBehDesc = allowedBehDesc;

  int? _rideIndex;
  int? get rideIndex => _$this._rideIndex;
  set rideIndex(int? rideIndex) => _$this._rideIndex = rideIndex;

  String? _exactPickupLocation;
  String? get exactPickupLocation => _$this._exactPickupLocation;
  set exactPickupLocation(String? exactPickupLocation) =>
      _$this._exactPickupLocation = exactPickupLocation;

  String? _exactDropOffLocation;
  String? get exactDropOffLocation => _$this._exactDropOffLocation;
  set exactDropOffLocation(String? exactDropOffLocation) =>
      _$this._exactDropOffLocation = exactDropOffLocation;

  bool? _isRecurring;
  bool? get isRecurring => _$this._isRecurring;
  set isRecurring(bool? isRecurring) => _$this._isRecurring = isRecurring;

  GCreateRideRequestInputBuilder();

  GCreateRideRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _name = $v.name;
      _placeofStart = $v.placeofStart;
      _destination = $v.destination;
      _isActive = $v.isActive;
      _departureDate = $v.departureDate;
      _duration = $v.duration;
      _estimatePrice = $v.estimatePrice;
      _estimateDistance = $v.estimateDistance;
      _numberOfPeople = $v.numberOfPeople;
      _maximumCarryWeight = $v.maximumCarryWeight;
      _carId = $v.carId;
      _seat = $v.seat.toBuilder();
      _departureTime = $v.departureTime;
      _allowedBehDesc = $v.allowedBehDesc;
      _rideIndex = $v.rideIndex;
      _exactPickupLocation = $v.exactPickupLocation;
      _exactDropOffLocation = $v.exactDropOffLocation;
      _isRecurring = $v.isRecurring;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCreateRideRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCreateRideRequestInput;
  }

  @override
  void update(void Function(GCreateRideRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCreateRideRequestInput build() => _build();

  _$GCreateRideRequestInput _build() {
    _$GCreateRideRequestInput _$result;
    try {
      _$result = _$v ??
          new _$GCreateRideRequestInput._(
              name: BuiltValueNullFieldError.checkNotNull(
                  name, r'GCreateRideRequestInput', 'name'),
              placeofStart: BuiltValueNullFieldError.checkNotNull(
                  placeofStart, r'GCreateRideRequestInput', 'placeofStart'),
              destination: BuiltValueNullFieldError.checkNotNull(
                  destination, r'GCreateRideRequestInput', 'destination'),
              isActive: isActive,
              departureDate: BuiltValueNullFieldError.checkNotNull(
                  departureDate, r'GCreateRideRequestInput', 'departureDate'),
              duration: BuiltValueNullFieldError.checkNotNull(
                  duration, r'GCreateRideRequestInput', 'duration'),
              estimatePrice: BuiltValueNullFieldError.checkNotNull(
                  estimatePrice, r'GCreateRideRequestInput', 'estimatePrice'),
              estimateDistance: BuiltValueNullFieldError.checkNotNull(
                  estimateDistance, r'GCreateRideRequestInput', 'estimateDistance'),
              numberOfPeople:
                  BuiltValueNullFieldError.checkNotNull(numberOfPeople, r'GCreateRideRequestInput', 'numberOfPeople'),
              maximumCarryWeight: BuiltValueNullFieldError.checkNotNull(maximumCarryWeight, r'GCreateRideRequestInput', 'maximumCarryWeight'),
              carId: BuiltValueNullFieldError.checkNotNull(carId, r'GCreateRideRequestInput', 'carId'),
              seat: seat.build(),
              departureTime: BuiltValueNullFieldError.checkNotNull(departureTime, r'GCreateRideRequestInput', 'departureTime'),
              allowedBehDesc: allowedBehDesc,
              rideIndex: rideIndex,
              exactPickupLocation: exactPickupLocation,
              exactDropOffLocation: exactDropOffLocation,
              isRecurring: isRecurring);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'seat';
        seat.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCreateRideRequestInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GContactUsRequestInput extends GContactUsRequestInput {
  @override
  final String name;
  @override
  final String email;
  @override
  final String message;

  factory _$GContactUsRequestInput(
          [void Function(GContactUsRequestInputBuilder)? updates]) =>
      (new GContactUsRequestInputBuilder()..update(updates))._build();

  _$GContactUsRequestInput._(
      {required this.name, required this.email, required this.message})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        name, r'GContactUsRequestInput', 'name');
    BuiltValueNullFieldError.checkNotNull(
        email, r'GContactUsRequestInput', 'email');
    BuiltValueNullFieldError.checkNotNull(
        message, r'GContactUsRequestInput', 'message');
  }

  @override
  GContactUsRequestInput rebuild(
          void Function(GContactUsRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GContactUsRequestInputBuilder toBuilder() =>
      new GContactUsRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GContactUsRequestInput &&
        name == other.name &&
        email == other.email &&
        message == other.message;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, name.hashCode);
    _$hash = $jc(_$hash, email.hashCode);
    _$hash = $jc(_$hash, message.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GContactUsRequestInput')
          ..add('name', name)
          ..add('email', email)
          ..add('message', message))
        .toString();
  }
}

class GContactUsRequestInputBuilder
    implements Builder<GContactUsRequestInput, GContactUsRequestInputBuilder> {
  _$GContactUsRequestInput? _$v;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  String? _message;
  String? get message => _$this._message;
  set message(String? message) => _$this._message = message;

  GContactUsRequestInputBuilder();

  GContactUsRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _name = $v.name;
      _email = $v.email;
      _message = $v.message;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GContactUsRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GContactUsRequestInput;
  }

  @override
  void update(void Function(GContactUsRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GContactUsRequestInput build() => _build();

  _$GContactUsRequestInput _build() {
    final _$result = _$v ??
        new _$GContactUsRequestInput._(
            name: BuiltValueNullFieldError.checkNotNull(
                name, r'GContactUsRequestInput', 'name'),
            email: BuiltValueNullFieldError.checkNotNull(
                email, r'GContactUsRequestInput', 'email'),
            message: BuiltValueNullFieldError.checkNotNull(
                message, r'GContactUsRequestInput', 'message'));
    replace(_$result);
    return _$result;
  }
}

class _$GToggleUserStatusRequestInput extends GToggleUserStatusRequestInput {
  @override
  final bool activateUser;
  @override
  final String userId;

  factory _$GToggleUserStatusRequestInput(
          [void Function(GToggleUserStatusRequestInputBuilder)? updates]) =>
      (new GToggleUserStatusRequestInputBuilder()..update(updates))._build();

  _$GToggleUserStatusRequestInput._(
      {required this.activateUser, required this.userId})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        activateUser, r'GToggleUserStatusRequestInput', 'activateUser');
    BuiltValueNullFieldError.checkNotNull(
        userId, r'GToggleUserStatusRequestInput', 'userId');
  }

  @override
  GToggleUserStatusRequestInput rebuild(
          void Function(GToggleUserStatusRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GToggleUserStatusRequestInputBuilder toBuilder() =>
      new GToggleUserStatusRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GToggleUserStatusRequestInput &&
        activateUser == other.activateUser &&
        userId == other.userId;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, activateUser.hashCode);
    _$hash = $jc(_$hash, userId.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GToggleUserStatusRequestInput')
          ..add('activateUser', activateUser)
          ..add('userId', userId))
        .toString();
  }
}

class GToggleUserStatusRequestInputBuilder
    implements
        Builder<GToggleUserStatusRequestInput,
            GToggleUserStatusRequestInputBuilder> {
  _$GToggleUserStatusRequestInput? _$v;

  bool? _activateUser;
  bool? get activateUser => _$this._activateUser;
  set activateUser(bool? activateUser) => _$this._activateUser = activateUser;

  String? _userId;
  String? get userId => _$this._userId;
  set userId(String? userId) => _$this._userId = userId;

  GToggleUserStatusRequestInputBuilder();

  GToggleUserStatusRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _activateUser = $v.activateUser;
      _userId = $v.userId;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GToggleUserStatusRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GToggleUserStatusRequestInput;
  }

  @override
  void update(void Function(GToggleUserStatusRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GToggleUserStatusRequestInput build() => _build();

  _$GToggleUserStatusRequestInput _build() {
    final _$result = _$v ??
        new _$GToggleUserStatusRequestInput._(
            activateUser: BuiltValueNullFieldError.checkNotNull(
                activateUser, r'GToggleUserStatusRequestInput', 'activateUser'),
            userId: BuiltValueNullFieldError.checkNotNull(
                userId, r'GToggleUserStatusRequestInput', 'userId'));
    replace(_$result);
    return _$result;
  }
}

class _$GUpdateIdentificationDocumentRequestInput
    extends GUpdateIdentificationDocumentRequestInput {
  @override
  final String email;
  @override
  final GIdentificationDocumentInput? identificationDocument;
  @override
  final String? updatedBy;

  factory _$GUpdateIdentificationDocumentRequestInput(
          [void Function(GUpdateIdentificationDocumentRequestInputBuilder)?
              updates]) =>
      (new GUpdateIdentificationDocumentRequestInputBuilder()..update(updates))
          ._build();

  _$GUpdateIdentificationDocumentRequestInput._(
      {required this.email, this.identificationDocument, this.updatedBy})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        email, r'GUpdateIdentificationDocumentRequestInput', 'email');
  }

  @override
  GUpdateIdentificationDocumentRequestInput rebuild(
          void Function(GUpdateIdentificationDocumentRequestInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUpdateIdentificationDocumentRequestInputBuilder toBuilder() =>
      new GUpdateIdentificationDocumentRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUpdateIdentificationDocumentRequestInput &&
        email == other.email &&
        identificationDocument == other.identificationDocument &&
        updatedBy == other.updatedBy;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, email.hashCode);
    _$hash = $jc(_$hash, identificationDocument.hashCode);
    _$hash = $jc(_$hash, updatedBy.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GUpdateIdentificationDocumentRequestInput')
          ..add('email', email)
          ..add('identificationDocument', identificationDocument)
          ..add('updatedBy', updatedBy))
        .toString();
  }
}

class GUpdateIdentificationDocumentRequestInputBuilder
    implements
        Builder<GUpdateIdentificationDocumentRequestInput,
            GUpdateIdentificationDocumentRequestInputBuilder> {
  _$GUpdateIdentificationDocumentRequestInput? _$v;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  GIdentificationDocumentInputBuilder? _identificationDocument;
  GIdentificationDocumentInputBuilder get identificationDocument =>
      _$this._identificationDocument ??=
          new GIdentificationDocumentInputBuilder();
  set identificationDocument(
          GIdentificationDocumentInputBuilder? identificationDocument) =>
      _$this._identificationDocument = identificationDocument;

  String? _updatedBy;
  String? get updatedBy => _$this._updatedBy;
  set updatedBy(String? updatedBy) => _$this._updatedBy = updatedBy;

  GUpdateIdentificationDocumentRequestInputBuilder();

  GUpdateIdentificationDocumentRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _email = $v.email;
      _identificationDocument = $v.identificationDocument?.toBuilder();
      _updatedBy = $v.updatedBy;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUpdateIdentificationDocumentRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUpdateIdentificationDocumentRequestInput;
  }

  @override
  void update(
      void Function(GUpdateIdentificationDocumentRequestInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GUpdateIdentificationDocumentRequestInput build() => _build();

  _$GUpdateIdentificationDocumentRequestInput _build() {
    _$GUpdateIdentificationDocumentRequestInput _$result;
    try {
      _$result = _$v ??
          new _$GUpdateIdentificationDocumentRequestInput._(
              email: BuiltValueNullFieldError.checkNotNull(
                  email, r'GUpdateIdentificationDocumentRequestInput', 'email'),
              identificationDocument: _identificationDocument?.build(),
              updatedBy: updatedBy);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'identificationDocument';
        _identificationDocument?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUpdateIdentificationDocumentRequestInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUpdateRequestInput extends GUpdateRequestInput {
  @override
  final String? firstName;
  @override
  final String? lastName;
  @override
  final String email;
  @override
  final String? userName;
  @override
  final String? aboutMe;
  @override
  final String? phoneNumber;
  @override
  final String? updatedBy;

  factory _$GUpdateRequestInput(
          [void Function(GUpdateRequestInputBuilder)? updates]) =>
      (new GUpdateRequestInputBuilder()..update(updates))._build();

  _$GUpdateRequestInput._(
      {this.firstName,
      this.lastName,
      required this.email,
      this.userName,
      this.aboutMe,
      this.phoneNumber,
      this.updatedBy})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        email, r'GUpdateRequestInput', 'email');
  }

  @override
  GUpdateRequestInput rebuild(
          void Function(GUpdateRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUpdateRequestInputBuilder toBuilder() =>
      new GUpdateRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUpdateRequestInput &&
        firstName == other.firstName &&
        lastName == other.lastName &&
        email == other.email &&
        userName == other.userName &&
        aboutMe == other.aboutMe &&
        phoneNumber == other.phoneNumber &&
        updatedBy == other.updatedBy;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, firstName.hashCode);
    _$hash = $jc(_$hash, lastName.hashCode);
    _$hash = $jc(_$hash, email.hashCode);
    _$hash = $jc(_$hash, userName.hashCode);
    _$hash = $jc(_$hash, aboutMe.hashCode);
    _$hash = $jc(_$hash, phoneNumber.hashCode);
    _$hash = $jc(_$hash, updatedBy.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUpdateRequestInput')
          ..add('firstName', firstName)
          ..add('lastName', lastName)
          ..add('email', email)
          ..add('userName', userName)
          ..add('aboutMe', aboutMe)
          ..add('phoneNumber', phoneNumber)
          ..add('updatedBy', updatedBy))
        .toString();
  }
}

class GUpdateRequestInputBuilder
    implements Builder<GUpdateRequestInput, GUpdateRequestInputBuilder> {
  _$GUpdateRequestInput? _$v;

  String? _firstName;
  String? get firstName => _$this._firstName;
  set firstName(String? firstName) => _$this._firstName = firstName;

  String? _lastName;
  String? get lastName => _$this._lastName;
  set lastName(String? lastName) => _$this._lastName = lastName;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  String? _userName;
  String? get userName => _$this._userName;
  set userName(String? userName) => _$this._userName = userName;

  String? _aboutMe;
  String? get aboutMe => _$this._aboutMe;
  set aboutMe(String? aboutMe) => _$this._aboutMe = aboutMe;

  String? _phoneNumber;
  String? get phoneNumber => _$this._phoneNumber;
  set phoneNumber(String? phoneNumber) => _$this._phoneNumber = phoneNumber;

  String? _updatedBy;
  String? get updatedBy => _$this._updatedBy;
  set updatedBy(String? updatedBy) => _$this._updatedBy = updatedBy;

  GUpdateRequestInputBuilder();

  GUpdateRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _firstName = $v.firstName;
      _lastName = $v.lastName;
      _email = $v.email;
      _userName = $v.userName;
      _aboutMe = $v.aboutMe;
      _phoneNumber = $v.phoneNumber;
      _updatedBy = $v.updatedBy;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUpdateRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUpdateRequestInput;
  }

  @override
  void update(void Function(GUpdateRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUpdateRequestInput build() => _build();

  _$GUpdateRequestInput _build() {
    final _$result = _$v ??
        new _$GUpdateRequestInput._(
            firstName: firstName,
            lastName: lastName,
            email: BuiltValueNullFieldError.checkNotNull(
                email, r'GUpdateRequestInput', 'email'),
            userName: userName,
            aboutMe: aboutMe,
            phoneNumber: phoneNumber,
            updatedBy: updatedBy);
    replace(_$result);
    return _$result;
  }
}

class _$GRegisterRequestInput extends GRegisterRequestInput {
  @override
  final String firstName;
  @override
  final String lastName;
  @override
  final String email;
  @override
  final String nationalId;
  @override
  final String userName;
  @override
  final String password;
  @override
  final String confirmPassword;
  @override
  final String phoneNumber;
  @override
  final String role;
  @override
  final bool activateUser;
  @override
  final bool autoConfirmEmail;
  @override
  final String createdBy;
  @override
  final GIdentificationDocumentInput? identificationDocument;
  @override
  final int totalRating;
  @override
  final double averageRating;
  @override
  final String? referalCode;
  @override
  final GLocationDtoInput locationDto;
  @override
  final GDeviceDtoInput? deviceDto;

  factory _$GRegisterRequestInput(
          [void Function(GRegisterRequestInputBuilder)? updates]) =>
      (new GRegisterRequestInputBuilder()..update(updates))._build();

  _$GRegisterRequestInput._(
      {required this.firstName,
      required this.lastName,
      required this.email,
      required this.nationalId,
      required this.userName,
      required this.password,
      required this.confirmPassword,
      required this.phoneNumber,
      required this.role,
      required this.activateUser,
      required this.autoConfirmEmail,
      required this.createdBy,
      this.identificationDocument,
      required this.totalRating,
      required this.averageRating,
      this.referalCode,
      required this.locationDto,
      this.deviceDto})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        firstName, r'GRegisterRequestInput', 'firstName');
    BuiltValueNullFieldError.checkNotNull(
        lastName, r'GRegisterRequestInput', 'lastName');
    BuiltValueNullFieldError.checkNotNull(
        email, r'GRegisterRequestInput', 'email');
    BuiltValueNullFieldError.checkNotNull(
        nationalId, r'GRegisterRequestInput', 'nationalId');
    BuiltValueNullFieldError.checkNotNull(
        userName, r'GRegisterRequestInput', 'userName');
    BuiltValueNullFieldError.checkNotNull(
        password, r'GRegisterRequestInput', 'password');
    BuiltValueNullFieldError.checkNotNull(
        confirmPassword, r'GRegisterRequestInput', 'confirmPassword');
    BuiltValueNullFieldError.checkNotNull(
        phoneNumber, r'GRegisterRequestInput', 'phoneNumber');
    BuiltValueNullFieldError.checkNotNull(
        role, r'GRegisterRequestInput', 'role');
    BuiltValueNullFieldError.checkNotNull(
        activateUser, r'GRegisterRequestInput', 'activateUser');
    BuiltValueNullFieldError.checkNotNull(
        autoConfirmEmail, r'GRegisterRequestInput', 'autoConfirmEmail');
    BuiltValueNullFieldError.checkNotNull(
        createdBy, r'GRegisterRequestInput', 'createdBy');
    BuiltValueNullFieldError.checkNotNull(
        totalRating, r'GRegisterRequestInput', 'totalRating');
    BuiltValueNullFieldError.checkNotNull(
        averageRating, r'GRegisterRequestInput', 'averageRating');
    BuiltValueNullFieldError.checkNotNull(
        locationDto, r'GRegisterRequestInput', 'locationDto');
  }

  @override
  GRegisterRequestInput rebuild(
          void Function(GRegisterRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GRegisterRequestInputBuilder toBuilder() =>
      new GRegisterRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GRegisterRequestInput &&
        firstName == other.firstName &&
        lastName == other.lastName &&
        email == other.email &&
        nationalId == other.nationalId &&
        userName == other.userName &&
        password == other.password &&
        confirmPassword == other.confirmPassword &&
        phoneNumber == other.phoneNumber &&
        role == other.role &&
        activateUser == other.activateUser &&
        autoConfirmEmail == other.autoConfirmEmail &&
        createdBy == other.createdBy &&
        identificationDocument == other.identificationDocument &&
        totalRating == other.totalRating &&
        averageRating == other.averageRating &&
        referalCode == other.referalCode &&
        locationDto == other.locationDto &&
        deviceDto == other.deviceDto;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, firstName.hashCode);
    _$hash = $jc(_$hash, lastName.hashCode);
    _$hash = $jc(_$hash, email.hashCode);
    _$hash = $jc(_$hash, nationalId.hashCode);
    _$hash = $jc(_$hash, userName.hashCode);
    _$hash = $jc(_$hash, password.hashCode);
    _$hash = $jc(_$hash, confirmPassword.hashCode);
    _$hash = $jc(_$hash, phoneNumber.hashCode);
    _$hash = $jc(_$hash, role.hashCode);
    _$hash = $jc(_$hash, activateUser.hashCode);
    _$hash = $jc(_$hash, autoConfirmEmail.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, identificationDocument.hashCode);
    _$hash = $jc(_$hash, totalRating.hashCode);
    _$hash = $jc(_$hash, averageRating.hashCode);
    _$hash = $jc(_$hash, referalCode.hashCode);
    _$hash = $jc(_$hash, locationDto.hashCode);
    _$hash = $jc(_$hash, deviceDto.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GRegisterRequestInput')
          ..add('firstName', firstName)
          ..add('lastName', lastName)
          ..add('email', email)
          ..add('nationalId', nationalId)
          ..add('userName', userName)
          ..add('password', password)
          ..add('confirmPassword', confirmPassword)
          ..add('phoneNumber', phoneNumber)
          ..add('role', role)
          ..add('activateUser', activateUser)
          ..add('autoConfirmEmail', autoConfirmEmail)
          ..add('createdBy', createdBy)
          ..add('identificationDocument', identificationDocument)
          ..add('totalRating', totalRating)
          ..add('averageRating', averageRating)
          ..add('referalCode', referalCode)
          ..add('locationDto', locationDto)
          ..add('deviceDto', deviceDto))
        .toString();
  }
}

class GRegisterRequestInputBuilder
    implements Builder<GRegisterRequestInput, GRegisterRequestInputBuilder> {
  _$GRegisterRequestInput? _$v;

  String? _firstName;
  String? get firstName => _$this._firstName;
  set firstName(String? firstName) => _$this._firstName = firstName;

  String? _lastName;
  String? get lastName => _$this._lastName;
  set lastName(String? lastName) => _$this._lastName = lastName;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  String? _nationalId;
  String? get nationalId => _$this._nationalId;
  set nationalId(String? nationalId) => _$this._nationalId = nationalId;

  String? _userName;
  String? get userName => _$this._userName;
  set userName(String? userName) => _$this._userName = userName;

  String? _password;
  String? get password => _$this._password;
  set password(String? password) => _$this._password = password;

  String? _confirmPassword;
  String? get confirmPassword => _$this._confirmPassword;
  set confirmPassword(String? confirmPassword) =>
      _$this._confirmPassword = confirmPassword;

  String? _phoneNumber;
  String? get phoneNumber => _$this._phoneNumber;
  set phoneNumber(String? phoneNumber) => _$this._phoneNumber = phoneNumber;

  String? _role;
  String? get role => _$this._role;
  set role(String? role) => _$this._role = role;

  bool? _activateUser;
  bool? get activateUser => _$this._activateUser;
  set activateUser(bool? activateUser) => _$this._activateUser = activateUser;

  bool? _autoConfirmEmail;
  bool? get autoConfirmEmail => _$this._autoConfirmEmail;
  set autoConfirmEmail(bool? autoConfirmEmail) =>
      _$this._autoConfirmEmail = autoConfirmEmail;

  String? _createdBy;
  String? get createdBy => _$this._createdBy;
  set createdBy(String? createdBy) => _$this._createdBy = createdBy;

  GIdentificationDocumentInputBuilder? _identificationDocument;
  GIdentificationDocumentInputBuilder get identificationDocument =>
      _$this._identificationDocument ??=
          new GIdentificationDocumentInputBuilder();
  set identificationDocument(
          GIdentificationDocumentInputBuilder? identificationDocument) =>
      _$this._identificationDocument = identificationDocument;

  int? _totalRating;
  int? get totalRating => _$this._totalRating;
  set totalRating(int? totalRating) => _$this._totalRating = totalRating;

  double? _averageRating;
  double? get averageRating => _$this._averageRating;
  set averageRating(double? averageRating) =>
      _$this._averageRating = averageRating;

  String? _referalCode;
  String? get referalCode => _$this._referalCode;
  set referalCode(String? referalCode) => _$this._referalCode = referalCode;

  GLocationDtoInputBuilder? _locationDto;
  GLocationDtoInputBuilder get locationDto =>
      _$this._locationDto ??= new GLocationDtoInputBuilder();
  set locationDto(GLocationDtoInputBuilder? locationDto) =>
      _$this._locationDto = locationDto;

  GDeviceDtoInputBuilder? _deviceDto;
  GDeviceDtoInputBuilder get deviceDto =>
      _$this._deviceDto ??= new GDeviceDtoInputBuilder();
  set deviceDto(GDeviceDtoInputBuilder? deviceDto) =>
      _$this._deviceDto = deviceDto;

  GRegisterRequestInputBuilder();

  GRegisterRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _firstName = $v.firstName;
      _lastName = $v.lastName;
      _email = $v.email;
      _nationalId = $v.nationalId;
      _userName = $v.userName;
      _password = $v.password;
      _confirmPassword = $v.confirmPassword;
      _phoneNumber = $v.phoneNumber;
      _role = $v.role;
      _activateUser = $v.activateUser;
      _autoConfirmEmail = $v.autoConfirmEmail;
      _createdBy = $v.createdBy;
      _identificationDocument = $v.identificationDocument?.toBuilder();
      _totalRating = $v.totalRating;
      _averageRating = $v.averageRating;
      _referalCode = $v.referalCode;
      _locationDto = $v.locationDto.toBuilder();
      _deviceDto = $v.deviceDto?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GRegisterRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GRegisterRequestInput;
  }

  @override
  void update(void Function(GRegisterRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GRegisterRequestInput build() => _build();

  _$GRegisterRequestInput _build() {
    _$GRegisterRequestInput _$result;
    try {
      _$result = _$v ??
          new _$GRegisterRequestInput._(
              firstName: BuiltValueNullFieldError.checkNotNull(
                  firstName, r'GRegisterRequestInput', 'firstName'),
              lastName: BuiltValueNullFieldError.checkNotNull(
                  lastName, r'GRegisterRequestInput', 'lastName'),
              email: BuiltValueNullFieldError.checkNotNull(
                  email, r'GRegisterRequestInput', 'email'),
              nationalId: BuiltValueNullFieldError.checkNotNull(
                  nationalId, r'GRegisterRequestInput', 'nationalId'),
              userName: BuiltValueNullFieldError.checkNotNull(
                  userName, r'GRegisterRequestInput', 'userName'),
              password: BuiltValueNullFieldError.checkNotNull(
                  password, r'GRegisterRequestInput', 'password'),
              confirmPassword: BuiltValueNullFieldError.checkNotNull(
                  confirmPassword, r'GRegisterRequestInput', 'confirmPassword'),
              phoneNumber: BuiltValueNullFieldError.checkNotNull(
                  phoneNumber, r'GRegisterRequestInput', 'phoneNumber'),
              role: BuiltValueNullFieldError.checkNotNull(role, r'GRegisterRequestInput', 'role'),
              activateUser: BuiltValueNullFieldError.checkNotNull(activateUser, r'GRegisterRequestInput', 'activateUser'),
              autoConfirmEmail: BuiltValueNullFieldError.checkNotNull(autoConfirmEmail, r'GRegisterRequestInput', 'autoConfirmEmail'),
              createdBy: BuiltValueNullFieldError.checkNotNull(createdBy, r'GRegisterRequestInput', 'createdBy'),
              identificationDocument: _identificationDocument?.build(),
              totalRating: BuiltValueNullFieldError.checkNotNull(totalRating, r'GRegisterRequestInput', 'totalRating'),
              averageRating: BuiltValueNullFieldError.checkNotNull(averageRating, r'GRegisterRequestInput', 'averageRating'),
              referalCode: referalCode,
              locationDto: locationDto.build(),
              deviceDto: _deviceDto?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'identificationDocument';
        _identificationDocument?.build();

        _$failedField = 'locationDto';
        locationDto.build();
        _$failedField = 'deviceDto';
        _deviceDto?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GRegisterRequestInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GResetPasswordRequestInput extends GResetPasswordRequestInput {
  @override
  final String email;
  @override
  final String password;
  @override
  final String confirmPassword;
  @override
  final String token;

  factory _$GResetPasswordRequestInput(
          [void Function(GResetPasswordRequestInputBuilder)? updates]) =>
      (new GResetPasswordRequestInputBuilder()..update(updates))._build();

  _$GResetPasswordRequestInput._(
      {required this.email,
      required this.password,
      required this.confirmPassword,
      required this.token})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        email, r'GResetPasswordRequestInput', 'email');
    BuiltValueNullFieldError.checkNotNull(
        password, r'GResetPasswordRequestInput', 'password');
    BuiltValueNullFieldError.checkNotNull(
        confirmPassword, r'GResetPasswordRequestInput', 'confirmPassword');
    BuiltValueNullFieldError.checkNotNull(
        token, r'GResetPasswordRequestInput', 'token');
  }

  @override
  GResetPasswordRequestInput rebuild(
          void Function(GResetPasswordRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GResetPasswordRequestInputBuilder toBuilder() =>
      new GResetPasswordRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GResetPasswordRequestInput &&
        email == other.email &&
        password == other.password &&
        confirmPassword == other.confirmPassword &&
        token == other.token;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, email.hashCode);
    _$hash = $jc(_$hash, password.hashCode);
    _$hash = $jc(_$hash, confirmPassword.hashCode);
    _$hash = $jc(_$hash, token.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GResetPasswordRequestInput')
          ..add('email', email)
          ..add('password', password)
          ..add('confirmPassword', confirmPassword)
          ..add('token', token))
        .toString();
  }
}

class GResetPasswordRequestInputBuilder
    implements
        Builder<GResetPasswordRequestInput, GResetPasswordRequestInputBuilder> {
  _$GResetPasswordRequestInput? _$v;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  String? _password;
  String? get password => _$this._password;
  set password(String? password) => _$this._password = password;

  String? _confirmPassword;
  String? get confirmPassword => _$this._confirmPassword;
  set confirmPassword(String? confirmPassword) =>
      _$this._confirmPassword = confirmPassword;

  String? _token;
  String? get token => _$this._token;
  set token(String? token) => _$this._token = token;

  GResetPasswordRequestInputBuilder();

  GResetPasswordRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _email = $v.email;
      _password = $v.password;
      _confirmPassword = $v.confirmPassword;
      _token = $v.token;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GResetPasswordRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GResetPasswordRequestInput;
  }

  @override
  void update(void Function(GResetPasswordRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GResetPasswordRequestInput build() => _build();

  _$GResetPasswordRequestInput _build() {
    final _$result = _$v ??
        new _$GResetPasswordRequestInput._(
            email: BuiltValueNullFieldError.checkNotNull(
                email, r'GResetPasswordRequestInput', 'email'),
            password: BuiltValueNullFieldError.checkNotNull(
                password, r'GResetPasswordRequestInput', 'password'),
            confirmPassword: BuiltValueNullFieldError.checkNotNull(
                confirmPassword,
                r'GResetPasswordRequestInput',
                'confirmPassword'),
            token: BuiltValueNullFieldError.checkNotNull(
                token, r'GResetPasswordRequestInput', 'token'));
    replace(_$result);
    return _$result;
  }
}

class _$GForgotPasswordRequestInput extends GForgotPasswordRequestInput {
  @override
  final String email;

  factory _$GForgotPasswordRequestInput(
          [void Function(GForgotPasswordRequestInputBuilder)? updates]) =>
      (new GForgotPasswordRequestInputBuilder()..update(updates))._build();

  _$GForgotPasswordRequestInput._({required this.email}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        email, r'GForgotPasswordRequestInput', 'email');
  }

  @override
  GForgotPasswordRequestInput rebuild(
          void Function(GForgotPasswordRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GForgotPasswordRequestInputBuilder toBuilder() =>
      new GForgotPasswordRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GForgotPasswordRequestInput && email == other.email;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, email.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GForgotPasswordRequestInput')
          ..add('email', email))
        .toString();
  }
}

class GForgotPasswordRequestInputBuilder
    implements
        Builder<GForgotPasswordRequestInput,
            GForgotPasswordRequestInputBuilder> {
  _$GForgotPasswordRequestInput? _$v;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  GForgotPasswordRequestInputBuilder();

  GForgotPasswordRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _email = $v.email;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GForgotPasswordRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GForgotPasswordRequestInput;
  }

  @override
  void update(void Function(GForgotPasswordRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GForgotPasswordRequestInput build() => _build();

  _$GForgotPasswordRequestInput _build() {
    final _$result = _$v ??
        new _$GForgotPasswordRequestInput._(
            email: BuiltValueNullFieldError.checkNotNull(
                email, r'GForgotPasswordRequestInput', 'email'));
    replace(_$result);
    return _$result;
  }
}

class _$GUpdateUserRolesRequestInput extends GUpdateUserRolesRequestInput {
  @override
  final String userId;
  @override
  final BuiltList<GUserRoleModelInput> userRoles;

  factory _$GUpdateUserRolesRequestInput(
          [void Function(GUpdateUserRolesRequestInputBuilder)? updates]) =>
      (new GUpdateUserRolesRequestInputBuilder()..update(updates))._build();

  _$GUpdateUserRolesRequestInput._(
      {required this.userId, required this.userRoles})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        userId, r'GUpdateUserRolesRequestInput', 'userId');
    BuiltValueNullFieldError.checkNotNull(
        userRoles, r'GUpdateUserRolesRequestInput', 'userRoles');
  }

  @override
  GUpdateUserRolesRequestInput rebuild(
          void Function(GUpdateUserRolesRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUpdateUserRolesRequestInputBuilder toBuilder() =>
      new GUpdateUserRolesRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUpdateUserRolesRequestInput &&
        userId == other.userId &&
        userRoles == other.userRoles;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, userId.hashCode);
    _$hash = $jc(_$hash, userRoles.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUpdateUserRolesRequestInput')
          ..add('userId', userId)
          ..add('userRoles', userRoles))
        .toString();
  }
}

class GUpdateUserRolesRequestInputBuilder
    implements
        Builder<GUpdateUserRolesRequestInput,
            GUpdateUserRolesRequestInputBuilder> {
  _$GUpdateUserRolesRequestInput? _$v;

  String? _userId;
  String? get userId => _$this._userId;
  set userId(String? userId) => _$this._userId = userId;

  ListBuilder<GUserRoleModelInput>? _userRoles;
  ListBuilder<GUserRoleModelInput> get userRoles =>
      _$this._userRoles ??= new ListBuilder<GUserRoleModelInput>();
  set userRoles(ListBuilder<GUserRoleModelInput>? userRoles) =>
      _$this._userRoles = userRoles;

  GUpdateUserRolesRequestInputBuilder();

  GUpdateUserRolesRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _userId = $v.userId;
      _userRoles = $v.userRoles.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUpdateUserRolesRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUpdateUserRolesRequestInput;
  }

  @override
  void update(void Function(GUpdateUserRolesRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUpdateUserRolesRequestInput build() => _build();

  _$GUpdateUserRolesRequestInput _build() {
    _$GUpdateUserRolesRequestInput _$result;
    try {
      _$result = _$v ??
          new _$GUpdateUserRolesRequestInput._(
              userId: BuiltValueNullFieldError.checkNotNull(
                  userId, r'GUpdateUserRolesRequestInput', 'userId'),
              userRoles: userRoles.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'userRoles';
        userRoles.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUpdateUserRolesRequestInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GRoleClaimRequestInput extends GRoleClaimRequestInput {
  @override
  final int id;
  @override
  final String roleId;
  @override
  final String type;
  @override
  final String value;
  @override
  final String description;
  @override
  final String group;
  @override
  final bool selected;

  factory _$GRoleClaimRequestInput(
          [void Function(GRoleClaimRequestInputBuilder)? updates]) =>
      (new GRoleClaimRequestInputBuilder()..update(updates))._build();

  _$GRoleClaimRequestInput._(
      {required this.id,
      required this.roleId,
      required this.type,
      required this.value,
      required this.description,
      required this.group,
      required this.selected})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(id, r'GRoleClaimRequestInput', 'id');
    BuiltValueNullFieldError.checkNotNull(
        roleId, r'GRoleClaimRequestInput', 'roleId');
    BuiltValueNullFieldError.checkNotNull(
        type, r'GRoleClaimRequestInput', 'type');
    BuiltValueNullFieldError.checkNotNull(
        value, r'GRoleClaimRequestInput', 'value');
    BuiltValueNullFieldError.checkNotNull(
        description, r'GRoleClaimRequestInput', 'description');
    BuiltValueNullFieldError.checkNotNull(
        group, r'GRoleClaimRequestInput', 'group');
    BuiltValueNullFieldError.checkNotNull(
        selected, r'GRoleClaimRequestInput', 'selected');
  }

  @override
  GRoleClaimRequestInput rebuild(
          void Function(GRoleClaimRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GRoleClaimRequestInputBuilder toBuilder() =>
      new GRoleClaimRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GRoleClaimRequestInput &&
        id == other.id &&
        roleId == other.roleId &&
        type == other.type &&
        value == other.value &&
        description == other.description &&
        group == other.group &&
        selected == other.selected;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, roleId.hashCode);
    _$hash = $jc(_$hash, type.hashCode);
    _$hash = $jc(_$hash, value.hashCode);
    _$hash = $jc(_$hash, description.hashCode);
    _$hash = $jc(_$hash, group.hashCode);
    _$hash = $jc(_$hash, selected.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GRoleClaimRequestInput')
          ..add('id', id)
          ..add('roleId', roleId)
          ..add('type', type)
          ..add('value', value)
          ..add('description', description)
          ..add('group', group)
          ..add('selected', selected))
        .toString();
  }
}

class GRoleClaimRequestInputBuilder
    implements Builder<GRoleClaimRequestInput, GRoleClaimRequestInputBuilder> {
  _$GRoleClaimRequestInput? _$v;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _roleId;
  String? get roleId => _$this._roleId;
  set roleId(String? roleId) => _$this._roleId = roleId;

  String? _type;
  String? get type => _$this._type;
  set type(String? type) => _$this._type = type;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  String? _description;
  String? get description => _$this._description;
  set description(String? description) => _$this._description = description;

  String? _group;
  String? get group => _$this._group;
  set group(String? group) => _$this._group = group;

  bool? _selected;
  bool? get selected => _$this._selected;
  set selected(bool? selected) => _$this._selected = selected;

  GRoleClaimRequestInputBuilder();

  GRoleClaimRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _roleId = $v.roleId;
      _type = $v.type;
      _value = $v.value;
      _description = $v.description;
      _group = $v.group;
      _selected = $v.selected;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GRoleClaimRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GRoleClaimRequestInput;
  }

  @override
  void update(void Function(GRoleClaimRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GRoleClaimRequestInput build() => _build();

  _$GRoleClaimRequestInput _build() {
    final _$result = _$v ??
        new _$GRoleClaimRequestInput._(
            id: BuiltValueNullFieldError.checkNotNull(
                id, r'GRoleClaimRequestInput', 'id'),
            roleId: BuiltValueNullFieldError.checkNotNull(
                roleId, r'GRoleClaimRequestInput', 'roleId'),
            type: BuiltValueNullFieldError.checkNotNull(
                type, r'GRoleClaimRequestInput', 'type'),
            value: BuiltValueNullFieldError.checkNotNull(
                value, r'GRoleClaimRequestInput', 'value'),
            description: BuiltValueNullFieldError.checkNotNull(
                description, r'GRoleClaimRequestInput', 'description'),
            group: BuiltValueNullFieldError.checkNotNull(
                group, r'GRoleClaimRequestInput', 'group'),
            selected: BuiltValueNullFieldError.checkNotNull(
                selected, r'GRoleClaimRequestInput', 'selected'));
    replace(_$result);
    return _$result;
  }
}

class _$GPermissionRequestInput extends GPermissionRequestInput {
  @override
  final String roleId;
  @override
  final BuiltList<GRoleClaimRequestInput> roleClaims;

  factory _$GPermissionRequestInput(
          [void Function(GPermissionRequestInputBuilder)? updates]) =>
      (new GPermissionRequestInputBuilder()..update(updates))._build();

  _$GPermissionRequestInput._({required this.roleId, required this.roleClaims})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        roleId, r'GPermissionRequestInput', 'roleId');
    BuiltValueNullFieldError.checkNotNull(
        roleClaims, r'GPermissionRequestInput', 'roleClaims');
  }

  @override
  GPermissionRequestInput rebuild(
          void Function(GPermissionRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GPermissionRequestInputBuilder toBuilder() =>
      new GPermissionRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GPermissionRequestInput &&
        roleId == other.roleId &&
        roleClaims == other.roleClaims;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, roleId.hashCode);
    _$hash = $jc(_$hash, roleClaims.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GPermissionRequestInput')
          ..add('roleId', roleId)
          ..add('roleClaims', roleClaims))
        .toString();
  }
}

class GPermissionRequestInputBuilder
    implements
        Builder<GPermissionRequestInput, GPermissionRequestInputBuilder> {
  _$GPermissionRequestInput? _$v;

  String? _roleId;
  String? get roleId => _$this._roleId;
  set roleId(String? roleId) => _$this._roleId = roleId;

  ListBuilder<GRoleClaimRequestInput>? _roleClaims;
  ListBuilder<GRoleClaimRequestInput> get roleClaims =>
      _$this._roleClaims ??= new ListBuilder<GRoleClaimRequestInput>();
  set roleClaims(ListBuilder<GRoleClaimRequestInput>? roleClaims) =>
      _$this._roleClaims = roleClaims;

  GPermissionRequestInputBuilder();

  GPermissionRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _roleId = $v.roleId;
      _roleClaims = $v.roleClaims.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GPermissionRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GPermissionRequestInput;
  }

  @override
  void update(void Function(GPermissionRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GPermissionRequestInput build() => _build();

  _$GPermissionRequestInput _build() {
    _$GPermissionRequestInput _$result;
    try {
      _$result = _$v ??
          new _$GPermissionRequestInput._(
              roleId: BuiltValueNullFieldError.checkNotNull(
                  roleId, r'GPermissionRequestInput', 'roleId'),
              roleClaims: roleClaims.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'roleClaims';
        roleClaims.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GPermissionRequestInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GRoleRequestInput extends GRoleRequestInput {
  @override
  final String id;
  @override
  final String name;
  @override
  final String description;

  factory _$GRoleRequestInput(
          [void Function(GRoleRequestInputBuilder)? updates]) =>
      (new GRoleRequestInputBuilder()..update(updates))._build();

  _$GRoleRequestInput._(
      {required this.id, required this.name, required this.description})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(id, r'GRoleRequestInput', 'id');
    BuiltValueNullFieldError.checkNotNull(name, r'GRoleRequestInput', 'name');
    BuiltValueNullFieldError.checkNotNull(
        description, r'GRoleRequestInput', 'description');
  }

  @override
  GRoleRequestInput rebuild(void Function(GRoleRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GRoleRequestInputBuilder toBuilder() =>
      new GRoleRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GRoleRequestInput &&
        id == other.id &&
        name == other.name &&
        description == other.description;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, name.hashCode);
    _$hash = $jc(_$hash, description.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GRoleRequestInput')
          ..add('id', id)
          ..add('name', name)
          ..add('description', description))
        .toString();
  }
}

class GRoleRequestInputBuilder
    implements Builder<GRoleRequestInput, GRoleRequestInputBuilder> {
  _$GRoleRequestInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  String? _description;
  String? get description => _$this._description;
  set description(String? description) => _$this._description = description;

  GRoleRequestInputBuilder();

  GRoleRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _name = $v.name;
      _description = $v.description;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GRoleRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GRoleRequestInput;
  }

  @override
  void update(void Function(GRoleRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GRoleRequestInput build() => _build();

  _$GRoleRequestInput _build() {
    final _$result = _$v ??
        new _$GRoleRequestInput._(
            id: BuiltValueNullFieldError.checkNotNull(
                id, r'GRoleRequestInput', 'id'),
            name: BuiltValueNullFieldError.checkNotNull(
                name, r'GRoleRequestInput', 'name'),
            description: BuiltValueNullFieldError.checkNotNull(
                description, r'GRoleRequestInput', 'description'));
    replace(_$result);
    return _$result;
  }
}

class _$GFrequentRouteInput extends GFrequentRouteInput {
  @override
  final String origin;
  @override
  final String destination;
  @override
  final String image;
  @override
  final GColorCustomInput color;
  @override
  final String userId;
  @override
  final GDateTime? createdDate;
  @override
  final int id;

  factory _$GFrequentRouteInput(
          [void Function(GFrequentRouteInputBuilder)? updates]) =>
      (new GFrequentRouteInputBuilder()..update(updates))._build();

  _$GFrequentRouteInput._(
      {required this.origin,
      required this.destination,
      required this.image,
      required this.color,
      required this.userId,
      this.createdDate,
      required this.id})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        origin, r'GFrequentRouteInput', 'origin');
    BuiltValueNullFieldError.checkNotNull(
        destination, r'GFrequentRouteInput', 'destination');
    BuiltValueNullFieldError.checkNotNull(
        image, r'GFrequentRouteInput', 'image');
    BuiltValueNullFieldError.checkNotNull(
        color, r'GFrequentRouteInput', 'color');
    BuiltValueNullFieldError.checkNotNull(
        userId, r'GFrequentRouteInput', 'userId');
    BuiltValueNullFieldError.checkNotNull(id, r'GFrequentRouteInput', 'id');
  }

  @override
  GFrequentRouteInput rebuild(
          void Function(GFrequentRouteInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFrequentRouteInputBuilder toBuilder() =>
      new GFrequentRouteInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFrequentRouteInput &&
        origin == other.origin &&
        destination == other.destination &&
        image == other.image &&
        color == other.color &&
        userId == other.userId &&
        createdDate == other.createdDate &&
        id == other.id;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, origin.hashCode);
    _$hash = $jc(_$hash, destination.hashCode);
    _$hash = $jc(_$hash, image.hashCode);
    _$hash = $jc(_$hash, color.hashCode);
    _$hash = $jc(_$hash, userId.hashCode);
    _$hash = $jc(_$hash, createdDate.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GFrequentRouteInput')
          ..add('origin', origin)
          ..add('destination', destination)
          ..add('image', image)
          ..add('color', color)
          ..add('userId', userId)
          ..add('createdDate', createdDate)
          ..add('id', id))
        .toString();
  }
}

class GFrequentRouteInputBuilder
    implements Builder<GFrequentRouteInput, GFrequentRouteInputBuilder> {
  _$GFrequentRouteInput? _$v;

  String? _origin;
  String? get origin => _$this._origin;
  set origin(String? origin) => _$this._origin = origin;

  String? _destination;
  String? get destination => _$this._destination;
  set destination(String? destination) => _$this._destination = destination;

  String? _image;
  String? get image => _$this._image;
  set image(String? image) => _$this._image = image;

  GColorCustomInputBuilder? _color;
  GColorCustomInputBuilder get color =>
      _$this._color ??= new GColorCustomInputBuilder();
  set color(GColorCustomInputBuilder? color) => _$this._color = color;

  String? _userId;
  String? get userId => _$this._userId;
  set userId(String? userId) => _$this._userId = userId;

  GDateTimeBuilder? _createdDate;
  GDateTimeBuilder get createdDate =>
      _$this._createdDate ??= new GDateTimeBuilder();
  set createdDate(GDateTimeBuilder? createdDate) =>
      _$this._createdDate = createdDate;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  GFrequentRouteInputBuilder();

  GFrequentRouteInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _origin = $v.origin;
      _destination = $v.destination;
      _image = $v.image;
      _color = $v.color.toBuilder();
      _userId = $v.userId;
      _createdDate = $v.createdDate?.toBuilder();
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFrequentRouteInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFrequentRouteInput;
  }

  @override
  void update(void Function(GFrequentRouteInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GFrequentRouteInput build() => _build();

  _$GFrequentRouteInput _build() {
    _$GFrequentRouteInput _$result;
    try {
      _$result = _$v ??
          new _$GFrequentRouteInput._(
              origin: BuiltValueNullFieldError.checkNotNull(
                  origin, r'GFrequentRouteInput', 'origin'),
              destination: BuiltValueNullFieldError.checkNotNull(
                  destination, r'GFrequentRouteInput', 'destination'),
              image: BuiltValueNullFieldError.checkNotNull(
                  image, r'GFrequentRouteInput', 'image'),
              color: color.build(),
              userId: BuiltValueNullFieldError.checkNotNull(
                  userId, r'GFrequentRouteInput', 'userId'),
              createdDate: _createdDate?.build(),
              id: BuiltValueNullFieldError.checkNotNull(
                  id, r'GFrequentRouteInput', 'id'));
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'color';
        color.build();

        _$failedField = 'createdDate';
        _createdDate?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GFrequentRouteInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GResfreshTokenRequestInput extends GResfreshTokenRequestInput {
  @override
  final String token;
  @override
  final String refreshToken;

  factory _$GResfreshTokenRequestInput(
          [void Function(GResfreshTokenRequestInputBuilder)? updates]) =>
      (new GResfreshTokenRequestInputBuilder()..update(updates))._build();

  _$GResfreshTokenRequestInput._(
      {required this.token, required this.refreshToken})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        token, r'GResfreshTokenRequestInput', 'token');
    BuiltValueNullFieldError.checkNotNull(
        refreshToken, r'GResfreshTokenRequestInput', 'refreshToken');
  }

  @override
  GResfreshTokenRequestInput rebuild(
          void Function(GResfreshTokenRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GResfreshTokenRequestInputBuilder toBuilder() =>
      new GResfreshTokenRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GResfreshTokenRequestInput &&
        token == other.token &&
        refreshToken == other.refreshToken;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, token.hashCode);
    _$hash = $jc(_$hash, refreshToken.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GResfreshTokenRequestInput')
          ..add('token', token)
          ..add('refreshToken', refreshToken))
        .toString();
  }
}

class GResfreshTokenRequestInputBuilder
    implements
        Builder<GResfreshTokenRequestInput, GResfreshTokenRequestInputBuilder> {
  _$GResfreshTokenRequestInput? _$v;

  String? _token;
  String? get token => _$this._token;
  set token(String? token) => _$this._token = token;

  String? _refreshToken;
  String? get refreshToken => _$this._refreshToken;
  set refreshToken(String? refreshToken) => _$this._refreshToken = refreshToken;

  GResfreshTokenRequestInputBuilder();

  GResfreshTokenRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _token = $v.token;
      _refreshToken = $v.refreshToken;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GResfreshTokenRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GResfreshTokenRequestInput;
  }

  @override
  void update(void Function(GResfreshTokenRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GResfreshTokenRequestInput build() => _build();

  _$GResfreshTokenRequestInput _build() {
    final _$result = _$v ??
        new _$GResfreshTokenRequestInput._(
            token: BuiltValueNullFieldError.checkNotNull(
                token, r'GResfreshTokenRequestInput', 'token'),
            refreshToken: BuiltValueNullFieldError.checkNotNull(
                refreshToken, r'GResfreshTokenRequestInput', 'refreshToken'));
    replace(_$result);
    return _$result;
  }
}

class _$GTokenRequestInput extends GTokenRequestInput {
  @override
  final String email;
  @override
  final String password;

  factory _$GTokenRequestInput(
          [void Function(GTokenRequestInputBuilder)? updates]) =>
      (new GTokenRequestInputBuilder()..update(updates))._build();

  _$GTokenRequestInput._({required this.email, required this.password})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        email, r'GTokenRequestInput', 'email');
    BuiltValueNullFieldError.checkNotNull(
        password, r'GTokenRequestInput', 'password');
  }

  @override
  GTokenRequestInput rebuild(
          void Function(GTokenRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GTokenRequestInputBuilder toBuilder() =>
      new GTokenRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GTokenRequestInput &&
        email == other.email &&
        password == other.password;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, email.hashCode);
    _$hash = $jc(_$hash, password.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GTokenRequestInput')
          ..add('email', email)
          ..add('password', password))
        .toString();
  }
}

class GTokenRequestInputBuilder
    implements Builder<GTokenRequestInput, GTokenRequestInputBuilder> {
  _$GTokenRequestInput? _$v;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  String? _password;
  String? get password => _$this._password;
  set password(String? password) => _$this._password = password;

  GTokenRequestInputBuilder();

  GTokenRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _email = $v.email;
      _password = $v.password;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GTokenRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GTokenRequestInput;
  }

  @override
  void update(void Function(GTokenRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GTokenRequestInput build() => _build();

  _$GTokenRequestInput _build() {
    final _$result = _$v ??
        new _$GTokenRequestInput._(
            email: BuiltValueNullFieldError.checkNotNull(
                email, r'GTokenRequestInput', 'email'),
            password: BuiltValueNullFieldError.checkNotNull(
                password, r'GTokenRequestInput', 'password'));
    replace(_$result);
    return _$result;
  }
}

class _$GUpdateProfileRequestInput extends GUpdateProfileRequestInput {
  @override
  final String? phoneNumber;
  @override
  final String firstName;
  @override
  final String lastName;
  @override
  final String email;
  @override
  final String identificationDocumentUrl;

  factory _$GUpdateProfileRequestInput(
          [void Function(GUpdateProfileRequestInputBuilder)? updates]) =>
      (new GUpdateProfileRequestInputBuilder()..update(updates))._build();

  _$GUpdateProfileRequestInput._(
      {this.phoneNumber,
      required this.firstName,
      required this.lastName,
      required this.email,
      required this.identificationDocumentUrl})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        firstName, r'GUpdateProfileRequestInput', 'firstName');
    BuiltValueNullFieldError.checkNotNull(
        lastName, r'GUpdateProfileRequestInput', 'lastName');
    BuiltValueNullFieldError.checkNotNull(
        email, r'GUpdateProfileRequestInput', 'email');
    BuiltValueNullFieldError.checkNotNull(identificationDocumentUrl,
        r'GUpdateProfileRequestInput', 'identificationDocumentUrl');
  }

  @override
  GUpdateProfileRequestInput rebuild(
          void Function(GUpdateProfileRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUpdateProfileRequestInputBuilder toBuilder() =>
      new GUpdateProfileRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUpdateProfileRequestInput &&
        phoneNumber == other.phoneNumber &&
        firstName == other.firstName &&
        lastName == other.lastName &&
        email == other.email &&
        identificationDocumentUrl == other.identificationDocumentUrl;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, phoneNumber.hashCode);
    _$hash = $jc(_$hash, firstName.hashCode);
    _$hash = $jc(_$hash, lastName.hashCode);
    _$hash = $jc(_$hash, email.hashCode);
    _$hash = $jc(_$hash, identificationDocumentUrl.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUpdateProfileRequestInput')
          ..add('phoneNumber', phoneNumber)
          ..add('firstName', firstName)
          ..add('lastName', lastName)
          ..add('email', email)
          ..add('identificationDocumentUrl', identificationDocumentUrl))
        .toString();
  }
}

class GUpdateProfileRequestInputBuilder
    implements
        Builder<GUpdateProfileRequestInput, GUpdateProfileRequestInputBuilder> {
  _$GUpdateProfileRequestInput? _$v;

  String? _phoneNumber;
  String? get phoneNumber => _$this._phoneNumber;
  set phoneNumber(String? phoneNumber) => _$this._phoneNumber = phoneNumber;

  String? _firstName;
  String? get firstName => _$this._firstName;
  set firstName(String? firstName) => _$this._firstName = firstName;

  String? _lastName;
  String? get lastName => _$this._lastName;
  set lastName(String? lastName) => _$this._lastName = lastName;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  String? _identificationDocumentUrl;
  String? get identificationDocumentUrl => _$this._identificationDocumentUrl;
  set identificationDocumentUrl(String? identificationDocumentUrl) =>
      _$this._identificationDocumentUrl = identificationDocumentUrl;

  GUpdateProfileRequestInputBuilder();

  GUpdateProfileRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _phoneNumber = $v.phoneNumber;
      _firstName = $v.firstName;
      _lastName = $v.lastName;
      _email = $v.email;
      _identificationDocumentUrl = $v.identificationDocumentUrl;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUpdateProfileRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUpdateProfileRequestInput;
  }

  @override
  void update(void Function(GUpdateProfileRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUpdateProfileRequestInput build() => _build();

  _$GUpdateProfileRequestInput _build() {
    final _$result = _$v ??
        new _$GUpdateProfileRequestInput._(
            phoneNumber: phoneNumber,
            firstName: BuiltValueNullFieldError.checkNotNull(
                firstName, r'GUpdateProfileRequestInput', 'firstName'),
            lastName: BuiltValueNullFieldError.checkNotNull(
                lastName, r'GUpdateProfileRequestInput', 'lastName'),
            email: BuiltValueNullFieldError.checkNotNull(
                email, r'GUpdateProfileRequestInput', 'email'),
            identificationDocumentUrl: BuiltValueNullFieldError.checkNotNull(
                identificationDocumentUrl,
                r'GUpdateProfileRequestInput',
                'identificationDocumentUrl'));
    replace(_$result);
    return _$result;
  }
}

class _$GPasswordResetRequestByPhoneInput
    extends GPasswordResetRequestByPhoneInput {
  @override
  final String password;
  @override
  final String confirmPassword;
  @override
  final String phoneNumber;

  factory _$GPasswordResetRequestByPhoneInput(
          [void Function(GPasswordResetRequestByPhoneInputBuilder)? updates]) =>
      (new GPasswordResetRequestByPhoneInputBuilder()..update(updates))
          ._build();

  _$GPasswordResetRequestByPhoneInput._(
      {required this.password,
      required this.confirmPassword,
      required this.phoneNumber})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        password, r'GPasswordResetRequestByPhoneInput', 'password');
    BuiltValueNullFieldError.checkNotNull(confirmPassword,
        r'GPasswordResetRequestByPhoneInput', 'confirmPassword');
    BuiltValueNullFieldError.checkNotNull(
        phoneNumber, r'GPasswordResetRequestByPhoneInput', 'phoneNumber');
  }

  @override
  GPasswordResetRequestByPhoneInput rebuild(
          void Function(GPasswordResetRequestByPhoneInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GPasswordResetRequestByPhoneInputBuilder toBuilder() =>
      new GPasswordResetRequestByPhoneInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GPasswordResetRequestByPhoneInput &&
        password == other.password &&
        confirmPassword == other.confirmPassword &&
        phoneNumber == other.phoneNumber;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, password.hashCode);
    _$hash = $jc(_$hash, confirmPassword.hashCode);
    _$hash = $jc(_$hash, phoneNumber.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GPasswordResetRequestByPhoneInput')
          ..add('password', password)
          ..add('confirmPassword', confirmPassword)
          ..add('phoneNumber', phoneNumber))
        .toString();
  }
}

class GPasswordResetRequestByPhoneInputBuilder
    implements
        Builder<GPasswordResetRequestByPhoneInput,
            GPasswordResetRequestByPhoneInputBuilder> {
  _$GPasswordResetRequestByPhoneInput? _$v;

  String? _password;
  String? get password => _$this._password;
  set password(String? password) => _$this._password = password;

  String? _confirmPassword;
  String? get confirmPassword => _$this._confirmPassword;
  set confirmPassword(String? confirmPassword) =>
      _$this._confirmPassword = confirmPassword;

  String? _phoneNumber;
  String? get phoneNumber => _$this._phoneNumber;
  set phoneNumber(String? phoneNumber) => _$this._phoneNumber = phoneNumber;

  GPasswordResetRequestByPhoneInputBuilder();

  GPasswordResetRequestByPhoneInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _password = $v.password;
      _confirmPassword = $v.confirmPassword;
      _phoneNumber = $v.phoneNumber;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GPasswordResetRequestByPhoneInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GPasswordResetRequestByPhoneInput;
  }

  @override
  void update(
      void Function(GPasswordResetRequestByPhoneInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GPasswordResetRequestByPhoneInput build() => _build();

  _$GPasswordResetRequestByPhoneInput _build() {
    final _$result = _$v ??
        new _$GPasswordResetRequestByPhoneInput._(
            password: BuiltValueNullFieldError.checkNotNull(
                password, r'GPasswordResetRequestByPhoneInput', 'password'),
            confirmPassword: BuiltValueNullFieldError.checkNotNull(
                confirmPassword,
                r'GPasswordResetRequestByPhoneInput',
                'confirmPassword'),
            phoneNumber: BuiltValueNullFieldError.checkNotNull(phoneNumber,
                r'GPasswordResetRequestByPhoneInput', 'phoneNumber'));
    replace(_$result);
    return _$result;
  }
}

class _$GChangePasswordRequestInput extends GChangePasswordRequestInput {
  @override
  final String password;
  @override
  final String newPassword;
  @override
  final String phoneNumber;

  factory _$GChangePasswordRequestInput(
          [void Function(GChangePasswordRequestInputBuilder)? updates]) =>
      (new GChangePasswordRequestInputBuilder()..update(updates))._build();

  _$GChangePasswordRequestInput._(
      {required this.password,
      required this.newPassword,
      required this.phoneNumber})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        password, r'GChangePasswordRequestInput', 'password');
    BuiltValueNullFieldError.checkNotNull(
        newPassword, r'GChangePasswordRequestInput', 'newPassword');
    BuiltValueNullFieldError.checkNotNull(
        phoneNumber, r'GChangePasswordRequestInput', 'phoneNumber');
  }

  @override
  GChangePasswordRequestInput rebuild(
          void Function(GChangePasswordRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GChangePasswordRequestInputBuilder toBuilder() =>
      new GChangePasswordRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GChangePasswordRequestInput &&
        password == other.password &&
        newPassword == other.newPassword &&
        phoneNumber == other.phoneNumber;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, password.hashCode);
    _$hash = $jc(_$hash, newPassword.hashCode);
    _$hash = $jc(_$hash, phoneNumber.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GChangePasswordRequestInput')
          ..add('password', password)
          ..add('newPassword', newPassword)
          ..add('phoneNumber', phoneNumber))
        .toString();
  }
}

class GChangePasswordRequestInputBuilder
    implements
        Builder<GChangePasswordRequestInput,
            GChangePasswordRequestInputBuilder> {
  _$GChangePasswordRequestInput? _$v;

  String? _password;
  String? get password => _$this._password;
  set password(String? password) => _$this._password = password;

  String? _newPassword;
  String? get newPassword => _$this._newPassword;
  set newPassword(String? newPassword) => _$this._newPassword = newPassword;

  String? _phoneNumber;
  String? get phoneNumber => _$this._phoneNumber;
  set phoneNumber(String? phoneNumber) => _$this._phoneNumber = phoneNumber;

  GChangePasswordRequestInputBuilder();

  GChangePasswordRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _password = $v.password;
      _newPassword = $v.newPassword;
      _phoneNumber = $v.phoneNumber;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GChangePasswordRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GChangePasswordRequestInput;
  }

  @override
  void update(void Function(GChangePasswordRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GChangePasswordRequestInput build() => _build();

  _$GChangePasswordRequestInput _build() {
    final _$result = _$v ??
        new _$GChangePasswordRequestInput._(
            password: BuiltValueNullFieldError.checkNotNull(
                password, r'GChangePasswordRequestInput', 'password'),
            newPassword: BuiltValueNullFieldError.checkNotNull(
                newPassword, r'GChangePasswordRequestInput', 'newPassword'),
            phoneNumber: BuiltValueNullFieldError.checkNotNull(
                phoneNumber, r'GChangePasswordRequestInput', 'phoneNumber'));
    replace(_$result);
    return _$result;
  }
}

class _$GTransactRequestInput extends GTransactRequestInput {
  @override
  final String phoneNumber;
  @override
  final String amount;
  @override
  final String callBackUrl;

  factory _$GTransactRequestInput(
          [void Function(GTransactRequestInputBuilder)? updates]) =>
      (new GTransactRequestInputBuilder()..update(updates))._build();

  _$GTransactRequestInput._(
      {required this.phoneNumber,
      required this.amount,
      required this.callBackUrl})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        phoneNumber, r'GTransactRequestInput', 'phoneNumber');
    BuiltValueNullFieldError.checkNotNull(
        amount, r'GTransactRequestInput', 'amount');
    BuiltValueNullFieldError.checkNotNull(
        callBackUrl, r'GTransactRequestInput', 'callBackUrl');
  }

  @override
  GTransactRequestInput rebuild(
          void Function(GTransactRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GTransactRequestInputBuilder toBuilder() =>
      new GTransactRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GTransactRequestInput &&
        phoneNumber == other.phoneNumber &&
        amount == other.amount &&
        callBackUrl == other.callBackUrl;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, phoneNumber.hashCode);
    _$hash = $jc(_$hash, amount.hashCode);
    _$hash = $jc(_$hash, callBackUrl.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GTransactRequestInput')
          ..add('phoneNumber', phoneNumber)
          ..add('amount', amount)
          ..add('callBackUrl', callBackUrl))
        .toString();
  }
}

class GTransactRequestInputBuilder
    implements Builder<GTransactRequestInput, GTransactRequestInputBuilder> {
  _$GTransactRequestInput? _$v;

  String? _phoneNumber;
  String? get phoneNumber => _$this._phoneNumber;
  set phoneNumber(String? phoneNumber) => _$this._phoneNumber = phoneNumber;

  String? _amount;
  String? get amount => _$this._amount;
  set amount(String? amount) => _$this._amount = amount;

  String? _callBackUrl;
  String? get callBackUrl => _$this._callBackUrl;
  set callBackUrl(String? callBackUrl) => _$this._callBackUrl = callBackUrl;

  GTransactRequestInputBuilder();

  GTransactRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _phoneNumber = $v.phoneNumber;
      _amount = $v.amount;
      _callBackUrl = $v.callBackUrl;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GTransactRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GTransactRequestInput;
  }

  @override
  void update(void Function(GTransactRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GTransactRequestInput build() => _build();

  _$GTransactRequestInput _build() {
    final _$result = _$v ??
        new _$GTransactRequestInput._(
            phoneNumber: BuiltValueNullFieldError.checkNotNull(
                phoneNumber, r'GTransactRequestInput', 'phoneNumber'),
            amount: BuiltValueNullFieldError.checkNotNull(
                amount, r'GTransactRequestInput', 'amount'),
            callBackUrl: BuiltValueNullFieldError.checkNotNull(
                callBackUrl, r'GTransactRequestInput', 'callBackUrl'));
    replace(_$result);
    return _$result;
  }
}

class _$GTransactB2CRequestInput extends GTransactB2CRequestInput {
  @override
  final String phoneNumber;
  @override
  final String amount;
  @override
  final String callBackUrl;
  @override
  final String occassion;
  @override
  final String remarks;
  @override
  final String queueTimeOutURL;
  @override
  final int rideId;
  @override
  final String? userId;

  factory _$GTransactB2CRequestInput(
          [void Function(GTransactB2CRequestInputBuilder)? updates]) =>
      (new GTransactB2CRequestInputBuilder()..update(updates))._build();

  _$GTransactB2CRequestInput._(
      {required this.phoneNumber,
      required this.amount,
      required this.callBackUrl,
      required this.occassion,
      required this.remarks,
      required this.queueTimeOutURL,
      required this.rideId,
      this.userId})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        phoneNumber, r'GTransactB2CRequestInput', 'phoneNumber');
    BuiltValueNullFieldError.checkNotNull(
        amount, r'GTransactB2CRequestInput', 'amount');
    BuiltValueNullFieldError.checkNotNull(
        callBackUrl, r'GTransactB2CRequestInput', 'callBackUrl');
    BuiltValueNullFieldError.checkNotNull(
        occassion, r'GTransactB2CRequestInput', 'occassion');
    BuiltValueNullFieldError.checkNotNull(
        remarks, r'GTransactB2CRequestInput', 'remarks');
    BuiltValueNullFieldError.checkNotNull(
        queueTimeOutURL, r'GTransactB2CRequestInput', 'queueTimeOutURL');
    BuiltValueNullFieldError.checkNotNull(
        rideId, r'GTransactB2CRequestInput', 'rideId');
  }

  @override
  GTransactB2CRequestInput rebuild(
          void Function(GTransactB2CRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GTransactB2CRequestInputBuilder toBuilder() =>
      new GTransactB2CRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GTransactB2CRequestInput &&
        phoneNumber == other.phoneNumber &&
        amount == other.amount &&
        callBackUrl == other.callBackUrl &&
        occassion == other.occassion &&
        remarks == other.remarks &&
        queueTimeOutURL == other.queueTimeOutURL &&
        rideId == other.rideId &&
        userId == other.userId;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, phoneNumber.hashCode);
    _$hash = $jc(_$hash, amount.hashCode);
    _$hash = $jc(_$hash, callBackUrl.hashCode);
    _$hash = $jc(_$hash, occassion.hashCode);
    _$hash = $jc(_$hash, remarks.hashCode);
    _$hash = $jc(_$hash, queueTimeOutURL.hashCode);
    _$hash = $jc(_$hash, rideId.hashCode);
    _$hash = $jc(_$hash, userId.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GTransactB2CRequestInput')
          ..add('phoneNumber', phoneNumber)
          ..add('amount', amount)
          ..add('callBackUrl', callBackUrl)
          ..add('occassion', occassion)
          ..add('remarks', remarks)
          ..add('queueTimeOutURL', queueTimeOutURL)
          ..add('rideId', rideId)
          ..add('userId', userId))
        .toString();
  }
}

class GTransactB2CRequestInputBuilder
    implements
        Builder<GTransactB2CRequestInput, GTransactB2CRequestInputBuilder> {
  _$GTransactB2CRequestInput? _$v;

  String? _phoneNumber;
  String? get phoneNumber => _$this._phoneNumber;
  set phoneNumber(String? phoneNumber) => _$this._phoneNumber = phoneNumber;

  String? _amount;
  String? get amount => _$this._amount;
  set amount(String? amount) => _$this._amount = amount;

  String? _callBackUrl;
  String? get callBackUrl => _$this._callBackUrl;
  set callBackUrl(String? callBackUrl) => _$this._callBackUrl = callBackUrl;

  String? _occassion;
  String? get occassion => _$this._occassion;
  set occassion(String? occassion) => _$this._occassion = occassion;

  String? _remarks;
  String? get remarks => _$this._remarks;
  set remarks(String? remarks) => _$this._remarks = remarks;

  String? _queueTimeOutURL;
  String? get queueTimeOutURL => _$this._queueTimeOutURL;
  set queueTimeOutURL(String? queueTimeOutURL) =>
      _$this._queueTimeOutURL = queueTimeOutURL;

  int? _rideId;
  int? get rideId => _$this._rideId;
  set rideId(int? rideId) => _$this._rideId = rideId;

  String? _userId;
  String? get userId => _$this._userId;
  set userId(String? userId) => _$this._userId = userId;

  GTransactB2CRequestInputBuilder();

  GTransactB2CRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _phoneNumber = $v.phoneNumber;
      _amount = $v.amount;
      _callBackUrl = $v.callBackUrl;
      _occassion = $v.occassion;
      _remarks = $v.remarks;
      _queueTimeOutURL = $v.queueTimeOutURL;
      _rideId = $v.rideId;
      _userId = $v.userId;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GTransactB2CRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GTransactB2CRequestInput;
  }

  @override
  void update(void Function(GTransactB2CRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GTransactB2CRequestInput build() => _build();

  _$GTransactB2CRequestInput _build() {
    final _$result = _$v ??
        new _$GTransactB2CRequestInput._(
            phoneNumber: BuiltValueNullFieldError.checkNotNull(
                phoneNumber, r'GTransactB2CRequestInput', 'phoneNumber'),
            amount: BuiltValueNullFieldError.checkNotNull(
                amount, r'GTransactB2CRequestInput', 'amount'),
            callBackUrl: BuiltValueNullFieldError.checkNotNull(
                callBackUrl, r'GTransactB2CRequestInput', 'callBackUrl'),
            occassion: BuiltValueNullFieldError.checkNotNull(
                occassion, r'GTransactB2CRequestInput', 'occassion'),
            remarks: BuiltValueNullFieldError.checkNotNull(
                remarks, r'GTransactB2CRequestInput', 'remarks'),
            queueTimeOutURL: BuiltValueNullFieldError.checkNotNull(
                queueTimeOutURL,
                r'GTransactB2CRequestInput',
                'queueTimeOutURL'),
            rideId: BuiltValueNullFieldError.checkNotNull(
                rideId, r'GTransactB2CRequestInput', 'rideId'),
            userId: userId);
    replace(_$result);
    return _$result;
  }
}

class _$GTransactionStatusRequestDtoInput
    extends GTransactionStatusRequestDtoInput {
  @override
  final String transactionID;
  @override
  final String? resultURL;
  @override
  final String? queueTimeOutURL;
  @override
  final String? remarks;
  @override
  final String? occasion;

  factory _$GTransactionStatusRequestDtoInput(
          [void Function(GTransactionStatusRequestDtoInputBuilder)? updates]) =>
      (new GTransactionStatusRequestDtoInputBuilder()..update(updates))
          ._build();

  _$GTransactionStatusRequestDtoInput._(
      {required this.transactionID,
      this.resultURL,
      this.queueTimeOutURL,
      this.remarks,
      this.occasion})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        transactionID, r'GTransactionStatusRequestDtoInput', 'transactionID');
  }

  @override
  GTransactionStatusRequestDtoInput rebuild(
          void Function(GTransactionStatusRequestDtoInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GTransactionStatusRequestDtoInputBuilder toBuilder() =>
      new GTransactionStatusRequestDtoInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GTransactionStatusRequestDtoInput &&
        transactionID == other.transactionID &&
        resultURL == other.resultURL &&
        queueTimeOutURL == other.queueTimeOutURL &&
        remarks == other.remarks &&
        occasion == other.occasion;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, transactionID.hashCode);
    _$hash = $jc(_$hash, resultURL.hashCode);
    _$hash = $jc(_$hash, queueTimeOutURL.hashCode);
    _$hash = $jc(_$hash, remarks.hashCode);
    _$hash = $jc(_$hash, occasion.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GTransactionStatusRequestDtoInput')
          ..add('transactionID', transactionID)
          ..add('resultURL', resultURL)
          ..add('queueTimeOutURL', queueTimeOutURL)
          ..add('remarks', remarks)
          ..add('occasion', occasion))
        .toString();
  }
}

class GTransactionStatusRequestDtoInputBuilder
    implements
        Builder<GTransactionStatusRequestDtoInput,
            GTransactionStatusRequestDtoInputBuilder> {
  _$GTransactionStatusRequestDtoInput? _$v;

  String? _transactionID;
  String? get transactionID => _$this._transactionID;
  set transactionID(String? transactionID) =>
      _$this._transactionID = transactionID;

  String? _resultURL;
  String? get resultURL => _$this._resultURL;
  set resultURL(String? resultURL) => _$this._resultURL = resultURL;

  String? _queueTimeOutURL;
  String? get queueTimeOutURL => _$this._queueTimeOutURL;
  set queueTimeOutURL(String? queueTimeOutURL) =>
      _$this._queueTimeOutURL = queueTimeOutURL;

  String? _remarks;
  String? get remarks => _$this._remarks;
  set remarks(String? remarks) => _$this._remarks = remarks;

  String? _occasion;
  String? get occasion => _$this._occasion;
  set occasion(String? occasion) => _$this._occasion = occasion;

  GTransactionStatusRequestDtoInputBuilder();

  GTransactionStatusRequestDtoInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _transactionID = $v.transactionID;
      _resultURL = $v.resultURL;
      _queueTimeOutURL = $v.queueTimeOutURL;
      _remarks = $v.remarks;
      _occasion = $v.occasion;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GTransactionStatusRequestDtoInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GTransactionStatusRequestDtoInput;
  }

  @override
  void update(
      void Function(GTransactionStatusRequestDtoInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GTransactionStatusRequestDtoInput build() => _build();

  _$GTransactionStatusRequestDtoInput _build() {
    final _$result = _$v ??
        new _$GTransactionStatusRequestDtoInput._(
            transactionID: BuiltValueNullFieldError.checkNotNull(transactionID,
                r'GTransactionStatusRequestDtoInput', 'transactionID'),
            resultURL: resultURL,
            queueTimeOutURL: queueTimeOutURL,
            remarks: remarks,
            occasion: occasion);
    replace(_$result);
    return _$result;
  }
}

class _$GReverseRequestInput extends GReverseRequestInput {
  @override
  final String? initiator;
  @override
  final String? securityCredential;
  @override
  final GCommandType? commandID;
  @override
  final String? transactionID;
  @override
  final String? amount;
  @override
  final String? receiverParty;
  @override
  final String? recieverIdentifierType;
  @override
  final String? remarks;
  @override
  final String? queueTimeOutURL;
  @override
  final String? resultURL;
  @override
  final String? occassion;

  factory _$GReverseRequestInput(
          [void Function(GReverseRequestInputBuilder)? updates]) =>
      (new GReverseRequestInputBuilder()..update(updates))._build();

  _$GReverseRequestInput._(
      {this.initiator,
      this.securityCredential,
      this.commandID,
      this.transactionID,
      this.amount,
      this.receiverParty,
      this.recieverIdentifierType,
      this.remarks,
      this.queueTimeOutURL,
      this.resultURL,
      this.occassion})
      : super._();

  @override
  GReverseRequestInput rebuild(
          void Function(GReverseRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GReverseRequestInputBuilder toBuilder() =>
      new GReverseRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GReverseRequestInput &&
        initiator == other.initiator &&
        securityCredential == other.securityCredential &&
        commandID == other.commandID &&
        transactionID == other.transactionID &&
        amount == other.amount &&
        receiverParty == other.receiverParty &&
        recieverIdentifierType == other.recieverIdentifierType &&
        remarks == other.remarks &&
        queueTimeOutURL == other.queueTimeOutURL &&
        resultURL == other.resultURL &&
        occassion == other.occassion;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, initiator.hashCode);
    _$hash = $jc(_$hash, securityCredential.hashCode);
    _$hash = $jc(_$hash, commandID.hashCode);
    _$hash = $jc(_$hash, transactionID.hashCode);
    _$hash = $jc(_$hash, amount.hashCode);
    _$hash = $jc(_$hash, receiverParty.hashCode);
    _$hash = $jc(_$hash, recieverIdentifierType.hashCode);
    _$hash = $jc(_$hash, remarks.hashCode);
    _$hash = $jc(_$hash, queueTimeOutURL.hashCode);
    _$hash = $jc(_$hash, resultURL.hashCode);
    _$hash = $jc(_$hash, occassion.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GReverseRequestInput')
          ..add('initiator', initiator)
          ..add('securityCredential', securityCredential)
          ..add('commandID', commandID)
          ..add('transactionID', transactionID)
          ..add('amount', amount)
          ..add('receiverParty', receiverParty)
          ..add('recieverIdentifierType', recieverIdentifierType)
          ..add('remarks', remarks)
          ..add('queueTimeOutURL', queueTimeOutURL)
          ..add('resultURL', resultURL)
          ..add('occassion', occassion))
        .toString();
  }
}

class GReverseRequestInputBuilder
    implements Builder<GReverseRequestInput, GReverseRequestInputBuilder> {
  _$GReverseRequestInput? _$v;

  String? _initiator;
  String? get initiator => _$this._initiator;
  set initiator(String? initiator) => _$this._initiator = initiator;

  String? _securityCredential;
  String? get securityCredential => _$this._securityCredential;
  set securityCredential(String? securityCredential) =>
      _$this._securityCredential = securityCredential;

  GCommandType? _commandID;
  GCommandType? get commandID => _$this._commandID;
  set commandID(GCommandType? commandID) => _$this._commandID = commandID;

  String? _transactionID;
  String? get transactionID => _$this._transactionID;
  set transactionID(String? transactionID) =>
      _$this._transactionID = transactionID;

  String? _amount;
  String? get amount => _$this._amount;
  set amount(String? amount) => _$this._amount = amount;

  String? _receiverParty;
  String? get receiverParty => _$this._receiverParty;
  set receiverParty(String? receiverParty) =>
      _$this._receiverParty = receiverParty;

  String? _recieverIdentifierType;
  String? get recieverIdentifierType => _$this._recieverIdentifierType;
  set recieverIdentifierType(String? recieverIdentifierType) =>
      _$this._recieverIdentifierType = recieverIdentifierType;

  String? _remarks;
  String? get remarks => _$this._remarks;
  set remarks(String? remarks) => _$this._remarks = remarks;

  String? _queueTimeOutURL;
  String? get queueTimeOutURL => _$this._queueTimeOutURL;
  set queueTimeOutURL(String? queueTimeOutURL) =>
      _$this._queueTimeOutURL = queueTimeOutURL;

  String? _resultURL;
  String? get resultURL => _$this._resultURL;
  set resultURL(String? resultURL) => _$this._resultURL = resultURL;

  String? _occassion;
  String? get occassion => _$this._occassion;
  set occassion(String? occassion) => _$this._occassion = occassion;

  GReverseRequestInputBuilder();

  GReverseRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _initiator = $v.initiator;
      _securityCredential = $v.securityCredential;
      _commandID = $v.commandID;
      _transactionID = $v.transactionID;
      _amount = $v.amount;
      _receiverParty = $v.receiverParty;
      _recieverIdentifierType = $v.recieverIdentifierType;
      _remarks = $v.remarks;
      _queueTimeOutURL = $v.queueTimeOutURL;
      _resultURL = $v.resultURL;
      _occassion = $v.occassion;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GReverseRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GReverseRequestInput;
  }

  @override
  void update(void Function(GReverseRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GReverseRequestInput build() => _build();

  _$GReverseRequestInput _build() {
    final _$result = _$v ??
        new _$GReverseRequestInput._(
            initiator: initiator,
            securityCredential: securityCredential,
            commandID: commandID,
            transactionID: transactionID,
            amount: amount,
            receiverParty: receiverParty,
            recieverIdentifierType: recieverIdentifierType,
            remarks: remarks,
            queueTimeOutURL: queueTimeOutURL,
            resultURL: resultURL,
            occassion: occassion);
    replace(_$result);
    return _$result;
  }
}

class _$GChartDtoInput extends GChartDtoInput {
  @override
  final String id;
  @override
  final String from;
  @override
  final String to;
  @override
  final String dateSend;
  @override
  final String message;
  @override
  final String topic;
  @override
  final String? deviceRegToken;

  factory _$GChartDtoInput([void Function(GChartDtoInputBuilder)? updates]) =>
      (new GChartDtoInputBuilder()..update(updates))._build();

  _$GChartDtoInput._(
      {required this.id,
      required this.from,
      required this.to,
      required this.dateSend,
      required this.message,
      required this.topic,
      this.deviceRegToken})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(id, r'GChartDtoInput', 'id');
    BuiltValueNullFieldError.checkNotNull(from, r'GChartDtoInput', 'from');
    BuiltValueNullFieldError.checkNotNull(to, r'GChartDtoInput', 'to');
    BuiltValueNullFieldError.checkNotNull(
        dateSend, r'GChartDtoInput', 'dateSend');
    BuiltValueNullFieldError.checkNotNull(
        message, r'GChartDtoInput', 'message');
    BuiltValueNullFieldError.checkNotNull(topic, r'GChartDtoInput', 'topic');
  }

  @override
  GChartDtoInput rebuild(void Function(GChartDtoInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GChartDtoInputBuilder toBuilder() =>
      new GChartDtoInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GChartDtoInput &&
        id == other.id &&
        from == other.from &&
        to == other.to &&
        dateSend == other.dateSend &&
        message == other.message &&
        topic == other.topic &&
        deviceRegToken == other.deviceRegToken;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, from.hashCode);
    _$hash = $jc(_$hash, to.hashCode);
    _$hash = $jc(_$hash, dateSend.hashCode);
    _$hash = $jc(_$hash, message.hashCode);
    _$hash = $jc(_$hash, topic.hashCode);
    _$hash = $jc(_$hash, deviceRegToken.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GChartDtoInput')
          ..add('id', id)
          ..add('from', from)
          ..add('to', to)
          ..add('dateSend', dateSend)
          ..add('message', message)
          ..add('topic', topic)
          ..add('deviceRegToken', deviceRegToken))
        .toString();
  }
}

class GChartDtoInputBuilder
    implements Builder<GChartDtoInput, GChartDtoInputBuilder> {
  _$GChartDtoInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _from;
  String? get from => _$this._from;
  set from(String? from) => _$this._from = from;

  String? _to;
  String? get to => _$this._to;
  set to(String? to) => _$this._to = to;

  String? _dateSend;
  String? get dateSend => _$this._dateSend;
  set dateSend(String? dateSend) => _$this._dateSend = dateSend;

  String? _message;
  String? get message => _$this._message;
  set message(String? message) => _$this._message = message;

  String? _topic;
  String? get topic => _$this._topic;
  set topic(String? topic) => _$this._topic = topic;

  String? _deviceRegToken;
  String? get deviceRegToken => _$this._deviceRegToken;
  set deviceRegToken(String? deviceRegToken) =>
      _$this._deviceRegToken = deviceRegToken;

  GChartDtoInputBuilder();

  GChartDtoInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _from = $v.from;
      _to = $v.to;
      _dateSend = $v.dateSend;
      _message = $v.message;
      _topic = $v.topic;
      _deviceRegToken = $v.deviceRegToken;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GChartDtoInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GChartDtoInput;
  }

  @override
  void update(void Function(GChartDtoInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GChartDtoInput build() => _build();

  _$GChartDtoInput _build() {
    final _$result = _$v ??
        new _$GChartDtoInput._(
            id: BuiltValueNullFieldError.checkNotNull(
                id, r'GChartDtoInput', 'id'),
            from: BuiltValueNullFieldError.checkNotNull(
                from, r'GChartDtoInput', 'from'),
            to: BuiltValueNullFieldError.checkNotNull(
                to, r'GChartDtoInput', 'to'),
            dateSend: BuiltValueNullFieldError.checkNotNull(
                dateSend, r'GChartDtoInput', 'dateSend'),
            message: BuiltValueNullFieldError.checkNotNull(
                message, r'GChartDtoInput', 'message'),
            topic: BuiltValueNullFieldError.checkNotNull(
                topic, r'GChartDtoInput', 'topic'),
            deviceRegToken: deviceRegToken);
    replace(_$result);
    return _$result;
  }
}

class _$GSubscriberEmailInput extends GSubscriberEmailInput {
  @override
  final int? id;
  @override
  final String? email;
  @override
  final bool? isActive;

  factory _$GSubscriberEmailInput(
          [void Function(GSubscriberEmailInputBuilder)? updates]) =>
      (new GSubscriberEmailInputBuilder()..update(updates))._build();

  _$GSubscriberEmailInput._({this.id, this.email, this.isActive}) : super._();

  @override
  GSubscriberEmailInput rebuild(
          void Function(GSubscriberEmailInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GSubscriberEmailInputBuilder toBuilder() =>
      new GSubscriberEmailInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GSubscriberEmailInput &&
        id == other.id &&
        email == other.email &&
        isActive == other.isActive;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, email.hashCode);
    _$hash = $jc(_$hash, isActive.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GSubscriberEmailInput')
          ..add('id', id)
          ..add('email', email)
          ..add('isActive', isActive))
        .toString();
  }
}

class GSubscriberEmailInputBuilder
    implements Builder<GSubscriberEmailInput, GSubscriberEmailInputBuilder> {
  _$GSubscriberEmailInput? _$v;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  bool? _isActive;
  bool? get isActive => _$this._isActive;
  set isActive(bool? isActive) => _$this._isActive = isActive;

  GSubscriberEmailInputBuilder();

  GSubscriberEmailInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _email = $v.email;
      _isActive = $v.isActive;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GSubscriberEmailInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GSubscriberEmailInput;
  }

  @override
  void update(void Function(GSubscriberEmailInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GSubscriberEmailInput build() => _build();

  _$GSubscriberEmailInput _build() {
    final _$result = _$v ??
        new _$GSubscriberEmailInput._(id: id, email: email, isActive: isActive);
    replace(_$result);
    return _$result;
  }
}

class _$GUploadRequestInput extends GUploadRequestInput {
  @override
  final String? fileName;
  @override
  final String? extension;
  @override
  final GUploadType? uploadType;
  @override
  final BuiltList<GByte>? data;

  factory _$GUploadRequestInput(
          [void Function(GUploadRequestInputBuilder)? updates]) =>
      (new GUploadRequestInputBuilder()..update(updates))._build();

  _$GUploadRequestInput._(
      {this.fileName, this.extension, this.uploadType, this.data})
      : super._();

  @override
  GUploadRequestInput rebuild(
          void Function(GUploadRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUploadRequestInputBuilder toBuilder() =>
      new GUploadRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUploadRequestInput &&
        fileName == other.fileName &&
        extension == other.extension &&
        uploadType == other.uploadType &&
        data == other.data;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, fileName.hashCode);
    _$hash = $jc(_$hash, extension.hashCode);
    _$hash = $jc(_$hash, uploadType.hashCode);
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUploadRequestInput')
          ..add('fileName', fileName)
          ..add('extension', extension)
          ..add('uploadType', uploadType)
          ..add('data', data))
        .toString();
  }
}

class GUploadRequestInputBuilder
    implements Builder<GUploadRequestInput, GUploadRequestInputBuilder> {
  _$GUploadRequestInput? _$v;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  String? _extension;
  String? get extension => _$this._extension;
  set extension(String? extension) => _$this._extension = extension;

  GUploadType? _uploadType;
  GUploadType? get uploadType => _$this._uploadType;
  set uploadType(GUploadType? uploadType) => _$this._uploadType = uploadType;

  ListBuilder<GByte>? _data;
  ListBuilder<GByte> get data => _$this._data ??= new ListBuilder<GByte>();
  set data(ListBuilder<GByte>? data) => _$this._data = data;

  GUploadRequestInputBuilder();

  GUploadRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _fileName = $v.fileName;
      _extension = $v.extension;
      _uploadType = $v.uploadType;
      _data = $v.data?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUploadRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUploadRequestInput;
  }

  @override
  void update(void Function(GUploadRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUploadRequestInput build() => _build();

  _$GUploadRequestInput _build() {
    _$GUploadRequestInput _$result;
    try {
      _$result = _$v ??
          new _$GUploadRequestInput._(
              fileName: fileName,
              extension: extension,
              uploadType: uploadType,
              data: _data?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        _data?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUploadRequestInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUploadRequestFlInput extends GUploadRequestFlInput {
  @override
  final String? fileName;
  @override
  final String? extension;
  @override
  final GUploadType? uploadType;
  @override
  final String? data;

  factory _$GUploadRequestFlInput(
          [void Function(GUploadRequestFlInputBuilder)? updates]) =>
      (new GUploadRequestFlInputBuilder()..update(updates))._build();

  _$GUploadRequestFlInput._(
      {this.fileName, this.extension, this.uploadType, this.data})
      : super._();

  @override
  GUploadRequestFlInput rebuild(
          void Function(GUploadRequestFlInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUploadRequestFlInputBuilder toBuilder() =>
      new GUploadRequestFlInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUploadRequestFlInput &&
        fileName == other.fileName &&
        extension == other.extension &&
        uploadType == other.uploadType &&
        data == other.data;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, fileName.hashCode);
    _$hash = $jc(_$hash, extension.hashCode);
    _$hash = $jc(_$hash, uploadType.hashCode);
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUploadRequestFlInput')
          ..add('fileName', fileName)
          ..add('extension', extension)
          ..add('uploadType', uploadType)
          ..add('data', data))
        .toString();
  }
}

class GUploadRequestFlInputBuilder
    implements Builder<GUploadRequestFlInput, GUploadRequestFlInputBuilder> {
  _$GUploadRequestFlInput? _$v;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  String? _extension;
  String? get extension => _$this._extension;
  set extension(String? extension) => _$this._extension = extension;

  GUploadType? _uploadType;
  GUploadType? get uploadType => _$this._uploadType;
  set uploadType(GUploadType? uploadType) => _$this._uploadType = uploadType;

  String? _data;
  String? get data => _$this._data;
  set data(String? data) => _$this._data = data;

  GUploadRequestFlInputBuilder();

  GUploadRequestFlInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _fileName = $v.fileName;
      _extension = $v.extension;
      _uploadType = $v.uploadType;
      _data = $v.data;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUploadRequestFlInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUploadRequestFlInput;
  }

  @override
  void update(void Function(GUploadRequestFlInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUploadRequestFlInput build() => _build();

  _$GUploadRequestFlInput _build() {
    final _$result = _$v ??
        new _$GUploadRequestFlInput._(
            fileName: fileName,
            extension: extension,
            uploadType: uploadType,
            data: data);
    replace(_$result);
    return _$result;
  }
}

class _$GDownloadRequestInput extends GDownloadRequestInput {
  @override
  final String? fileName;
  @override
  final GUploadType? downloadType;

  factory _$GDownloadRequestInput(
          [void Function(GDownloadRequestInputBuilder)? updates]) =>
      (new GDownloadRequestInputBuilder()..update(updates))._build();

  _$GDownloadRequestInput._({this.fileName, this.downloadType}) : super._();

  @override
  GDownloadRequestInput rebuild(
          void Function(GDownloadRequestInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GDownloadRequestInputBuilder toBuilder() =>
      new GDownloadRequestInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GDownloadRequestInput &&
        fileName == other.fileName &&
        downloadType == other.downloadType;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, fileName.hashCode);
    _$hash = $jc(_$hash, downloadType.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GDownloadRequestInput')
          ..add('fileName', fileName)
          ..add('downloadType', downloadType))
        .toString();
  }
}

class GDownloadRequestInputBuilder
    implements Builder<GDownloadRequestInput, GDownloadRequestInputBuilder> {
  _$GDownloadRequestInput? _$v;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  GUploadType? _downloadType;
  GUploadType? get downloadType => _$this._downloadType;
  set downloadType(GUploadType? downloadType) =>
      _$this._downloadType = downloadType;

  GDownloadRequestInputBuilder();

  GDownloadRequestInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _fileName = $v.fileName;
      _downloadType = $v.downloadType;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GDownloadRequestInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GDownloadRequestInput;
  }

  @override
  void update(void Function(GDownloadRequestInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GDownloadRequestInput build() => _build();

  _$GDownloadRequestInput _build() {
    final _$result = _$v ??
        new _$GDownloadRequestInput._(
            fileName: fileName, downloadType: downloadType);
    replace(_$result);
    return _$result;
  }
}

class _$GCarInput extends GCarInput {
  @override
  final String id;
  @override
  final String color;
  @override
  final String model;
  @override
  final String licensePlate;
  @override
  final String imageUrl;
  @override
  final bool active;
  @override
  final String ownerId;
  @override
  final GSafiriCarUserInput? owner;
  @override
  final BuiltList<GRideInput>? rides;

  factory _$GCarInput([void Function(GCarInputBuilder)? updates]) =>
      (new GCarInputBuilder()..update(updates))._build();

  _$GCarInput._(
      {required this.id,
      required this.color,
      required this.model,
      required this.licensePlate,
      required this.imageUrl,
      required this.active,
      required this.ownerId,
      this.owner,
      this.rides})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(id, r'GCarInput', 'id');
    BuiltValueNullFieldError.checkNotNull(color, r'GCarInput', 'color');
    BuiltValueNullFieldError.checkNotNull(model, r'GCarInput', 'model');
    BuiltValueNullFieldError.checkNotNull(
        licensePlate, r'GCarInput', 'licensePlate');
    BuiltValueNullFieldError.checkNotNull(imageUrl, r'GCarInput', 'imageUrl');
    BuiltValueNullFieldError.checkNotNull(active, r'GCarInput', 'active');
    BuiltValueNullFieldError.checkNotNull(ownerId, r'GCarInput', 'ownerId');
  }

  @override
  GCarInput rebuild(void Function(GCarInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCarInputBuilder toBuilder() => new GCarInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCarInput &&
        id == other.id &&
        color == other.color &&
        model == other.model &&
        licensePlate == other.licensePlate &&
        imageUrl == other.imageUrl &&
        active == other.active &&
        ownerId == other.ownerId &&
        owner == other.owner &&
        rides == other.rides;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, color.hashCode);
    _$hash = $jc(_$hash, model.hashCode);
    _$hash = $jc(_$hash, licensePlate.hashCode);
    _$hash = $jc(_$hash, imageUrl.hashCode);
    _$hash = $jc(_$hash, active.hashCode);
    _$hash = $jc(_$hash, ownerId.hashCode);
    _$hash = $jc(_$hash, owner.hashCode);
    _$hash = $jc(_$hash, rides.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCarInput')
          ..add('id', id)
          ..add('color', color)
          ..add('model', model)
          ..add('licensePlate', licensePlate)
          ..add('imageUrl', imageUrl)
          ..add('active', active)
          ..add('ownerId', ownerId)
          ..add('owner', owner)
          ..add('rides', rides))
        .toString();
  }
}

class GCarInputBuilder implements Builder<GCarInput, GCarInputBuilder> {
  _$GCarInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _color;
  String? get color => _$this._color;
  set color(String? color) => _$this._color = color;

  String? _model;
  String? get model => _$this._model;
  set model(String? model) => _$this._model = model;

  String? _licensePlate;
  String? get licensePlate => _$this._licensePlate;
  set licensePlate(String? licensePlate) => _$this._licensePlate = licensePlate;

  String? _imageUrl;
  String? get imageUrl => _$this._imageUrl;
  set imageUrl(String? imageUrl) => _$this._imageUrl = imageUrl;

  bool? _active;
  bool? get active => _$this._active;
  set active(bool? active) => _$this._active = active;

  String? _ownerId;
  String? get ownerId => _$this._ownerId;
  set ownerId(String? ownerId) => _$this._ownerId = ownerId;

  GSafiriCarUserInputBuilder? _owner;
  GSafiriCarUserInputBuilder get owner =>
      _$this._owner ??= new GSafiriCarUserInputBuilder();
  set owner(GSafiriCarUserInputBuilder? owner) => _$this._owner = owner;

  ListBuilder<GRideInput>? _rides;
  ListBuilder<GRideInput> get rides =>
      _$this._rides ??= new ListBuilder<GRideInput>();
  set rides(ListBuilder<GRideInput>? rides) => _$this._rides = rides;

  GCarInputBuilder();

  GCarInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _color = $v.color;
      _model = $v.model;
      _licensePlate = $v.licensePlate;
      _imageUrl = $v.imageUrl;
      _active = $v.active;
      _ownerId = $v.ownerId;
      _owner = $v.owner?.toBuilder();
      _rides = $v.rides?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCarInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCarInput;
  }

  @override
  void update(void Function(GCarInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCarInput build() => _build();

  _$GCarInput _build() {
    _$GCarInput _$result;
    try {
      _$result = _$v ??
          new _$GCarInput._(
              id: BuiltValueNullFieldError.checkNotNull(id, r'GCarInput', 'id'),
              color: BuiltValueNullFieldError.checkNotNull(
                  color, r'GCarInput', 'color'),
              model: BuiltValueNullFieldError.checkNotNull(
                  model, r'GCarInput', 'model'),
              licensePlate: BuiltValueNullFieldError.checkNotNull(
                  licensePlate, r'GCarInput', 'licensePlate'),
              imageUrl: BuiltValueNullFieldError.checkNotNull(
                  imageUrl, r'GCarInput', 'imageUrl'),
              active: BuiltValueNullFieldError.checkNotNull(
                  active, r'GCarInput', 'active'),
              ownerId: BuiltValueNullFieldError.checkNotNull(
                  ownerId, r'GCarInput', 'ownerId'),
              owner: _owner?.build(),
              rides: _rides?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'owner';
        _owner?.build();
        _$failedField = 'rides';
        _rides?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCarInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCarUpdateDtoInput extends GCarUpdateDtoInput {
  @override
  final String? color;
  @override
  final String? model;
  @override
  final String? licensePlate;
  @override
  final String? imageUrl;
  @override
  final bool active;
  @override
  final String? ownerId;

  factory _$GCarUpdateDtoInput(
          [void Function(GCarUpdateDtoInputBuilder)? updates]) =>
      (new GCarUpdateDtoInputBuilder()..update(updates))._build();

  _$GCarUpdateDtoInput._(
      {this.color,
      this.model,
      this.licensePlate,
      this.imageUrl,
      required this.active,
      this.ownerId})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        active, r'GCarUpdateDtoInput', 'active');
  }

  @override
  GCarUpdateDtoInput rebuild(
          void Function(GCarUpdateDtoInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCarUpdateDtoInputBuilder toBuilder() =>
      new GCarUpdateDtoInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCarUpdateDtoInput &&
        color == other.color &&
        model == other.model &&
        licensePlate == other.licensePlate &&
        imageUrl == other.imageUrl &&
        active == other.active &&
        ownerId == other.ownerId;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, color.hashCode);
    _$hash = $jc(_$hash, model.hashCode);
    _$hash = $jc(_$hash, licensePlate.hashCode);
    _$hash = $jc(_$hash, imageUrl.hashCode);
    _$hash = $jc(_$hash, active.hashCode);
    _$hash = $jc(_$hash, ownerId.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCarUpdateDtoInput')
          ..add('color', color)
          ..add('model', model)
          ..add('licensePlate', licensePlate)
          ..add('imageUrl', imageUrl)
          ..add('active', active)
          ..add('ownerId', ownerId))
        .toString();
  }
}

class GCarUpdateDtoInputBuilder
    implements Builder<GCarUpdateDtoInput, GCarUpdateDtoInputBuilder> {
  _$GCarUpdateDtoInput? _$v;

  String? _color;
  String? get color => _$this._color;
  set color(String? color) => _$this._color = color;

  String? _model;
  String? get model => _$this._model;
  set model(String? model) => _$this._model = model;

  String? _licensePlate;
  String? get licensePlate => _$this._licensePlate;
  set licensePlate(String? licensePlate) => _$this._licensePlate = licensePlate;

  String? _imageUrl;
  String? get imageUrl => _$this._imageUrl;
  set imageUrl(String? imageUrl) => _$this._imageUrl = imageUrl;

  bool? _active;
  bool? get active => _$this._active;
  set active(bool? active) => _$this._active = active;

  String? _ownerId;
  String? get ownerId => _$this._ownerId;
  set ownerId(String? ownerId) => _$this._ownerId = ownerId;

  GCarUpdateDtoInputBuilder();

  GCarUpdateDtoInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _color = $v.color;
      _model = $v.model;
      _licensePlate = $v.licensePlate;
      _imageUrl = $v.imageUrl;
      _active = $v.active;
      _ownerId = $v.ownerId;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCarUpdateDtoInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCarUpdateDtoInput;
  }

  @override
  void update(void Function(GCarUpdateDtoInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCarUpdateDtoInput build() => _build();

  _$GCarUpdateDtoInput _build() {
    final _$result = _$v ??
        new _$GCarUpdateDtoInput._(
            color: color,
            model: model,
            licensePlate: licensePlate,
            imageUrl: imageUrl,
            active: BuiltValueNullFieldError.checkNotNull(
                active, r'GCarUpdateDtoInput', 'active'),
            ownerId: ownerId);
    replace(_$result);
    return _$result;
  }
}

class _$GTimeSpan extends GTimeSpan {
  @override
  final String value;

  factory _$GTimeSpan([void Function(GTimeSpanBuilder)? updates]) =>
      (new GTimeSpanBuilder()..update(updates))._build();

  _$GTimeSpan._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, r'GTimeSpan', 'value');
  }

  @override
  GTimeSpan rebuild(void Function(GTimeSpanBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GTimeSpanBuilder toBuilder() => new GTimeSpanBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GTimeSpan && value == other.value;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, value.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GTimeSpan')..add('value', value))
        .toString();
  }
}

class GTimeSpanBuilder implements Builder<GTimeSpan, GTimeSpanBuilder> {
  _$GTimeSpan? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GTimeSpanBuilder();

  GTimeSpanBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GTimeSpan other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GTimeSpan;
  }

  @override
  void update(void Function(GTimeSpanBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GTimeSpan build() => _build();

  _$GTimeSpan _build() {
    final _$result = _$v ??
        new _$GTimeSpan._(
            value: BuiltValueNullFieldError.checkNotNull(
                value, r'GTimeSpan', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GDecimal extends GDecimal {
  @override
  final String value;

  factory _$GDecimal([void Function(GDecimalBuilder)? updates]) =>
      (new GDecimalBuilder()..update(updates))._build();

  _$GDecimal._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, r'GDecimal', 'value');
  }

  @override
  GDecimal rebuild(void Function(GDecimalBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GDecimalBuilder toBuilder() => new GDecimalBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GDecimal && value == other.value;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, value.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GDecimal')..add('value', value))
        .toString();
  }
}

class GDecimalBuilder implements Builder<GDecimal, GDecimalBuilder> {
  _$GDecimal? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GDecimalBuilder();

  GDecimalBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GDecimal other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GDecimal;
  }

  @override
  void update(void Function(GDecimalBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GDecimal build() => _build();

  _$GDecimal _build() {
    final _$result = _$v ??
        new _$GDecimal._(
            value: BuiltValueNullFieldError.checkNotNull(
                value, r'GDecimal', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GRideInput extends GRideInput {
  @override
  final int id;
  @override
  final String? name;
  @override
  final String? placeofStart;
  @override
  final String? destination;
  @override
  final String? driverId;
  @override
  final double estimatePrice;
  @override
  final String? estimatedDistance;
  @override
  final int numberOfPeople;
  @override
  final int maximumCarryWeight;
  @override
  final GDateTime departureDate;
  @override
  final String? duration;
  @override
  final String? status;
  @override
  final GSeatInput? seat;
  @override
  final int seatCount;
  @override
  final int seatCapacity;
  @override
  final double maxTotalPay;
  @override
  final double totalPay;
  @override
  final GDecimal amountCashedOut;
  @override
  final GTimeSpan? departureTime;
  @override
  final GDateTime arrivalTime;
  @override
  final String? allowedBehDesc;
  @override
  final String? exactPickupLocation;
  @override
  final int? routeIndex;
  @override
  final String mpesaReceiptNumber;
  @override
  final GDateTime transactionDate;
  @override
  final String merchantRequestId;
  @override
  final String checkoutRequestId;
  @override
  final double compensatedFromPassengerCancel;
  @override
  final GDateTime? driverPaymentTime;
  @override
  final String? exactDropOffLocation;
  @override
  final bool? isRecurring;
  @override
  final String carId;
  @override
  final GCarInput? car;
  @override
  final BuiltList<GUserRidesInput>? users;
  @override
  final BuiltList<GRideTransactionInput>? transactions;

  factory _$GRideInput([void Function(GRideInputBuilder)? updates]) =>
      (new GRideInputBuilder()..update(updates))._build();

  _$GRideInput._(
      {required this.id,
      this.name,
      this.placeofStart,
      this.destination,
      this.driverId,
      required this.estimatePrice,
      this.estimatedDistance,
      required this.numberOfPeople,
      required this.maximumCarryWeight,
      required this.departureDate,
      this.duration,
      this.status,
      this.seat,
      required this.seatCount,
      required this.seatCapacity,
      required this.maxTotalPay,
      required this.totalPay,
      required this.amountCashedOut,
      this.departureTime,
      required this.arrivalTime,
      this.allowedBehDesc,
      this.exactPickupLocation,
      this.routeIndex,
      required this.mpesaReceiptNumber,
      required this.transactionDate,
      required this.merchantRequestId,
      required this.checkoutRequestId,
      required this.compensatedFromPassengerCancel,
      this.driverPaymentTime,
      this.exactDropOffLocation,
      this.isRecurring,
      required this.carId,
      this.car,
      this.users,
      this.transactions})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(id, r'GRideInput', 'id');
    BuiltValueNullFieldError.checkNotNull(
        estimatePrice, r'GRideInput', 'estimatePrice');
    BuiltValueNullFieldError.checkNotNull(
        numberOfPeople, r'GRideInput', 'numberOfPeople');
    BuiltValueNullFieldError.checkNotNull(
        maximumCarryWeight, r'GRideInput', 'maximumCarryWeight');
    BuiltValueNullFieldError.checkNotNull(
        departureDate, r'GRideInput', 'departureDate');
    BuiltValueNullFieldError.checkNotNull(
        seatCount, r'GRideInput', 'seatCount');
    BuiltValueNullFieldError.checkNotNull(
        seatCapacity, r'GRideInput', 'seatCapacity');
    BuiltValueNullFieldError.checkNotNull(
        maxTotalPay, r'GRideInput', 'maxTotalPay');
    BuiltValueNullFieldError.checkNotNull(totalPay, r'GRideInput', 'totalPay');
    BuiltValueNullFieldError.checkNotNull(
        amountCashedOut, r'GRideInput', 'amountCashedOut');
    BuiltValueNullFieldError.checkNotNull(
        arrivalTime, r'GRideInput', 'arrivalTime');
    BuiltValueNullFieldError.checkNotNull(
        mpesaReceiptNumber, r'GRideInput', 'mpesaReceiptNumber');
    BuiltValueNullFieldError.checkNotNull(
        transactionDate, r'GRideInput', 'transactionDate');
    BuiltValueNullFieldError.checkNotNull(
        merchantRequestId, r'GRideInput', 'merchantRequestId');
    BuiltValueNullFieldError.checkNotNull(
        checkoutRequestId, r'GRideInput', 'checkoutRequestId');
    BuiltValueNullFieldError.checkNotNull(compensatedFromPassengerCancel,
        r'GRideInput', 'compensatedFromPassengerCancel');
    BuiltValueNullFieldError.checkNotNull(carId, r'GRideInput', 'carId');
  }

  @override
  GRideInput rebuild(void Function(GRideInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GRideInputBuilder toBuilder() => new GRideInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GRideInput &&
        id == other.id &&
        name == other.name &&
        placeofStart == other.placeofStart &&
        destination == other.destination &&
        driverId == other.driverId &&
        estimatePrice == other.estimatePrice &&
        estimatedDistance == other.estimatedDistance &&
        numberOfPeople == other.numberOfPeople &&
        maximumCarryWeight == other.maximumCarryWeight &&
        departureDate == other.departureDate &&
        duration == other.duration &&
        status == other.status &&
        seat == other.seat &&
        seatCount == other.seatCount &&
        seatCapacity == other.seatCapacity &&
        maxTotalPay == other.maxTotalPay &&
        totalPay == other.totalPay &&
        amountCashedOut == other.amountCashedOut &&
        departureTime == other.departureTime &&
        arrivalTime == other.arrivalTime &&
        allowedBehDesc == other.allowedBehDesc &&
        exactPickupLocation == other.exactPickupLocation &&
        routeIndex == other.routeIndex &&
        mpesaReceiptNumber == other.mpesaReceiptNumber &&
        transactionDate == other.transactionDate &&
        merchantRequestId == other.merchantRequestId &&
        checkoutRequestId == other.checkoutRequestId &&
        compensatedFromPassengerCancel ==
            other.compensatedFromPassengerCancel &&
        driverPaymentTime == other.driverPaymentTime &&
        exactDropOffLocation == other.exactDropOffLocation &&
        isRecurring == other.isRecurring &&
        carId == other.carId &&
        car == other.car &&
        users == other.users &&
        transactions == other.transactions;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, name.hashCode);
    _$hash = $jc(_$hash, placeofStart.hashCode);
    _$hash = $jc(_$hash, destination.hashCode);
    _$hash = $jc(_$hash, driverId.hashCode);
    _$hash = $jc(_$hash, estimatePrice.hashCode);
    _$hash = $jc(_$hash, estimatedDistance.hashCode);
    _$hash = $jc(_$hash, numberOfPeople.hashCode);
    _$hash = $jc(_$hash, maximumCarryWeight.hashCode);
    _$hash = $jc(_$hash, departureDate.hashCode);
    _$hash = $jc(_$hash, duration.hashCode);
    _$hash = $jc(_$hash, status.hashCode);
    _$hash = $jc(_$hash, seat.hashCode);
    _$hash = $jc(_$hash, seatCount.hashCode);
    _$hash = $jc(_$hash, seatCapacity.hashCode);
    _$hash = $jc(_$hash, maxTotalPay.hashCode);
    _$hash = $jc(_$hash, totalPay.hashCode);
    _$hash = $jc(_$hash, amountCashedOut.hashCode);
    _$hash = $jc(_$hash, departureTime.hashCode);
    _$hash = $jc(_$hash, arrivalTime.hashCode);
    _$hash = $jc(_$hash, allowedBehDesc.hashCode);
    _$hash = $jc(_$hash, exactPickupLocation.hashCode);
    _$hash = $jc(_$hash, routeIndex.hashCode);
    _$hash = $jc(_$hash, mpesaReceiptNumber.hashCode);
    _$hash = $jc(_$hash, transactionDate.hashCode);
    _$hash = $jc(_$hash, merchantRequestId.hashCode);
    _$hash = $jc(_$hash, checkoutRequestId.hashCode);
    _$hash = $jc(_$hash, compensatedFromPassengerCancel.hashCode);
    _$hash = $jc(_$hash, driverPaymentTime.hashCode);
    _$hash = $jc(_$hash, exactDropOffLocation.hashCode);
    _$hash = $jc(_$hash, isRecurring.hashCode);
    _$hash = $jc(_$hash, carId.hashCode);
    _$hash = $jc(_$hash, car.hashCode);
    _$hash = $jc(_$hash, users.hashCode);
    _$hash = $jc(_$hash, transactions.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GRideInput')
          ..add('id', id)
          ..add('name', name)
          ..add('placeofStart', placeofStart)
          ..add('destination', destination)
          ..add('driverId', driverId)
          ..add('estimatePrice', estimatePrice)
          ..add('estimatedDistance', estimatedDistance)
          ..add('numberOfPeople', numberOfPeople)
          ..add('maximumCarryWeight', maximumCarryWeight)
          ..add('departureDate', departureDate)
          ..add('duration', duration)
          ..add('status', status)
          ..add('seat', seat)
          ..add('seatCount', seatCount)
          ..add('seatCapacity', seatCapacity)
          ..add('maxTotalPay', maxTotalPay)
          ..add('totalPay', totalPay)
          ..add('amountCashedOut', amountCashedOut)
          ..add('departureTime', departureTime)
          ..add('arrivalTime', arrivalTime)
          ..add('allowedBehDesc', allowedBehDesc)
          ..add('exactPickupLocation', exactPickupLocation)
          ..add('routeIndex', routeIndex)
          ..add('mpesaReceiptNumber', mpesaReceiptNumber)
          ..add('transactionDate', transactionDate)
          ..add('merchantRequestId', merchantRequestId)
          ..add('checkoutRequestId', checkoutRequestId)
          ..add(
              'compensatedFromPassengerCancel', compensatedFromPassengerCancel)
          ..add('driverPaymentTime', driverPaymentTime)
          ..add('exactDropOffLocation', exactDropOffLocation)
          ..add('isRecurring', isRecurring)
          ..add('carId', carId)
          ..add('car', car)
          ..add('users', users)
          ..add('transactions', transactions))
        .toString();
  }
}

class GRideInputBuilder implements Builder<GRideInput, GRideInputBuilder> {
  _$GRideInput? _$v;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  String? _placeofStart;
  String? get placeofStart => _$this._placeofStart;
  set placeofStart(String? placeofStart) => _$this._placeofStart = placeofStart;

  String? _destination;
  String? get destination => _$this._destination;
  set destination(String? destination) => _$this._destination = destination;

  String? _driverId;
  String? get driverId => _$this._driverId;
  set driverId(String? driverId) => _$this._driverId = driverId;

  double? _estimatePrice;
  double? get estimatePrice => _$this._estimatePrice;
  set estimatePrice(double? estimatePrice) =>
      _$this._estimatePrice = estimatePrice;

  String? _estimatedDistance;
  String? get estimatedDistance => _$this._estimatedDistance;
  set estimatedDistance(String? estimatedDistance) =>
      _$this._estimatedDistance = estimatedDistance;

  int? _numberOfPeople;
  int? get numberOfPeople => _$this._numberOfPeople;
  set numberOfPeople(int? numberOfPeople) =>
      _$this._numberOfPeople = numberOfPeople;

  int? _maximumCarryWeight;
  int? get maximumCarryWeight => _$this._maximumCarryWeight;
  set maximumCarryWeight(int? maximumCarryWeight) =>
      _$this._maximumCarryWeight = maximumCarryWeight;

  GDateTimeBuilder? _departureDate;
  GDateTimeBuilder get departureDate =>
      _$this._departureDate ??= new GDateTimeBuilder();
  set departureDate(GDateTimeBuilder? departureDate) =>
      _$this._departureDate = departureDate;

  String? _duration;
  String? get duration => _$this._duration;
  set duration(String? duration) => _$this._duration = duration;

  String? _status;
  String? get status => _$this._status;
  set status(String? status) => _$this._status = status;

  GSeatInputBuilder? _seat;
  GSeatInputBuilder get seat => _$this._seat ??= new GSeatInputBuilder();
  set seat(GSeatInputBuilder? seat) => _$this._seat = seat;

  int? _seatCount;
  int? get seatCount => _$this._seatCount;
  set seatCount(int? seatCount) => _$this._seatCount = seatCount;

  int? _seatCapacity;
  int? get seatCapacity => _$this._seatCapacity;
  set seatCapacity(int? seatCapacity) => _$this._seatCapacity = seatCapacity;

  double? _maxTotalPay;
  double? get maxTotalPay => _$this._maxTotalPay;
  set maxTotalPay(double? maxTotalPay) => _$this._maxTotalPay = maxTotalPay;

  double? _totalPay;
  double? get totalPay => _$this._totalPay;
  set totalPay(double? totalPay) => _$this._totalPay = totalPay;

  GDecimalBuilder? _amountCashedOut;
  GDecimalBuilder get amountCashedOut =>
      _$this._amountCashedOut ??= new GDecimalBuilder();
  set amountCashedOut(GDecimalBuilder? amountCashedOut) =>
      _$this._amountCashedOut = amountCashedOut;

  GTimeSpanBuilder? _departureTime;
  GTimeSpanBuilder get departureTime =>
      _$this._departureTime ??= new GTimeSpanBuilder();
  set departureTime(GTimeSpanBuilder? departureTime) =>
      _$this._departureTime = departureTime;

  GDateTimeBuilder? _arrivalTime;
  GDateTimeBuilder get arrivalTime =>
      _$this._arrivalTime ??= new GDateTimeBuilder();
  set arrivalTime(GDateTimeBuilder? arrivalTime) =>
      _$this._arrivalTime = arrivalTime;

  String? _allowedBehDesc;
  String? get allowedBehDesc => _$this._allowedBehDesc;
  set allowedBehDesc(String? allowedBehDesc) =>
      _$this._allowedBehDesc = allowedBehDesc;

  String? _exactPickupLocation;
  String? get exactPickupLocation => _$this._exactPickupLocation;
  set exactPickupLocation(String? exactPickupLocation) =>
      _$this._exactPickupLocation = exactPickupLocation;

  int? _routeIndex;
  int? get routeIndex => _$this._routeIndex;
  set routeIndex(int? routeIndex) => _$this._routeIndex = routeIndex;

  String? _mpesaReceiptNumber;
  String? get mpesaReceiptNumber => _$this._mpesaReceiptNumber;
  set mpesaReceiptNumber(String? mpesaReceiptNumber) =>
      _$this._mpesaReceiptNumber = mpesaReceiptNumber;

  GDateTimeBuilder? _transactionDate;
  GDateTimeBuilder get transactionDate =>
      _$this._transactionDate ??= new GDateTimeBuilder();
  set transactionDate(GDateTimeBuilder? transactionDate) =>
      _$this._transactionDate = transactionDate;

  String? _merchantRequestId;
  String? get merchantRequestId => _$this._merchantRequestId;
  set merchantRequestId(String? merchantRequestId) =>
      _$this._merchantRequestId = merchantRequestId;

  String? _checkoutRequestId;
  String? get checkoutRequestId => _$this._checkoutRequestId;
  set checkoutRequestId(String? checkoutRequestId) =>
      _$this._checkoutRequestId = checkoutRequestId;

  double? _compensatedFromPassengerCancel;
  double? get compensatedFromPassengerCancel =>
      _$this._compensatedFromPassengerCancel;
  set compensatedFromPassengerCancel(double? compensatedFromPassengerCancel) =>
      _$this._compensatedFromPassengerCancel = compensatedFromPassengerCancel;

  GDateTimeBuilder? _driverPaymentTime;
  GDateTimeBuilder get driverPaymentTime =>
      _$this._driverPaymentTime ??= new GDateTimeBuilder();
  set driverPaymentTime(GDateTimeBuilder? driverPaymentTime) =>
      _$this._driverPaymentTime = driverPaymentTime;

  String? _exactDropOffLocation;
  String? get exactDropOffLocation => _$this._exactDropOffLocation;
  set exactDropOffLocation(String? exactDropOffLocation) =>
      _$this._exactDropOffLocation = exactDropOffLocation;

  bool? _isRecurring;
  bool? get isRecurring => _$this._isRecurring;
  set isRecurring(bool? isRecurring) => _$this._isRecurring = isRecurring;

  String? _carId;
  String? get carId => _$this._carId;
  set carId(String? carId) => _$this._carId = carId;

  GCarInputBuilder? _car;
  GCarInputBuilder get car => _$this._car ??= new GCarInputBuilder();
  set car(GCarInputBuilder? car) => _$this._car = car;

  ListBuilder<GUserRidesInput>? _users;
  ListBuilder<GUserRidesInput> get users =>
      _$this._users ??= new ListBuilder<GUserRidesInput>();
  set users(ListBuilder<GUserRidesInput>? users) => _$this._users = users;

  ListBuilder<GRideTransactionInput>? _transactions;
  ListBuilder<GRideTransactionInput> get transactions =>
      _$this._transactions ??= new ListBuilder<GRideTransactionInput>();
  set transactions(ListBuilder<GRideTransactionInput>? transactions) =>
      _$this._transactions = transactions;

  GRideInputBuilder();

  GRideInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _name = $v.name;
      _placeofStart = $v.placeofStart;
      _destination = $v.destination;
      _driverId = $v.driverId;
      _estimatePrice = $v.estimatePrice;
      _estimatedDistance = $v.estimatedDistance;
      _numberOfPeople = $v.numberOfPeople;
      _maximumCarryWeight = $v.maximumCarryWeight;
      _departureDate = $v.departureDate.toBuilder();
      _duration = $v.duration;
      _status = $v.status;
      _seat = $v.seat?.toBuilder();
      _seatCount = $v.seatCount;
      _seatCapacity = $v.seatCapacity;
      _maxTotalPay = $v.maxTotalPay;
      _totalPay = $v.totalPay;
      _amountCashedOut = $v.amountCashedOut.toBuilder();
      _departureTime = $v.departureTime?.toBuilder();
      _arrivalTime = $v.arrivalTime.toBuilder();
      _allowedBehDesc = $v.allowedBehDesc;
      _exactPickupLocation = $v.exactPickupLocation;
      _routeIndex = $v.routeIndex;
      _mpesaReceiptNumber = $v.mpesaReceiptNumber;
      _transactionDate = $v.transactionDate.toBuilder();
      _merchantRequestId = $v.merchantRequestId;
      _checkoutRequestId = $v.checkoutRequestId;
      _compensatedFromPassengerCancel = $v.compensatedFromPassengerCancel;
      _driverPaymentTime = $v.driverPaymentTime?.toBuilder();
      _exactDropOffLocation = $v.exactDropOffLocation;
      _isRecurring = $v.isRecurring;
      _carId = $v.carId;
      _car = $v.car?.toBuilder();
      _users = $v.users?.toBuilder();
      _transactions = $v.transactions?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GRideInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GRideInput;
  }

  @override
  void update(void Function(GRideInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GRideInput build() => _build();

  _$GRideInput _build() {
    _$GRideInput _$result;
    try {
      _$result = _$v ??
          new _$GRideInput._(
              id: BuiltValueNullFieldError.checkNotNull(
                  id, r'GRideInput', 'id'),
              name: name,
              placeofStart: placeofStart,
              destination: destination,
              driverId: driverId,
              estimatePrice: BuiltValueNullFieldError.checkNotNull(
                  estimatePrice, r'GRideInput', 'estimatePrice'),
              estimatedDistance: estimatedDistance,
              numberOfPeople: BuiltValueNullFieldError.checkNotNull(
                  numberOfPeople, r'GRideInput', 'numberOfPeople'),
              maximumCarryWeight: BuiltValueNullFieldError.checkNotNull(
                  maximumCarryWeight, r'GRideInput', 'maximumCarryWeight'),
              departureDate: departureDate.build(),
              duration: duration,
              status: status,
              seat: _seat?.build(),
              seatCount: BuiltValueNullFieldError.checkNotNull(
                  seatCount, r'GRideInput', 'seatCount'),
              seatCapacity: BuiltValueNullFieldError.checkNotNull(
                  seatCapacity, r'GRideInput', 'seatCapacity'),
              maxTotalPay: BuiltValueNullFieldError.checkNotNull(
                  maxTotalPay, r'GRideInput', 'maxTotalPay'),
              totalPay: BuiltValueNullFieldError.checkNotNull(
                  totalPay, r'GRideInput', 'totalPay'),
              amountCashedOut: amountCashedOut.build(),
              departureTime: _departureTime?.build(),
              arrivalTime: arrivalTime.build(),
              allowedBehDesc: allowedBehDesc,
              exactPickupLocation: exactPickupLocation,
              routeIndex: routeIndex,
              mpesaReceiptNumber: BuiltValueNullFieldError.checkNotNull(mpesaReceiptNumber, r'GRideInput', 'mpesaReceiptNumber'),
              transactionDate: transactionDate.build(),
              merchantRequestId: BuiltValueNullFieldError.checkNotNull(merchantRequestId, r'GRideInput', 'merchantRequestId'),
              checkoutRequestId: BuiltValueNullFieldError.checkNotNull(checkoutRequestId, r'GRideInput', 'checkoutRequestId'),
              compensatedFromPassengerCancel: BuiltValueNullFieldError.checkNotNull(compensatedFromPassengerCancel, r'GRideInput', 'compensatedFromPassengerCancel'),
              driverPaymentTime: _driverPaymentTime?.build(),
              exactDropOffLocation: exactDropOffLocation,
              isRecurring: isRecurring,
              carId: BuiltValueNullFieldError.checkNotNull(carId, r'GRideInput', 'carId'),
              car: _car?.build(),
              users: _users?.build(),
              transactions: _transactions?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'departureDate';
        departureDate.build();

        _$failedField = 'seat';
        _seat?.build();

        _$failedField = 'amountCashedOut';
        amountCashedOut.build();
        _$failedField = 'departureTime';
        _departureTime?.build();
        _$failedField = 'arrivalTime';
        arrivalTime.build();

        _$failedField = 'transactionDate';
        transactionDate.build();

        _$failedField = 'driverPaymentTime';
        _driverPaymentTime?.build();

        _$failedField = 'car';
        _car?.build();
        _$failedField = 'users';
        _users?.build();
        _$failedField = 'transactions';
        _transactions?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GRideInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GSafiriCarUserInput extends GSafiriCarUserInput {
  @override
  final String firstName;
  @override
  final String lastName;
  @override
  final String nationalId;
  @override
  final BuiltList<GCarInput> ownedCars;
  @override
  final String createdBy;
  @override
  final String profilePictureDataUrl;
  @override
  final String? referalCode;
  @override
  final GIdentificationDocumentInput? identificationDocument;
  @override
  final GDateTime? createdOn;
  @override
  final String? lastModifiedBy;
  @override
  final GDateTime? lastModifiedOn;
  @override
  final bool isDeleted;
  @override
  final GDateTime? deletedOn;
  @override
  final bool isActive;
  @override
  final String? refreshToken;
  @override
  final String? role;
  @override
  final GDateTime? refreshTokenExpiryTime;
  @override
  final int totalRating;
  @override
  final double averageRating;
  @override
  final int tripsCreated;
  @override
  final int tripsCompleted;
  @override
  final int tripsCancelled;
  @override
  final bool isVerified;
  @override
  final String? aboutMe;
  @override
  final double loyaltyPoints;
  @override
  final GLocationInput? location;
  @override
  final GDeviceInput? device;
  @override
  final BuiltList<GUserRidesInput> rides;
  @override
  final BuiltList<GUserRatingInput> userRatings;
  @override
  final BuiltList<GFrequentRouteInput> frequentRoutes;
  @override
  final BuiltList<GSafiriCarUserInput>? userReferals;
  @override
  final String? id;
  @override
  final String? userName;
  @override
  final String? normalizedUserName;
  @override
  final String? email;
  @override
  final String? normalizedEmail;
  @override
  final bool emailConfirmed;
  @override
  final String? passwordHash;
  @override
  final String? securityStamp;
  @override
  final String? concurrencyStamp;
  @override
  final String? phoneNumber;
  @override
  final bool phoneNumberConfirmed;
  @override
  final bool twoFactorEnabled;
  @override
  final GDateTime? lockoutEnd;
  @override
  final bool lockoutEnabled;
  @override
  final int accessFailedCount;

  factory _$GSafiriCarUserInput(
          [void Function(GSafiriCarUserInputBuilder)? updates]) =>
      (new GSafiriCarUserInputBuilder()..update(updates))._build();

  _$GSafiriCarUserInput._(
      {required this.firstName,
      required this.lastName,
      required this.nationalId,
      required this.ownedCars,
      required this.createdBy,
      required this.profilePictureDataUrl,
      this.referalCode,
      this.identificationDocument,
      this.createdOn,
      this.lastModifiedBy,
      this.lastModifiedOn,
      required this.isDeleted,
      this.deletedOn,
      required this.isActive,
      this.refreshToken,
      this.role,
      this.refreshTokenExpiryTime,
      required this.totalRating,
      required this.averageRating,
      required this.tripsCreated,
      required this.tripsCompleted,
      required this.tripsCancelled,
      required this.isVerified,
      this.aboutMe,
      required this.loyaltyPoints,
      this.location,
      this.device,
      required this.rides,
      required this.userRatings,
      required this.frequentRoutes,
      this.userReferals,
      this.id,
      this.userName,
      this.normalizedUserName,
      this.email,
      this.normalizedEmail,
      required this.emailConfirmed,
      this.passwordHash,
      this.securityStamp,
      this.concurrencyStamp,
      this.phoneNumber,
      required this.phoneNumberConfirmed,
      required this.twoFactorEnabled,
      this.lockoutEnd,
      required this.lockoutEnabled,
      required this.accessFailedCount})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        firstName, r'GSafiriCarUserInput', 'firstName');
    BuiltValueNullFieldError.checkNotNull(
        lastName, r'GSafiriCarUserInput', 'lastName');
    BuiltValueNullFieldError.checkNotNull(
        nationalId, r'GSafiriCarUserInput', 'nationalId');
    BuiltValueNullFieldError.checkNotNull(
        ownedCars, r'GSafiriCarUserInput', 'ownedCars');
    BuiltValueNullFieldError.checkNotNull(
        createdBy, r'GSafiriCarUserInput', 'createdBy');
    BuiltValueNullFieldError.checkNotNull(
        profilePictureDataUrl, r'GSafiriCarUserInput', 'profilePictureDataUrl');
    BuiltValueNullFieldError.checkNotNull(
        isDeleted, r'GSafiriCarUserInput', 'isDeleted');
    BuiltValueNullFieldError.checkNotNull(
        isActive, r'GSafiriCarUserInput', 'isActive');
    BuiltValueNullFieldError.checkNotNull(
        totalRating, r'GSafiriCarUserInput', 'totalRating');
    BuiltValueNullFieldError.checkNotNull(
        averageRating, r'GSafiriCarUserInput', 'averageRating');
    BuiltValueNullFieldError.checkNotNull(
        tripsCreated, r'GSafiriCarUserInput', 'tripsCreated');
    BuiltValueNullFieldError.checkNotNull(
        tripsCompleted, r'GSafiriCarUserInput', 'tripsCompleted');
    BuiltValueNullFieldError.checkNotNull(
        tripsCancelled, r'GSafiriCarUserInput', 'tripsCancelled');
    BuiltValueNullFieldError.checkNotNull(
        isVerified, r'GSafiriCarUserInput', 'isVerified');
    BuiltValueNullFieldError.checkNotNull(
        loyaltyPoints, r'GSafiriCarUserInput', 'loyaltyPoints');
    BuiltValueNullFieldError.checkNotNull(
        rides, r'GSafiriCarUserInput', 'rides');
    BuiltValueNullFieldError.checkNotNull(
        userRatings, r'GSafiriCarUserInput', 'userRatings');
    BuiltValueNullFieldError.checkNotNull(
        frequentRoutes, r'GSafiriCarUserInput', 'frequentRoutes');
    BuiltValueNullFieldError.checkNotNull(
        emailConfirmed, r'GSafiriCarUserInput', 'emailConfirmed');
    BuiltValueNullFieldError.checkNotNull(
        phoneNumberConfirmed, r'GSafiriCarUserInput', 'phoneNumberConfirmed');
    BuiltValueNullFieldError.checkNotNull(
        twoFactorEnabled, r'GSafiriCarUserInput', 'twoFactorEnabled');
    BuiltValueNullFieldError.checkNotNull(
        lockoutEnabled, r'GSafiriCarUserInput', 'lockoutEnabled');
    BuiltValueNullFieldError.checkNotNull(
        accessFailedCount, r'GSafiriCarUserInput', 'accessFailedCount');
  }

  @override
  GSafiriCarUserInput rebuild(
          void Function(GSafiriCarUserInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GSafiriCarUserInputBuilder toBuilder() =>
      new GSafiriCarUserInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GSafiriCarUserInput &&
        firstName == other.firstName &&
        lastName == other.lastName &&
        nationalId == other.nationalId &&
        ownedCars == other.ownedCars &&
        createdBy == other.createdBy &&
        profilePictureDataUrl == other.profilePictureDataUrl &&
        referalCode == other.referalCode &&
        identificationDocument == other.identificationDocument &&
        createdOn == other.createdOn &&
        lastModifiedBy == other.lastModifiedBy &&
        lastModifiedOn == other.lastModifiedOn &&
        isDeleted == other.isDeleted &&
        deletedOn == other.deletedOn &&
        isActive == other.isActive &&
        refreshToken == other.refreshToken &&
        role == other.role &&
        refreshTokenExpiryTime == other.refreshTokenExpiryTime &&
        totalRating == other.totalRating &&
        averageRating == other.averageRating &&
        tripsCreated == other.tripsCreated &&
        tripsCompleted == other.tripsCompleted &&
        tripsCancelled == other.tripsCancelled &&
        isVerified == other.isVerified &&
        aboutMe == other.aboutMe &&
        loyaltyPoints == other.loyaltyPoints &&
        location == other.location &&
        device == other.device &&
        rides == other.rides &&
        userRatings == other.userRatings &&
        frequentRoutes == other.frequentRoutes &&
        userReferals == other.userReferals &&
        id == other.id &&
        userName == other.userName &&
        normalizedUserName == other.normalizedUserName &&
        email == other.email &&
        normalizedEmail == other.normalizedEmail &&
        emailConfirmed == other.emailConfirmed &&
        passwordHash == other.passwordHash &&
        securityStamp == other.securityStamp &&
        concurrencyStamp == other.concurrencyStamp &&
        phoneNumber == other.phoneNumber &&
        phoneNumberConfirmed == other.phoneNumberConfirmed &&
        twoFactorEnabled == other.twoFactorEnabled &&
        lockoutEnd == other.lockoutEnd &&
        lockoutEnabled == other.lockoutEnabled &&
        accessFailedCount == other.accessFailedCount;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, firstName.hashCode);
    _$hash = $jc(_$hash, lastName.hashCode);
    _$hash = $jc(_$hash, nationalId.hashCode);
    _$hash = $jc(_$hash, ownedCars.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, profilePictureDataUrl.hashCode);
    _$hash = $jc(_$hash, referalCode.hashCode);
    _$hash = $jc(_$hash, identificationDocument.hashCode);
    _$hash = $jc(_$hash, createdOn.hashCode);
    _$hash = $jc(_$hash, lastModifiedBy.hashCode);
    _$hash = $jc(_$hash, lastModifiedOn.hashCode);
    _$hash = $jc(_$hash, isDeleted.hashCode);
    _$hash = $jc(_$hash, deletedOn.hashCode);
    _$hash = $jc(_$hash, isActive.hashCode);
    _$hash = $jc(_$hash, refreshToken.hashCode);
    _$hash = $jc(_$hash, role.hashCode);
    _$hash = $jc(_$hash, refreshTokenExpiryTime.hashCode);
    _$hash = $jc(_$hash, totalRating.hashCode);
    _$hash = $jc(_$hash, averageRating.hashCode);
    _$hash = $jc(_$hash, tripsCreated.hashCode);
    _$hash = $jc(_$hash, tripsCompleted.hashCode);
    _$hash = $jc(_$hash, tripsCancelled.hashCode);
    _$hash = $jc(_$hash, isVerified.hashCode);
    _$hash = $jc(_$hash, aboutMe.hashCode);
    _$hash = $jc(_$hash, loyaltyPoints.hashCode);
    _$hash = $jc(_$hash, location.hashCode);
    _$hash = $jc(_$hash, device.hashCode);
    _$hash = $jc(_$hash, rides.hashCode);
    _$hash = $jc(_$hash, userRatings.hashCode);
    _$hash = $jc(_$hash, frequentRoutes.hashCode);
    _$hash = $jc(_$hash, userReferals.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, userName.hashCode);
    _$hash = $jc(_$hash, normalizedUserName.hashCode);
    _$hash = $jc(_$hash, email.hashCode);
    _$hash = $jc(_$hash, normalizedEmail.hashCode);
    _$hash = $jc(_$hash, emailConfirmed.hashCode);
    _$hash = $jc(_$hash, passwordHash.hashCode);
    _$hash = $jc(_$hash, securityStamp.hashCode);
    _$hash = $jc(_$hash, concurrencyStamp.hashCode);
    _$hash = $jc(_$hash, phoneNumber.hashCode);
    _$hash = $jc(_$hash, phoneNumberConfirmed.hashCode);
    _$hash = $jc(_$hash, twoFactorEnabled.hashCode);
    _$hash = $jc(_$hash, lockoutEnd.hashCode);
    _$hash = $jc(_$hash, lockoutEnabled.hashCode);
    _$hash = $jc(_$hash, accessFailedCount.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GSafiriCarUserInput')
          ..add('firstName', firstName)
          ..add('lastName', lastName)
          ..add('nationalId', nationalId)
          ..add('ownedCars', ownedCars)
          ..add('createdBy', createdBy)
          ..add('profilePictureDataUrl', profilePictureDataUrl)
          ..add('referalCode', referalCode)
          ..add('identificationDocument', identificationDocument)
          ..add('createdOn', createdOn)
          ..add('lastModifiedBy', lastModifiedBy)
          ..add('lastModifiedOn', lastModifiedOn)
          ..add('isDeleted', isDeleted)
          ..add('deletedOn', deletedOn)
          ..add('isActive', isActive)
          ..add('refreshToken', refreshToken)
          ..add('role', role)
          ..add('refreshTokenExpiryTime', refreshTokenExpiryTime)
          ..add('totalRating', totalRating)
          ..add('averageRating', averageRating)
          ..add('tripsCreated', tripsCreated)
          ..add('tripsCompleted', tripsCompleted)
          ..add('tripsCancelled', tripsCancelled)
          ..add('isVerified', isVerified)
          ..add('aboutMe', aboutMe)
          ..add('loyaltyPoints', loyaltyPoints)
          ..add('location', location)
          ..add('device', device)
          ..add('rides', rides)
          ..add('userRatings', userRatings)
          ..add('frequentRoutes', frequentRoutes)
          ..add('userReferals', userReferals)
          ..add('id', id)
          ..add('userName', userName)
          ..add('normalizedUserName', normalizedUserName)
          ..add('email', email)
          ..add('normalizedEmail', normalizedEmail)
          ..add('emailConfirmed', emailConfirmed)
          ..add('passwordHash', passwordHash)
          ..add('securityStamp', securityStamp)
          ..add('concurrencyStamp', concurrencyStamp)
          ..add('phoneNumber', phoneNumber)
          ..add('phoneNumberConfirmed', phoneNumberConfirmed)
          ..add('twoFactorEnabled', twoFactorEnabled)
          ..add('lockoutEnd', lockoutEnd)
          ..add('lockoutEnabled', lockoutEnabled)
          ..add('accessFailedCount', accessFailedCount))
        .toString();
  }
}

class GSafiriCarUserInputBuilder
    implements Builder<GSafiriCarUserInput, GSafiriCarUserInputBuilder> {
  _$GSafiriCarUserInput? _$v;

  String? _firstName;
  String? get firstName => _$this._firstName;
  set firstName(String? firstName) => _$this._firstName = firstName;

  String? _lastName;
  String? get lastName => _$this._lastName;
  set lastName(String? lastName) => _$this._lastName = lastName;

  String? _nationalId;
  String? get nationalId => _$this._nationalId;
  set nationalId(String? nationalId) => _$this._nationalId = nationalId;

  ListBuilder<GCarInput>? _ownedCars;
  ListBuilder<GCarInput> get ownedCars =>
      _$this._ownedCars ??= new ListBuilder<GCarInput>();
  set ownedCars(ListBuilder<GCarInput>? ownedCars) =>
      _$this._ownedCars = ownedCars;

  String? _createdBy;
  String? get createdBy => _$this._createdBy;
  set createdBy(String? createdBy) => _$this._createdBy = createdBy;

  String? _profilePictureDataUrl;
  String? get profilePictureDataUrl => _$this._profilePictureDataUrl;
  set profilePictureDataUrl(String? profilePictureDataUrl) =>
      _$this._profilePictureDataUrl = profilePictureDataUrl;

  String? _referalCode;
  String? get referalCode => _$this._referalCode;
  set referalCode(String? referalCode) => _$this._referalCode = referalCode;

  GIdentificationDocumentInputBuilder? _identificationDocument;
  GIdentificationDocumentInputBuilder get identificationDocument =>
      _$this._identificationDocument ??=
          new GIdentificationDocumentInputBuilder();
  set identificationDocument(
          GIdentificationDocumentInputBuilder? identificationDocument) =>
      _$this._identificationDocument = identificationDocument;

  GDateTimeBuilder? _createdOn;
  GDateTimeBuilder get createdOn =>
      _$this._createdOn ??= new GDateTimeBuilder();
  set createdOn(GDateTimeBuilder? createdOn) => _$this._createdOn = createdOn;

  String? _lastModifiedBy;
  String? get lastModifiedBy => _$this._lastModifiedBy;
  set lastModifiedBy(String? lastModifiedBy) =>
      _$this._lastModifiedBy = lastModifiedBy;

  GDateTimeBuilder? _lastModifiedOn;
  GDateTimeBuilder get lastModifiedOn =>
      _$this._lastModifiedOn ??= new GDateTimeBuilder();
  set lastModifiedOn(GDateTimeBuilder? lastModifiedOn) =>
      _$this._lastModifiedOn = lastModifiedOn;

  bool? _isDeleted;
  bool? get isDeleted => _$this._isDeleted;
  set isDeleted(bool? isDeleted) => _$this._isDeleted = isDeleted;

  GDateTimeBuilder? _deletedOn;
  GDateTimeBuilder get deletedOn =>
      _$this._deletedOn ??= new GDateTimeBuilder();
  set deletedOn(GDateTimeBuilder? deletedOn) => _$this._deletedOn = deletedOn;

  bool? _isActive;
  bool? get isActive => _$this._isActive;
  set isActive(bool? isActive) => _$this._isActive = isActive;

  String? _refreshToken;
  String? get refreshToken => _$this._refreshToken;
  set refreshToken(String? refreshToken) => _$this._refreshToken = refreshToken;

  String? _role;
  String? get role => _$this._role;
  set role(String? role) => _$this._role = role;

  GDateTimeBuilder? _refreshTokenExpiryTime;
  GDateTimeBuilder get refreshTokenExpiryTime =>
      _$this._refreshTokenExpiryTime ??= new GDateTimeBuilder();
  set refreshTokenExpiryTime(GDateTimeBuilder? refreshTokenExpiryTime) =>
      _$this._refreshTokenExpiryTime = refreshTokenExpiryTime;

  int? _totalRating;
  int? get totalRating => _$this._totalRating;
  set totalRating(int? totalRating) => _$this._totalRating = totalRating;

  double? _averageRating;
  double? get averageRating => _$this._averageRating;
  set averageRating(double? averageRating) =>
      _$this._averageRating = averageRating;

  int? _tripsCreated;
  int? get tripsCreated => _$this._tripsCreated;
  set tripsCreated(int? tripsCreated) => _$this._tripsCreated = tripsCreated;

  int? _tripsCompleted;
  int? get tripsCompleted => _$this._tripsCompleted;
  set tripsCompleted(int? tripsCompleted) =>
      _$this._tripsCompleted = tripsCompleted;

  int? _tripsCancelled;
  int? get tripsCancelled => _$this._tripsCancelled;
  set tripsCancelled(int? tripsCancelled) =>
      _$this._tripsCancelled = tripsCancelled;

  bool? _isVerified;
  bool? get isVerified => _$this._isVerified;
  set isVerified(bool? isVerified) => _$this._isVerified = isVerified;

  String? _aboutMe;
  String? get aboutMe => _$this._aboutMe;
  set aboutMe(String? aboutMe) => _$this._aboutMe = aboutMe;

  double? _loyaltyPoints;
  double? get loyaltyPoints => _$this._loyaltyPoints;
  set loyaltyPoints(double? loyaltyPoints) =>
      _$this._loyaltyPoints = loyaltyPoints;

  GLocationInputBuilder? _location;
  GLocationInputBuilder get location =>
      _$this._location ??= new GLocationInputBuilder();
  set location(GLocationInputBuilder? location) => _$this._location = location;

  GDeviceInputBuilder? _device;
  GDeviceInputBuilder get device =>
      _$this._device ??= new GDeviceInputBuilder();
  set device(GDeviceInputBuilder? device) => _$this._device = device;

  ListBuilder<GUserRidesInput>? _rides;
  ListBuilder<GUserRidesInput> get rides =>
      _$this._rides ??= new ListBuilder<GUserRidesInput>();
  set rides(ListBuilder<GUserRidesInput>? rides) => _$this._rides = rides;

  ListBuilder<GUserRatingInput>? _userRatings;
  ListBuilder<GUserRatingInput> get userRatings =>
      _$this._userRatings ??= new ListBuilder<GUserRatingInput>();
  set userRatings(ListBuilder<GUserRatingInput>? userRatings) =>
      _$this._userRatings = userRatings;

  ListBuilder<GFrequentRouteInput>? _frequentRoutes;
  ListBuilder<GFrequentRouteInput> get frequentRoutes =>
      _$this._frequentRoutes ??= new ListBuilder<GFrequentRouteInput>();
  set frequentRoutes(ListBuilder<GFrequentRouteInput>? frequentRoutes) =>
      _$this._frequentRoutes = frequentRoutes;

  ListBuilder<GSafiriCarUserInput>? _userReferals;
  ListBuilder<GSafiriCarUserInput> get userReferals =>
      _$this._userReferals ??= new ListBuilder<GSafiriCarUserInput>();
  set userReferals(ListBuilder<GSafiriCarUserInput>? userReferals) =>
      _$this._userReferals = userReferals;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _userName;
  String? get userName => _$this._userName;
  set userName(String? userName) => _$this._userName = userName;

  String? _normalizedUserName;
  String? get normalizedUserName => _$this._normalizedUserName;
  set normalizedUserName(String? normalizedUserName) =>
      _$this._normalizedUserName = normalizedUserName;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  String? _normalizedEmail;
  String? get normalizedEmail => _$this._normalizedEmail;
  set normalizedEmail(String? normalizedEmail) =>
      _$this._normalizedEmail = normalizedEmail;

  bool? _emailConfirmed;
  bool? get emailConfirmed => _$this._emailConfirmed;
  set emailConfirmed(bool? emailConfirmed) =>
      _$this._emailConfirmed = emailConfirmed;

  String? _passwordHash;
  String? get passwordHash => _$this._passwordHash;
  set passwordHash(String? passwordHash) => _$this._passwordHash = passwordHash;

  String? _securityStamp;
  String? get securityStamp => _$this._securityStamp;
  set securityStamp(String? securityStamp) =>
      _$this._securityStamp = securityStamp;

  String? _concurrencyStamp;
  String? get concurrencyStamp => _$this._concurrencyStamp;
  set concurrencyStamp(String? concurrencyStamp) =>
      _$this._concurrencyStamp = concurrencyStamp;

  String? _phoneNumber;
  String? get phoneNumber => _$this._phoneNumber;
  set phoneNumber(String? phoneNumber) => _$this._phoneNumber = phoneNumber;

  bool? _phoneNumberConfirmed;
  bool? get phoneNumberConfirmed => _$this._phoneNumberConfirmed;
  set phoneNumberConfirmed(bool? phoneNumberConfirmed) =>
      _$this._phoneNumberConfirmed = phoneNumberConfirmed;

  bool? _twoFactorEnabled;
  bool? get twoFactorEnabled => _$this._twoFactorEnabled;
  set twoFactorEnabled(bool? twoFactorEnabled) =>
      _$this._twoFactorEnabled = twoFactorEnabled;

  GDateTimeBuilder? _lockoutEnd;
  GDateTimeBuilder get lockoutEnd =>
      _$this._lockoutEnd ??= new GDateTimeBuilder();
  set lockoutEnd(GDateTimeBuilder? lockoutEnd) =>
      _$this._lockoutEnd = lockoutEnd;

  bool? _lockoutEnabled;
  bool? get lockoutEnabled => _$this._lockoutEnabled;
  set lockoutEnabled(bool? lockoutEnabled) =>
      _$this._lockoutEnabled = lockoutEnabled;

  int? _accessFailedCount;
  int? get accessFailedCount => _$this._accessFailedCount;
  set accessFailedCount(int? accessFailedCount) =>
      _$this._accessFailedCount = accessFailedCount;

  GSafiriCarUserInputBuilder();

  GSafiriCarUserInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _firstName = $v.firstName;
      _lastName = $v.lastName;
      _nationalId = $v.nationalId;
      _ownedCars = $v.ownedCars.toBuilder();
      _createdBy = $v.createdBy;
      _profilePictureDataUrl = $v.profilePictureDataUrl;
      _referalCode = $v.referalCode;
      _identificationDocument = $v.identificationDocument?.toBuilder();
      _createdOn = $v.createdOn?.toBuilder();
      _lastModifiedBy = $v.lastModifiedBy;
      _lastModifiedOn = $v.lastModifiedOn?.toBuilder();
      _isDeleted = $v.isDeleted;
      _deletedOn = $v.deletedOn?.toBuilder();
      _isActive = $v.isActive;
      _refreshToken = $v.refreshToken;
      _role = $v.role;
      _refreshTokenExpiryTime = $v.refreshTokenExpiryTime?.toBuilder();
      _totalRating = $v.totalRating;
      _averageRating = $v.averageRating;
      _tripsCreated = $v.tripsCreated;
      _tripsCompleted = $v.tripsCompleted;
      _tripsCancelled = $v.tripsCancelled;
      _isVerified = $v.isVerified;
      _aboutMe = $v.aboutMe;
      _loyaltyPoints = $v.loyaltyPoints;
      _location = $v.location?.toBuilder();
      _device = $v.device?.toBuilder();
      _rides = $v.rides.toBuilder();
      _userRatings = $v.userRatings.toBuilder();
      _frequentRoutes = $v.frequentRoutes.toBuilder();
      _userReferals = $v.userReferals?.toBuilder();
      _id = $v.id;
      _userName = $v.userName;
      _normalizedUserName = $v.normalizedUserName;
      _email = $v.email;
      _normalizedEmail = $v.normalizedEmail;
      _emailConfirmed = $v.emailConfirmed;
      _passwordHash = $v.passwordHash;
      _securityStamp = $v.securityStamp;
      _concurrencyStamp = $v.concurrencyStamp;
      _phoneNumber = $v.phoneNumber;
      _phoneNumberConfirmed = $v.phoneNumberConfirmed;
      _twoFactorEnabled = $v.twoFactorEnabled;
      _lockoutEnd = $v.lockoutEnd?.toBuilder();
      _lockoutEnabled = $v.lockoutEnabled;
      _accessFailedCount = $v.accessFailedCount;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GSafiriCarUserInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GSafiriCarUserInput;
  }

  @override
  void update(void Function(GSafiriCarUserInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GSafiriCarUserInput build() => _build();

  _$GSafiriCarUserInput _build() {
    _$GSafiriCarUserInput _$result;
    try {
      _$result = _$v ??
          new _$GSafiriCarUserInput._(
              firstName: BuiltValueNullFieldError.checkNotNull(
                  firstName, r'GSafiriCarUserInput', 'firstName'),
              lastName: BuiltValueNullFieldError.checkNotNull(
                  lastName, r'GSafiriCarUserInput', 'lastName'),
              nationalId: BuiltValueNullFieldError.checkNotNull(
                  nationalId, r'GSafiriCarUserInput', 'nationalId'),
              ownedCars: ownedCars.build(),
              createdBy: BuiltValueNullFieldError.checkNotNull(
                  createdBy, r'GSafiriCarUserInput', 'createdBy'),
              profilePictureDataUrl: BuiltValueNullFieldError.checkNotNull(
                  profilePictureDataUrl, r'GSafiriCarUserInput', 'profilePictureDataUrl'),
              referalCode: referalCode,
              identificationDocument: _identificationDocument?.build(),
              createdOn: _createdOn?.build(),
              lastModifiedBy: lastModifiedBy,
              lastModifiedOn: _lastModifiedOn?.build(),
              isDeleted: BuiltValueNullFieldError.checkNotNull(
                  isDeleted, r'GSafiriCarUserInput', 'isDeleted'),
              deletedOn: _deletedOn?.build(),
              isActive: BuiltValueNullFieldError.checkNotNull(
                  isActive, r'GSafiriCarUserInput', 'isActive'),
              refreshToken: refreshToken,
              role: role,
              refreshTokenExpiryTime: _refreshTokenExpiryTime?.build(),
              totalRating: BuiltValueNullFieldError.checkNotNull(
                  totalRating, r'GSafiriCarUserInput', 'totalRating'),
              averageRating: BuiltValueNullFieldError.checkNotNull(averageRating, r'GSafiriCarUserInput', 'averageRating'),
              tripsCreated: BuiltValueNullFieldError.checkNotNull(tripsCreated, r'GSafiriCarUserInput', 'tripsCreated'),
              tripsCompleted: BuiltValueNullFieldError.checkNotNull(tripsCompleted, r'GSafiriCarUserInput', 'tripsCompleted'),
              tripsCancelled: BuiltValueNullFieldError.checkNotNull(tripsCancelled, r'GSafiriCarUserInput', 'tripsCancelled'),
              isVerified: BuiltValueNullFieldError.checkNotNull(isVerified, r'GSafiriCarUserInput', 'isVerified'),
              aboutMe: aboutMe,
              loyaltyPoints: BuiltValueNullFieldError.checkNotNull(loyaltyPoints, r'GSafiriCarUserInput', 'loyaltyPoints'),
              location: _location?.build(),
              device: _device?.build(),
              rides: rides.build(),
              userRatings: userRatings.build(),
              frequentRoutes: frequentRoutes.build(),
              userReferals: _userReferals?.build(),
              id: id,
              userName: userName,
              normalizedUserName: normalizedUserName,
              email: email,
              normalizedEmail: normalizedEmail,
              emailConfirmed: BuiltValueNullFieldError.checkNotNull(emailConfirmed, r'GSafiriCarUserInput', 'emailConfirmed'),
              passwordHash: passwordHash,
              securityStamp: securityStamp,
              concurrencyStamp: concurrencyStamp,
              phoneNumber: phoneNumber,
              phoneNumberConfirmed: BuiltValueNullFieldError.checkNotNull(phoneNumberConfirmed, r'GSafiriCarUserInput', 'phoneNumberConfirmed'),
              twoFactorEnabled: BuiltValueNullFieldError.checkNotNull(twoFactorEnabled, r'GSafiriCarUserInput', 'twoFactorEnabled'),
              lockoutEnd: _lockoutEnd?.build(),
              lockoutEnabled: BuiltValueNullFieldError.checkNotNull(lockoutEnabled, r'GSafiriCarUserInput', 'lockoutEnabled'),
              accessFailedCount: BuiltValueNullFieldError.checkNotNull(accessFailedCount, r'GSafiriCarUserInput', 'accessFailedCount'));
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'ownedCars';
        ownedCars.build();

        _$failedField = 'identificationDocument';
        _identificationDocument?.build();
        _$failedField = 'createdOn';
        _createdOn?.build();

        _$failedField = 'lastModifiedOn';
        _lastModifiedOn?.build();

        _$failedField = 'deletedOn';
        _deletedOn?.build();

        _$failedField = 'refreshTokenExpiryTime';
        _refreshTokenExpiryTime?.build();

        _$failedField = 'location';
        _location?.build();
        _$failedField = 'device';
        _device?.build();
        _$failedField = 'rides';
        rides.build();
        _$failedField = 'userRatings';
        userRatings.build();
        _$failedField = 'frequentRoutes';
        frequentRoutes.build();
        _$failedField = 'userReferals';
        _userReferals?.build();

        _$failedField = 'lockoutEnd';
        _lockoutEnd?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GSafiriCarUserInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GByte extends GByte {
  @override
  final String value;

  factory _$GByte([void Function(GByteBuilder)? updates]) =>
      (new GByteBuilder()..update(updates))._build();

  _$GByte._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, r'GByte', 'value');
  }

  @override
  GByte rebuild(void Function(GByteBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GByteBuilder toBuilder() => new GByteBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GByte && value == other.value;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, value.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GByte')..add('value', value))
        .toString();
  }
}

class GByteBuilder implements Builder<GByte, GByteBuilder> {
  _$GByte? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GByteBuilder();

  GByteBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GByte other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GByte;
  }

  @override
  void update(void Function(GByteBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GByte build() => _build();

  _$GByte _build() {
    final _$result = _$v ??
        new _$GByte._(
            value: BuiltValueNullFieldError.checkNotNull(
                value, r'GByte', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GColorCustomInput extends GColorCustomInput {
  @override
  final String r;
  @override
  final String g;
  @override
  final String b;
  @override
  final String a;
  @override
  final int id;

  factory _$GColorCustomInput(
          [void Function(GColorCustomInputBuilder)? updates]) =>
      (new GColorCustomInputBuilder()..update(updates))._build();

  _$GColorCustomInput._(
      {required this.r,
      required this.g,
      required this.b,
      required this.a,
      required this.id})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(r, r'GColorCustomInput', 'r');
    BuiltValueNullFieldError.checkNotNull(g, r'GColorCustomInput', 'g');
    BuiltValueNullFieldError.checkNotNull(b, r'GColorCustomInput', 'b');
    BuiltValueNullFieldError.checkNotNull(a, r'GColorCustomInput', 'a');
    BuiltValueNullFieldError.checkNotNull(id, r'GColorCustomInput', 'id');
  }

  @override
  GColorCustomInput rebuild(void Function(GColorCustomInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GColorCustomInputBuilder toBuilder() =>
      new GColorCustomInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GColorCustomInput &&
        r == other.r &&
        g == other.g &&
        b == other.b &&
        a == other.a &&
        id == other.id;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, r.hashCode);
    _$hash = $jc(_$hash, g.hashCode);
    _$hash = $jc(_$hash, b.hashCode);
    _$hash = $jc(_$hash, a.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GColorCustomInput')
          ..add('r', r)
          ..add('g', g)
          ..add('b', b)
          ..add('a', a)
          ..add('id', id))
        .toString();
  }
}

class GColorCustomInputBuilder
    implements Builder<GColorCustomInput, GColorCustomInputBuilder> {
  _$GColorCustomInput? _$v;

  String? _r;
  String? get r => _$this._r;
  set r(String? r) => _$this._r = r;

  String? _g;
  String? get g => _$this._g;
  set g(String? g) => _$this._g = g;

  String? _b;
  String? get b => _$this._b;
  set b(String? b) => _$this._b = b;

  String? _a;
  String? get a => _$this._a;
  set a(String? a) => _$this._a = a;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  GColorCustomInputBuilder();

  GColorCustomInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _r = $v.r;
      _g = $v.g;
      _b = $v.b;
      _a = $v.a;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GColorCustomInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GColorCustomInput;
  }

  @override
  void update(void Function(GColorCustomInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GColorCustomInput build() => _build();

  _$GColorCustomInput _build() {
    final _$result = _$v ??
        new _$GColorCustomInput._(
            r: BuiltValueNullFieldError.checkNotNull(
                r, r'GColorCustomInput', 'r'),
            g: BuiltValueNullFieldError.checkNotNull(
                g, r'GColorCustomInput', 'g'),
            b: BuiltValueNullFieldError.checkNotNull(
                b, r'GColorCustomInput', 'b'),
            a: BuiltValueNullFieldError.checkNotNull(
                a, r'GColorCustomInput', 'a'),
            id: BuiltValueNullFieldError.checkNotNull(
                id, r'GColorCustomInput', 'id'));
    replace(_$result);
    return _$result;
  }
}

class _$GUserRoleModelInput extends GUserRoleModelInput {
  @override
  final String roleName;
  @override
  final String roleDescription;
  @override
  final bool selected;

  factory _$GUserRoleModelInput(
          [void Function(GUserRoleModelInputBuilder)? updates]) =>
      (new GUserRoleModelInputBuilder()..update(updates))._build();

  _$GUserRoleModelInput._(
      {required this.roleName,
      required this.roleDescription,
      required this.selected})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        roleName, r'GUserRoleModelInput', 'roleName');
    BuiltValueNullFieldError.checkNotNull(
        roleDescription, r'GUserRoleModelInput', 'roleDescription');
    BuiltValueNullFieldError.checkNotNull(
        selected, r'GUserRoleModelInput', 'selected');
  }

  @override
  GUserRoleModelInput rebuild(
          void Function(GUserRoleModelInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserRoleModelInputBuilder toBuilder() =>
      new GUserRoleModelInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserRoleModelInput &&
        roleName == other.roleName &&
        roleDescription == other.roleDescription &&
        selected == other.selected;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, roleName.hashCode);
    _$hash = $jc(_$hash, roleDescription.hashCode);
    _$hash = $jc(_$hash, selected.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUserRoleModelInput')
          ..add('roleName', roleName)
          ..add('roleDescription', roleDescription)
          ..add('selected', selected))
        .toString();
  }
}

class GUserRoleModelInputBuilder
    implements Builder<GUserRoleModelInput, GUserRoleModelInputBuilder> {
  _$GUserRoleModelInput? _$v;

  String? _roleName;
  String? get roleName => _$this._roleName;
  set roleName(String? roleName) => _$this._roleName = roleName;

  String? _roleDescription;
  String? get roleDescription => _$this._roleDescription;
  set roleDescription(String? roleDescription) =>
      _$this._roleDescription = roleDescription;

  bool? _selected;
  bool? get selected => _$this._selected;
  set selected(bool? selected) => _$this._selected = selected;

  GUserRoleModelInputBuilder();

  GUserRoleModelInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _roleName = $v.roleName;
      _roleDescription = $v.roleDescription;
      _selected = $v.selected;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserRoleModelInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserRoleModelInput;
  }

  @override
  void update(void Function(GUserRoleModelInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUserRoleModelInput build() => _build();

  _$GUserRoleModelInput _build() {
    final _$result = _$v ??
        new _$GUserRoleModelInput._(
            roleName: BuiltValueNullFieldError.checkNotNull(
                roleName, r'GUserRoleModelInput', 'roleName'),
            roleDescription: BuiltValueNullFieldError.checkNotNull(
                roleDescription, r'GUserRoleModelInput', 'roleDescription'),
            selected: BuiltValueNullFieldError.checkNotNull(
                selected, r'GUserRoleModelInput', 'selected'));
    replace(_$result);
    return _$result;
  }
}

class _$GDeviceDtoInput extends GDeviceDtoInput {
  @override
  final String deviceRegToken;

  factory _$GDeviceDtoInput([void Function(GDeviceDtoInputBuilder)? updates]) =>
      (new GDeviceDtoInputBuilder()..update(updates))._build();

  _$GDeviceDtoInput._({required this.deviceRegToken}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        deviceRegToken, r'GDeviceDtoInput', 'deviceRegToken');
  }

  @override
  GDeviceDtoInput rebuild(void Function(GDeviceDtoInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GDeviceDtoInputBuilder toBuilder() =>
      new GDeviceDtoInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GDeviceDtoInput && deviceRegToken == other.deviceRegToken;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, deviceRegToken.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GDeviceDtoInput')
          ..add('deviceRegToken', deviceRegToken))
        .toString();
  }
}

class GDeviceDtoInputBuilder
    implements Builder<GDeviceDtoInput, GDeviceDtoInputBuilder> {
  _$GDeviceDtoInput? _$v;

  String? _deviceRegToken;
  String? get deviceRegToken => _$this._deviceRegToken;
  set deviceRegToken(String? deviceRegToken) =>
      _$this._deviceRegToken = deviceRegToken;

  GDeviceDtoInputBuilder();

  GDeviceDtoInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _deviceRegToken = $v.deviceRegToken;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GDeviceDtoInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GDeviceDtoInput;
  }

  @override
  void update(void Function(GDeviceDtoInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GDeviceDtoInput build() => _build();

  _$GDeviceDtoInput _build() {
    final _$result = _$v ??
        new _$GDeviceDtoInput._(
            deviceRegToken: BuiltValueNullFieldError.checkNotNull(
                deviceRegToken, r'GDeviceDtoInput', 'deviceRegToken'));
    replace(_$result);
    return _$result;
  }
}

class _$GLocationDtoInput extends GLocationDtoInput {
  @override
  final String town;
  @override
  final GCountryDtoInput countryDto;

  factory _$GLocationDtoInput(
          [void Function(GLocationDtoInputBuilder)? updates]) =>
      (new GLocationDtoInputBuilder()..update(updates))._build();

  _$GLocationDtoInput._({required this.town, required this.countryDto})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(town, r'GLocationDtoInput', 'town');
    BuiltValueNullFieldError.checkNotNull(
        countryDto, r'GLocationDtoInput', 'countryDto');
  }

  @override
  GLocationDtoInput rebuild(void Function(GLocationDtoInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GLocationDtoInputBuilder toBuilder() =>
      new GLocationDtoInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GLocationDtoInput &&
        town == other.town &&
        countryDto == other.countryDto;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, town.hashCode);
    _$hash = $jc(_$hash, countryDto.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GLocationDtoInput')
          ..add('town', town)
          ..add('countryDto', countryDto))
        .toString();
  }
}

class GLocationDtoInputBuilder
    implements Builder<GLocationDtoInput, GLocationDtoInputBuilder> {
  _$GLocationDtoInput? _$v;

  String? _town;
  String? get town => _$this._town;
  set town(String? town) => _$this._town = town;

  GCountryDtoInputBuilder? _countryDto;
  GCountryDtoInputBuilder get countryDto =>
      _$this._countryDto ??= new GCountryDtoInputBuilder();
  set countryDto(GCountryDtoInputBuilder? countryDto) =>
      _$this._countryDto = countryDto;

  GLocationDtoInputBuilder();

  GLocationDtoInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _town = $v.town;
      _countryDto = $v.countryDto.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GLocationDtoInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GLocationDtoInput;
  }

  @override
  void update(void Function(GLocationDtoInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GLocationDtoInput build() => _build();

  _$GLocationDtoInput _build() {
    _$GLocationDtoInput _$result;
    try {
      _$result = _$v ??
          new _$GLocationDtoInput._(
              town: BuiltValueNullFieldError.checkNotNull(
                  town, r'GLocationDtoInput', 'town'),
              countryDto: countryDto.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'countryDto';
        countryDto.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GLocationDtoInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GIdentificationDocumentInput extends GIdentificationDocumentInput {
  @override
  final int id;
  @override
  final String? nationalIdFront;
  @override
  final String? nationalIdRear;
  @override
  final String? drivingLicenceFront;
  @override
  final String? drivingLicenceRear;

  factory _$GIdentificationDocumentInput(
          [void Function(GIdentificationDocumentInputBuilder)? updates]) =>
      (new GIdentificationDocumentInputBuilder()..update(updates))._build();

  _$GIdentificationDocumentInput._(
      {required this.id,
      this.nationalIdFront,
      this.nationalIdRear,
      this.drivingLicenceFront,
      this.drivingLicenceRear})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        id, r'GIdentificationDocumentInput', 'id');
  }

  @override
  GIdentificationDocumentInput rebuild(
          void Function(GIdentificationDocumentInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GIdentificationDocumentInputBuilder toBuilder() =>
      new GIdentificationDocumentInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GIdentificationDocumentInput &&
        id == other.id &&
        nationalIdFront == other.nationalIdFront &&
        nationalIdRear == other.nationalIdRear &&
        drivingLicenceFront == other.drivingLicenceFront &&
        drivingLicenceRear == other.drivingLicenceRear;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, nationalIdFront.hashCode);
    _$hash = $jc(_$hash, nationalIdRear.hashCode);
    _$hash = $jc(_$hash, drivingLicenceFront.hashCode);
    _$hash = $jc(_$hash, drivingLicenceRear.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GIdentificationDocumentInput')
          ..add('id', id)
          ..add('nationalIdFront', nationalIdFront)
          ..add('nationalIdRear', nationalIdRear)
          ..add('drivingLicenceFront', drivingLicenceFront)
          ..add('drivingLicenceRear', drivingLicenceRear))
        .toString();
  }
}

class GIdentificationDocumentInputBuilder
    implements
        Builder<GIdentificationDocumentInput,
            GIdentificationDocumentInputBuilder> {
  _$GIdentificationDocumentInput? _$v;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _nationalIdFront;
  String? get nationalIdFront => _$this._nationalIdFront;
  set nationalIdFront(String? nationalIdFront) =>
      _$this._nationalIdFront = nationalIdFront;

  String? _nationalIdRear;
  String? get nationalIdRear => _$this._nationalIdRear;
  set nationalIdRear(String? nationalIdRear) =>
      _$this._nationalIdRear = nationalIdRear;

  String? _drivingLicenceFront;
  String? get drivingLicenceFront => _$this._drivingLicenceFront;
  set drivingLicenceFront(String? drivingLicenceFront) =>
      _$this._drivingLicenceFront = drivingLicenceFront;

  String? _drivingLicenceRear;
  String? get drivingLicenceRear => _$this._drivingLicenceRear;
  set drivingLicenceRear(String? drivingLicenceRear) =>
      _$this._drivingLicenceRear = drivingLicenceRear;

  GIdentificationDocumentInputBuilder();

  GIdentificationDocumentInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _nationalIdFront = $v.nationalIdFront;
      _nationalIdRear = $v.nationalIdRear;
      _drivingLicenceFront = $v.drivingLicenceFront;
      _drivingLicenceRear = $v.drivingLicenceRear;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GIdentificationDocumentInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GIdentificationDocumentInput;
  }

  @override
  void update(void Function(GIdentificationDocumentInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GIdentificationDocumentInput build() => _build();

  _$GIdentificationDocumentInput _build() {
    final _$result = _$v ??
        new _$GIdentificationDocumentInput._(
            id: BuiltValueNullFieldError.checkNotNull(
                id, r'GIdentificationDocumentInput', 'id'),
            nationalIdFront: nationalIdFront,
            nationalIdRear: nationalIdRear,
            drivingLicenceFront: drivingLicenceFront,
            drivingLicenceRear: drivingLicenceRear);
    replace(_$result);
    return _$result;
  }
}

class _$GSeatInput extends GSeatInput {
  @override
  final String? id;
  @override
  final String? frontLeft;
  @override
  final String? middleLeft;
  @override
  final String? middleCentre;
  @override
  final String? middleRight;
  @override
  final String? backLeft;
  @override
  final String? backCentre;
  @override
  final String? backRight;

  factory _$GSeatInput([void Function(GSeatInputBuilder)? updates]) =>
      (new GSeatInputBuilder()..update(updates))._build();

  _$GSeatInput._(
      {this.id,
      this.frontLeft,
      this.middleLeft,
      this.middleCentre,
      this.middleRight,
      this.backLeft,
      this.backCentre,
      this.backRight})
      : super._();

  @override
  GSeatInput rebuild(void Function(GSeatInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GSeatInputBuilder toBuilder() => new GSeatInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GSeatInput &&
        id == other.id &&
        frontLeft == other.frontLeft &&
        middleLeft == other.middleLeft &&
        middleCentre == other.middleCentre &&
        middleRight == other.middleRight &&
        backLeft == other.backLeft &&
        backCentre == other.backCentre &&
        backRight == other.backRight;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, frontLeft.hashCode);
    _$hash = $jc(_$hash, middleLeft.hashCode);
    _$hash = $jc(_$hash, middleCentre.hashCode);
    _$hash = $jc(_$hash, middleRight.hashCode);
    _$hash = $jc(_$hash, backLeft.hashCode);
    _$hash = $jc(_$hash, backCentre.hashCode);
    _$hash = $jc(_$hash, backRight.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GSeatInput')
          ..add('id', id)
          ..add('frontLeft', frontLeft)
          ..add('middleLeft', middleLeft)
          ..add('middleCentre', middleCentre)
          ..add('middleRight', middleRight)
          ..add('backLeft', backLeft)
          ..add('backCentre', backCentre)
          ..add('backRight', backRight))
        .toString();
  }
}

class GSeatInputBuilder implements Builder<GSeatInput, GSeatInputBuilder> {
  _$GSeatInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _frontLeft;
  String? get frontLeft => _$this._frontLeft;
  set frontLeft(String? frontLeft) => _$this._frontLeft = frontLeft;

  String? _middleLeft;
  String? get middleLeft => _$this._middleLeft;
  set middleLeft(String? middleLeft) => _$this._middleLeft = middleLeft;

  String? _middleCentre;
  String? get middleCentre => _$this._middleCentre;
  set middleCentre(String? middleCentre) => _$this._middleCentre = middleCentre;

  String? _middleRight;
  String? get middleRight => _$this._middleRight;
  set middleRight(String? middleRight) => _$this._middleRight = middleRight;

  String? _backLeft;
  String? get backLeft => _$this._backLeft;
  set backLeft(String? backLeft) => _$this._backLeft = backLeft;

  String? _backCentre;
  String? get backCentre => _$this._backCentre;
  set backCentre(String? backCentre) => _$this._backCentre = backCentre;

  String? _backRight;
  String? get backRight => _$this._backRight;
  set backRight(String? backRight) => _$this._backRight = backRight;

  GSeatInputBuilder();

  GSeatInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _frontLeft = $v.frontLeft;
      _middleLeft = $v.middleLeft;
      _middleCentre = $v.middleCentre;
      _middleRight = $v.middleRight;
      _backLeft = $v.backLeft;
      _backCentre = $v.backCentre;
      _backRight = $v.backRight;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GSeatInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GSeatInput;
  }

  @override
  void update(void Function(GSeatInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GSeatInput build() => _build();

  _$GSeatInput _build() {
    final _$result = _$v ??
        new _$GSeatInput._(
            id: id,
            frontLeft: frontLeft,
            middleLeft: middleLeft,
            middleCentre: middleCentre,
            middleRight: middleRight,
            backLeft: backLeft,
            backCentre: backCentre,
            backRight: backRight);
    replace(_$result);
    return _$result;
  }
}

class _$GCountryDtoInput extends GCountryDtoInput {
  @override
  final String name;
  @override
  final String code;
  @override
  final String abbrev;

  factory _$GCountryDtoInput(
          [void Function(GCountryDtoInputBuilder)? updates]) =>
      (new GCountryDtoInputBuilder()..update(updates))._build();

  _$GCountryDtoInput._(
      {required this.name, required this.code, required this.abbrev})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(name, r'GCountryDtoInput', 'name');
    BuiltValueNullFieldError.checkNotNull(code, r'GCountryDtoInput', 'code');
    BuiltValueNullFieldError.checkNotNull(
        abbrev, r'GCountryDtoInput', 'abbrev');
  }

  @override
  GCountryDtoInput rebuild(void Function(GCountryDtoInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCountryDtoInputBuilder toBuilder() =>
      new GCountryDtoInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCountryDtoInput &&
        name == other.name &&
        code == other.code &&
        abbrev == other.abbrev;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, name.hashCode);
    _$hash = $jc(_$hash, code.hashCode);
    _$hash = $jc(_$hash, abbrev.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCountryDtoInput')
          ..add('name', name)
          ..add('code', code)
          ..add('abbrev', abbrev))
        .toString();
  }
}

class GCountryDtoInputBuilder
    implements Builder<GCountryDtoInput, GCountryDtoInputBuilder> {
  _$GCountryDtoInput? _$v;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  String? _code;
  String? get code => _$this._code;
  set code(String? code) => _$this._code = code;

  String? _abbrev;
  String? get abbrev => _$this._abbrev;
  set abbrev(String? abbrev) => _$this._abbrev = abbrev;

  GCountryDtoInputBuilder();

  GCountryDtoInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _name = $v.name;
      _code = $v.code;
      _abbrev = $v.abbrev;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCountryDtoInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCountryDtoInput;
  }

  @override
  void update(void Function(GCountryDtoInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCountryDtoInput build() => _build();

  _$GCountryDtoInput _build() {
    final _$result = _$v ??
        new _$GCountryDtoInput._(
            name: BuiltValueNullFieldError.checkNotNull(
                name, r'GCountryDtoInput', 'name'),
            code: BuiltValueNullFieldError.checkNotNull(
                code, r'GCountryDtoInput', 'code'),
            abbrev: BuiltValueNullFieldError.checkNotNull(
                abbrev, r'GCountryDtoInput', 'abbrev'));
    replace(_$result);
    return _$result;
  }
}

class _$GUserRatingInput extends GUserRatingInput {
  @override
  final int id;
  @override
  final String? userThatRate;
  @override
  final String? userToRate;
  @override
  final double ratingValue;
  @override
  final int rideId;
  @override
  final String? levelOfSatisfaction;
  @override
  final String? comment;
  @override
  final GDateTime dateOfRating;
  @override
  final GTimeSpan timeOfRating;
  @override
  final GDateTime dateOfLastUpadte;
  @override
  final GTimeSpan timeOfLastUpdate;
  @override
  final GSafiriCarUserInput reviewer;

  factory _$GUserRatingInput(
          [void Function(GUserRatingInputBuilder)? updates]) =>
      (new GUserRatingInputBuilder()..update(updates))._build();

  _$GUserRatingInput._(
      {required this.id,
      this.userThatRate,
      this.userToRate,
      required this.ratingValue,
      required this.rideId,
      this.levelOfSatisfaction,
      this.comment,
      required this.dateOfRating,
      required this.timeOfRating,
      required this.dateOfLastUpadte,
      required this.timeOfLastUpdate,
      required this.reviewer})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(id, r'GUserRatingInput', 'id');
    BuiltValueNullFieldError.checkNotNull(
        ratingValue, r'GUserRatingInput', 'ratingValue');
    BuiltValueNullFieldError.checkNotNull(
        rideId, r'GUserRatingInput', 'rideId');
    BuiltValueNullFieldError.checkNotNull(
        dateOfRating, r'GUserRatingInput', 'dateOfRating');
    BuiltValueNullFieldError.checkNotNull(
        timeOfRating, r'GUserRatingInput', 'timeOfRating');
    BuiltValueNullFieldError.checkNotNull(
        dateOfLastUpadte, r'GUserRatingInput', 'dateOfLastUpadte');
    BuiltValueNullFieldError.checkNotNull(
        timeOfLastUpdate, r'GUserRatingInput', 'timeOfLastUpdate');
    BuiltValueNullFieldError.checkNotNull(
        reviewer, r'GUserRatingInput', 'reviewer');
  }

  @override
  GUserRatingInput rebuild(void Function(GUserRatingInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserRatingInputBuilder toBuilder() =>
      new GUserRatingInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserRatingInput &&
        id == other.id &&
        userThatRate == other.userThatRate &&
        userToRate == other.userToRate &&
        ratingValue == other.ratingValue &&
        rideId == other.rideId &&
        levelOfSatisfaction == other.levelOfSatisfaction &&
        comment == other.comment &&
        dateOfRating == other.dateOfRating &&
        timeOfRating == other.timeOfRating &&
        dateOfLastUpadte == other.dateOfLastUpadte &&
        timeOfLastUpdate == other.timeOfLastUpdate &&
        reviewer == other.reviewer;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, userThatRate.hashCode);
    _$hash = $jc(_$hash, userToRate.hashCode);
    _$hash = $jc(_$hash, ratingValue.hashCode);
    _$hash = $jc(_$hash, rideId.hashCode);
    _$hash = $jc(_$hash, levelOfSatisfaction.hashCode);
    _$hash = $jc(_$hash, comment.hashCode);
    _$hash = $jc(_$hash, dateOfRating.hashCode);
    _$hash = $jc(_$hash, timeOfRating.hashCode);
    _$hash = $jc(_$hash, dateOfLastUpadte.hashCode);
    _$hash = $jc(_$hash, timeOfLastUpdate.hashCode);
    _$hash = $jc(_$hash, reviewer.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUserRatingInput')
          ..add('id', id)
          ..add('userThatRate', userThatRate)
          ..add('userToRate', userToRate)
          ..add('ratingValue', ratingValue)
          ..add('rideId', rideId)
          ..add('levelOfSatisfaction', levelOfSatisfaction)
          ..add('comment', comment)
          ..add('dateOfRating', dateOfRating)
          ..add('timeOfRating', timeOfRating)
          ..add('dateOfLastUpadte', dateOfLastUpadte)
          ..add('timeOfLastUpdate', timeOfLastUpdate)
          ..add('reviewer', reviewer))
        .toString();
  }
}

class GUserRatingInputBuilder
    implements Builder<GUserRatingInput, GUserRatingInputBuilder> {
  _$GUserRatingInput? _$v;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _userThatRate;
  String? get userThatRate => _$this._userThatRate;
  set userThatRate(String? userThatRate) => _$this._userThatRate = userThatRate;

  String? _userToRate;
  String? get userToRate => _$this._userToRate;
  set userToRate(String? userToRate) => _$this._userToRate = userToRate;

  double? _ratingValue;
  double? get ratingValue => _$this._ratingValue;
  set ratingValue(double? ratingValue) => _$this._ratingValue = ratingValue;

  int? _rideId;
  int? get rideId => _$this._rideId;
  set rideId(int? rideId) => _$this._rideId = rideId;

  String? _levelOfSatisfaction;
  String? get levelOfSatisfaction => _$this._levelOfSatisfaction;
  set levelOfSatisfaction(String? levelOfSatisfaction) =>
      _$this._levelOfSatisfaction = levelOfSatisfaction;

  String? _comment;
  String? get comment => _$this._comment;
  set comment(String? comment) => _$this._comment = comment;

  GDateTimeBuilder? _dateOfRating;
  GDateTimeBuilder get dateOfRating =>
      _$this._dateOfRating ??= new GDateTimeBuilder();
  set dateOfRating(GDateTimeBuilder? dateOfRating) =>
      _$this._dateOfRating = dateOfRating;

  GTimeSpanBuilder? _timeOfRating;
  GTimeSpanBuilder get timeOfRating =>
      _$this._timeOfRating ??= new GTimeSpanBuilder();
  set timeOfRating(GTimeSpanBuilder? timeOfRating) =>
      _$this._timeOfRating = timeOfRating;

  GDateTimeBuilder? _dateOfLastUpadte;
  GDateTimeBuilder get dateOfLastUpadte =>
      _$this._dateOfLastUpadte ??= new GDateTimeBuilder();
  set dateOfLastUpadte(GDateTimeBuilder? dateOfLastUpadte) =>
      _$this._dateOfLastUpadte = dateOfLastUpadte;

  GTimeSpanBuilder? _timeOfLastUpdate;
  GTimeSpanBuilder get timeOfLastUpdate =>
      _$this._timeOfLastUpdate ??= new GTimeSpanBuilder();
  set timeOfLastUpdate(GTimeSpanBuilder? timeOfLastUpdate) =>
      _$this._timeOfLastUpdate = timeOfLastUpdate;

  GSafiriCarUserInputBuilder? _reviewer;
  GSafiriCarUserInputBuilder get reviewer =>
      _$this._reviewer ??= new GSafiriCarUserInputBuilder();
  set reviewer(GSafiriCarUserInputBuilder? reviewer) =>
      _$this._reviewer = reviewer;

  GUserRatingInputBuilder();

  GUserRatingInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _userThatRate = $v.userThatRate;
      _userToRate = $v.userToRate;
      _ratingValue = $v.ratingValue;
      _rideId = $v.rideId;
      _levelOfSatisfaction = $v.levelOfSatisfaction;
      _comment = $v.comment;
      _dateOfRating = $v.dateOfRating.toBuilder();
      _timeOfRating = $v.timeOfRating.toBuilder();
      _dateOfLastUpadte = $v.dateOfLastUpadte.toBuilder();
      _timeOfLastUpdate = $v.timeOfLastUpdate.toBuilder();
      _reviewer = $v.reviewer.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserRatingInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserRatingInput;
  }

  @override
  void update(void Function(GUserRatingInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUserRatingInput build() => _build();

  _$GUserRatingInput _build() {
    _$GUserRatingInput _$result;
    try {
      _$result = _$v ??
          new _$GUserRatingInput._(
              id: BuiltValueNullFieldError.checkNotNull(
                  id, r'GUserRatingInput', 'id'),
              userThatRate: userThatRate,
              userToRate: userToRate,
              ratingValue: BuiltValueNullFieldError.checkNotNull(
                  ratingValue, r'GUserRatingInput', 'ratingValue'),
              rideId: BuiltValueNullFieldError.checkNotNull(
                  rideId, r'GUserRatingInput', 'rideId'),
              levelOfSatisfaction: levelOfSatisfaction,
              comment: comment,
              dateOfRating: dateOfRating.build(),
              timeOfRating: timeOfRating.build(),
              dateOfLastUpadte: dateOfLastUpadte.build(),
              timeOfLastUpdate: timeOfLastUpdate.build(),
              reviewer: reviewer.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'dateOfRating';
        dateOfRating.build();
        _$failedField = 'timeOfRating';
        timeOfRating.build();
        _$failedField = 'dateOfLastUpadte';
        dateOfLastUpadte.build();
        _$failedField = 'timeOfLastUpdate';
        timeOfLastUpdate.build();
        _$failedField = 'reviewer';
        reviewer.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUserRatingInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GDeviceInput extends GDeviceInput {
  @override
  final int id;
  @override
  final String deviceRegToken;
  @override
  final GDateTime? createdOn;
  @override
  final String? createdBy;
  @override
  final GDateTime? lastModifiedOn;
  @override
  final String? lastModifiedBy;

  factory _$GDeviceInput([void Function(GDeviceInputBuilder)? updates]) =>
      (new GDeviceInputBuilder()..update(updates))._build();

  _$GDeviceInput._(
      {required this.id,
      required this.deviceRegToken,
      this.createdOn,
      this.createdBy,
      this.lastModifiedOn,
      this.lastModifiedBy})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(id, r'GDeviceInput', 'id');
    BuiltValueNullFieldError.checkNotNull(
        deviceRegToken, r'GDeviceInput', 'deviceRegToken');
  }

  @override
  GDeviceInput rebuild(void Function(GDeviceInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GDeviceInputBuilder toBuilder() => new GDeviceInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GDeviceInput &&
        id == other.id &&
        deviceRegToken == other.deviceRegToken &&
        createdOn == other.createdOn &&
        createdBy == other.createdBy &&
        lastModifiedOn == other.lastModifiedOn &&
        lastModifiedBy == other.lastModifiedBy;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, deviceRegToken.hashCode);
    _$hash = $jc(_$hash, createdOn.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, lastModifiedOn.hashCode);
    _$hash = $jc(_$hash, lastModifiedBy.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GDeviceInput')
          ..add('id', id)
          ..add('deviceRegToken', deviceRegToken)
          ..add('createdOn', createdOn)
          ..add('createdBy', createdBy)
          ..add('lastModifiedOn', lastModifiedOn)
          ..add('lastModifiedBy', lastModifiedBy))
        .toString();
  }
}

class GDeviceInputBuilder
    implements Builder<GDeviceInput, GDeviceInputBuilder> {
  _$GDeviceInput? _$v;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _deviceRegToken;
  String? get deviceRegToken => _$this._deviceRegToken;
  set deviceRegToken(String? deviceRegToken) =>
      _$this._deviceRegToken = deviceRegToken;

  GDateTimeBuilder? _createdOn;
  GDateTimeBuilder get createdOn =>
      _$this._createdOn ??= new GDateTimeBuilder();
  set createdOn(GDateTimeBuilder? createdOn) => _$this._createdOn = createdOn;

  String? _createdBy;
  String? get createdBy => _$this._createdBy;
  set createdBy(String? createdBy) => _$this._createdBy = createdBy;

  GDateTimeBuilder? _lastModifiedOn;
  GDateTimeBuilder get lastModifiedOn =>
      _$this._lastModifiedOn ??= new GDateTimeBuilder();
  set lastModifiedOn(GDateTimeBuilder? lastModifiedOn) =>
      _$this._lastModifiedOn = lastModifiedOn;

  String? _lastModifiedBy;
  String? get lastModifiedBy => _$this._lastModifiedBy;
  set lastModifiedBy(String? lastModifiedBy) =>
      _$this._lastModifiedBy = lastModifiedBy;

  GDeviceInputBuilder();

  GDeviceInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _deviceRegToken = $v.deviceRegToken;
      _createdOn = $v.createdOn?.toBuilder();
      _createdBy = $v.createdBy;
      _lastModifiedOn = $v.lastModifiedOn?.toBuilder();
      _lastModifiedBy = $v.lastModifiedBy;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GDeviceInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GDeviceInput;
  }

  @override
  void update(void Function(GDeviceInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GDeviceInput build() => _build();

  _$GDeviceInput _build() {
    _$GDeviceInput _$result;
    try {
      _$result = _$v ??
          new _$GDeviceInput._(
              id: BuiltValueNullFieldError.checkNotNull(
                  id, r'GDeviceInput', 'id'),
              deviceRegToken: BuiltValueNullFieldError.checkNotNull(
                  deviceRegToken, r'GDeviceInput', 'deviceRegToken'),
              createdOn: _createdOn?.build(),
              createdBy: createdBy,
              lastModifiedOn: _lastModifiedOn?.build(),
              lastModifiedBy: lastModifiedBy);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'createdOn';
        _createdOn?.build();

        _$failedField = 'lastModifiedOn';
        _lastModifiedOn?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GDeviceInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GLocationInput extends GLocationInput {
  @override
  final int id;
  @override
  final String town;
  @override
  final bool isPopular;
  @override
  final GCountryInput country;
  @override
  final GDateTime? createdOn;
  @override
  final String? createdBy;
  @override
  final GDateTime? lastModifiedOn;
  @override
  final String? lastModifiedBy;

  factory _$GLocationInput([void Function(GLocationInputBuilder)? updates]) =>
      (new GLocationInputBuilder()..update(updates))._build();

  _$GLocationInput._(
      {required this.id,
      required this.town,
      required this.isPopular,
      required this.country,
      this.createdOn,
      this.createdBy,
      this.lastModifiedOn,
      this.lastModifiedBy})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(id, r'GLocationInput', 'id');
    BuiltValueNullFieldError.checkNotNull(town, r'GLocationInput', 'town');
    BuiltValueNullFieldError.checkNotNull(
        isPopular, r'GLocationInput', 'isPopular');
    BuiltValueNullFieldError.checkNotNull(
        country, r'GLocationInput', 'country');
  }

  @override
  GLocationInput rebuild(void Function(GLocationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GLocationInputBuilder toBuilder() =>
      new GLocationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GLocationInput &&
        id == other.id &&
        town == other.town &&
        isPopular == other.isPopular &&
        country == other.country &&
        createdOn == other.createdOn &&
        createdBy == other.createdBy &&
        lastModifiedOn == other.lastModifiedOn &&
        lastModifiedBy == other.lastModifiedBy;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, town.hashCode);
    _$hash = $jc(_$hash, isPopular.hashCode);
    _$hash = $jc(_$hash, country.hashCode);
    _$hash = $jc(_$hash, createdOn.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, lastModifiedOn.hashCode);
    _$hash = $jc(_$hash, lastModifiedBy.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GLocationInput')
          ..add('id', id)
          ..add('town', town)
          ..add('isPopular', isPopular)
          ..add('country', country)
          ..add('createdOn', createdOn)
          ..add('createdBy', createdBy)
          ..add('lastModifiedOn', lastModifiedOn)
          ..add('lastModifiedBy', lastModifiedBy))
        .toString();
  }
}

class GLocationInputBuilder
    implements Builder<GLocationInput, GLocationInputBuilder> {
  _$GLocationInput? _$v;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _town;
  String? get town => _$this._town;
  set town(String? town) => _$this._town = town;

  bool? _isPopular;
  bool? get isPopular => _$this._isPopular;
  set isPopular(bool? isPopular) => _$this._isPopular = isPopular;

  GCountryInputBuilder? _country;
  GCountryInputBuilder get country =>
      _$this._country ??= new GCountryInputBuilder();
  set country(GCountryInputBuilder? country) => _$this._country = country;

  GDateTimeBuilder? _createdOn;
  GDateTimeBuilder get createdOn =>
      _$this._createdOn ??= new GDateTimeBuilder();
  set createdOn(GDateTimeBuilder? createdOn) => _$this._createdOn = createdOn;

  String? _createdBy;
  String? get createdBy => _$this._createdBy;
  set createdBy(String? createdBy) => _$this._createdBy = createdBy;

  GDateTimeBuilder? _lastModifiedOn;
  GDateTimeBuilder get lastModifiedOn =>
      _$this._lastModifiedOn ??= new GDateTimeBuilder();
  set lastModifiedOn(GDateTimeBuilder? lastModifiedOn) =>
      _$this._lastModifiedOn = lastModifiedOn;

  String? _lastModifiedBy;
  String? get lastModifiedBy => _$this._lastModifiedBy;
  set lastModifiedBy(String? lastModifiedBy) =>
      _$this._lastModifiedBy = lastModifiedBy;

  GLocationInputBuilder();

  GLocationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _town = $v.town;
      _isPopular = $v.isPopular;
      _country = $v.country.toBuilder();
      _createdOn = $v.createdOn?.toBuilder();
      _createdBy = $v.createdBy;
      _lastModifiedOn = $v.lastModifiedOn?.toBuilder();
      _lastModifiedBy = $v.lastModifiedBy;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GLocationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GLocationInput;
  }

  @override
  void update(void Function(GLocationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GLocationInput build() => _build();

  _$GLocationInput _build() {
    _$GLocationInput _$result;
    try {
      _$result = _$v ??
          new _$GLocationInput._(
              id: BuiltValueNullFieldError.checkNotNull(
                  id, r'GLocationInput', 'id'),
              town: BuiltValueNullFieldError.checkNotNull(
                  town, r'GLocationInput', 'town'),
              isPopular: BuiltValueNullFieldError.checkNotNull(
                  isPopular, r'GLocationInput', 'isPopular'),
              country: country.build(),
              createdOn: _createdOn?.build(),
              createdBy: createdBy,
              lastModifiedOn: _lastModifiedOn?.build(),
              lastModifiedBy: lastModifiedBy);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'country';
        country.build();
        _$failedField = 'createdOn';
        _createdOn?.build();

        _$failedField = 'lastModifiedOn';
        _lastModifiedOn?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GLocationInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GRideTransactionInput extends GRideTransactionInput {
  @override
  final String? id;
  @override
  final String? phoneNumber;
  @override
  final double amount;
  @override
  final bool isReversed;
  @override
  final String? status;
  @override
  final int bookedRideId;
  @override
  final String? passengerId;
  @override
  final String? driverId;
  @override
  final String? transactionCode;
  @override
  final String? merchantRequestId;
  @override
  final String? checkoutRequestId;
  @override
  final GDateTime? transactionDate;
  @override
  final GTimeSpan? transactionTime;
  @override
  final GDateTime approvedDateTime;
  @override
  final String? transactionID;
  @override
  final String? conversationID;
  @override
  final String? originatorConversationID;
  @override
  final String? reversedDate;
  @override
  final String? reversedTime;
  @override
  final String? reseaonForReversal;
  @override
  final String? seatsStr;
  @override
  final String? paymentMethod;
  @override
  final String? exactDropOffLocation;

  factory _$GRideTransactionInput(
          [void Function(GRideTransactionInputBuilder)? updates]) =>
      (new GRideTransactionInputBuilder()..update(updates))._build();

  _$GRideTransactionInput._(
      {this.id,
      this.phoneNumber,
      required this.amount,
      required this.isReversed,
      this.status,
      required this.bookedRideId,
      this.passengerId,
      this.driverId,
      this.transactionCode,
      this.merchantRequestId,
      this.checkoutRequestId,
      this.transactionDate,
      this.transactionTime,
      required this.approvedDateTime,
      this.transactionID,
      this.conversationID,
      this.originatorConversationID,
      this.reversedDate,
      this.reversedTime,
      this.reseaonForReversal,
      this.seatsStr,
      this.paymentMethod,
      this.exactDropOffLocation})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        amount, r'GRideTransactionInput', 'amount');
    BuiltValueNullFieldError.checkNotNull(
        isReversed, r'GRideTransactionInput', 'isReversed');
    BuiltValueNullFieldError.checkNotNull(
        bookedRideId, r'GRideTransactionInput', 'bookedRideId');
    BuiltValueNullFieldError.checkNotNull(
        approvedDateTime, r'GRideTransactionInput', 'approvedDateTime');
  }

  @override
  GRideTransactionInput rebuild(
          void Function(GRideTransactionInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GRideTransactionInputBuilder toBuilder() =>
      new GRideTransactionInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GRideTransactionInput &&
        id == other.id &&
        phoneNumber == other.phoneNumber &&
        amount == other.amount &&
        isReversed == other.isReversed &&
        status == other.status &&
        bookedRideId == other.bookedRideId &&
        passengerId == other.passengerId &&
        driverId == other.driverId &&
        transactionCode == other.transactionCode &&
        merchantRequestId == other.merchantRequestId &&
        checkoutRequestId == other.checkoutRequestId &&
        transactionDate == other.transactionDate &&
        transactionTime == other.transactionTime &&
        approvedDateTime == other.approvedDateTime &&
        transactionID == other.transactionID &&
        conversationID == other.conversationID &&
        originatorConversationID == other.originatorConversationID &&
        reversedDate == other.reversedDate &&
        reversedTime == other.reversedTime &&
        reseaonForReversal == other.reseaonForReversal &&
        seatsStr == other.seatsStr &&
        paymentMethod == other.paymentMethod &&
        exactDropOffLocation == other.exactDropOffLocation;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, phoneNumber.hashCode);
    _$hash = $jc(_$hash, amount.hashCode);
    _$hash = $jc(_$hash, isReversed.hashCode);
    _$hash = $jc(_$hash, status.hashCode);
    _$hash = $jc(_$hash, bookedRideId.hashCode);
    _$hash = $jc(_$hash, passengerId.hashCode);
    _$hash = $jc(_$hash, driverId.hashCode);
    _$hash = $jc(_$hash, transactionCode.hashCode);
    _$hash = $jc(_$hash, merchantRequestId.hashCode);
    _$hash = $jc(_$hash, checkoutRequestId.hashCode);
    _$hash = $jc(_$hash, transactionDate.hashCode);
    _$hash = $jc(_$hash, transactionTime.hashCode);
    _$hash = $jc(_$hash, approvedDateTime.hashCode);
    _$hash = $jc(_$hash, transactionID.hashCode);
    _$hash = $jc(_$hash, conversationID.hashCode);
    _$hash = $jc(_$hash, originatorConversationID.hashCode);
    _$hash = $jc(_$hash, reversedDate.hashCode);
    _$hash = $jc(_$hash, reversedTime.hashCode);
    _$hash = $jc(_$hash, reseaonForReversal.hashCode);
    _$hash = $jc(_$hash, seatsStr.hashCode);
    _$hash = $jc(_$hash, paymentMethod.hashCode);
    _$hash = $jc(_$hash, exactDropOffLocation.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GRideTransactionInput')
          ..add('id', id)
          ..add('phoneNumber', phoneNumber)
          ..add('amount', amount)
          ..add('isReversed', isReversed)
          ..add('status', status)
          ..add('bookedRideId', bookedRideId)
          ..add('passengerId', passengerId)
          ..add('driverId', driverId)
          ..add('transactionCode', transactionCode)
          ..add('merchantRequestId', merchantRequestId)
          ..add('checkoutRequestId', checkoutRequestId)
          ..add('transactionDate', transactionDate)
          ..add('transactionTime', transactionTime)
          ..add('approvedDateTime', approvedDateTime)
          ..add('transactionID', transactionID)
          ..add('conversationID', conversationID)
          ..add('originatorConversationID', originatorConversationID)
          ..add('reversedDate', reversedDate)
          ..add('reversedTime', reversedTime)
          ..add('reseaonForReversal', reseaonForReversal)
          ..add('seatsStr', seatsStr)
          ..add('paymentMethod', paymentMethod)
          ..add('exactDropOffLocation', exactDropOffLocation))
        .toString();
  }
}

class GRideTransactionInputBuilder
    implements Builder<GRideTransactionInput, GRideTransactionInputBuilder> {
  _$GRideTransactionInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _phoneNumber;
  String? get phoneNumber => _$this._phoneNumber;
  set phoneNumber(String? phoneNumber) => _$this._phoneNumber = phoneNumber;

  double? _amount;
  double? get amount => _$this._amount;
  set amount(double? amount) => _$this._amount = amount;

  bool? _isReversed;
  bool? get isReversed => _$this._isReversed;
  set isReversed(bool? isReversed) => _$this._isReversed = isReversed;

  String? _status;
  String? get status => _$this._status;
  set status(String? status) => _$this._status = status;

  int? _bookedRideId;
  int? get bookedRideId => _$this._bookedRideId;
  set bookedRideId(int? bookedRideId) => _$this._bookedRideId = bookedRideId;

  String? _passengerId;
  String? get passengerId => _$this._passengerId;
  set passengerId(String? passengerId) => _$this._passengerId = passengerId;

  String? _driverId;
  String? get driverId => _$this._driverId;
  set driverId(String? driverId) => _$this._driverId = driverId;

  String? _transactionCode;
  String? get transactionCode => _$this._transactionCode;
  set transactionCode(String? transactionCode) =>
      _$this._transactionCode = transactionCode;

  String? _merchantRequestId;
  String? get merchantRequestId => _$this._merchantRequestId;
  set merchantRequestId(String? merchantRequestId) =>
      _$this._merchantRequestId = merchantRequestId;

  String? _checkoutRequestId;
  String? get checkoutRequestId => _$this._checkoutRequestId;
  set checkoutRequestId(String? checkoutRequestId) =>
      _$this._checkoutRequestId = checkoutRequestId;

  GDateTimeBuilder? _transactionDate;
  GDateTimeBuilder get transactionDate =>
      _$this._transactionDate ??= new GDateTimeBuilder();
  set transactionDate(GDateTimeBuilder? transactionDate) =>
      _$this._transactionDate = transactionDate;

  GTimeSpanBuilder? _transactionTime;
  GTimeSpanBuilder get transactionTime =>
      _$this._transactionTime ??= new GTimeSpanBuilder();
  set transactionTime(GTimeSpanBuilder? transactionTime) =>
      _$this._transactionTime = transactionTime;

  GDateTimeBuilder? _approvedDateTime;
  GDateTimeBuilder get approvedDateTime =>
      _$this._approvedDateTime ??= new GDateTimeBuilder();
  set approvedDateTime(GDateTimeBuilder? approvedDateTime) =>
      _$this._approvedDateTime = approvedDateTime;

  String? _transactionID;
  String? get transactionID => _$this._transactionID;
  set transactionID(String? transactionID) =>
      _$this._transactionID = transactionID;

  String? _conversationID;
  String? get conversationID => _$this._conversationID;
  set conversationID(String? conversationID) =>
      _$this._conversationID = conversationID;

  String? _originatorConversationID;
  String? get originatorConversationID => _$this._originatorConversationID;
  set originatorConversationID(String? originatorConversationID) =>
      _$this._originatorConversationID = originatorConversationID;

  String? _reversedDate;
  String? get reversedDate => _$this._reversedDate;
  set reversedDate(String? reversedDate) => _$this._reversedDate = reversedDate;

  String? _reversedTime;
  String? get reversedTime => _$this._reversedTime;
  set reversedTime(String? reversedTime) => _$this._reversedTime = reversedTime;

  String? _reseaonForReversal;
  String? get reseaonForReversal => _$this._reseaonForReversal;
  set reseaonForReversal(String? reseaonForReversal) =>
      _$this._reseaonForReversal = reseaonForReversal;

  String? _seatsStr;
  String? get seatsStr => _$this._seatsStr;
  set seatsStr(String? seatsStr) => _$this._seatsStr = seatsStr;

  String? _paymentMethod;
  String? get paymentMethod => _$this._paymentMethod;
  set paymentMethod(String? paymentMethod) =>
      _$this._paymentMethod = paymentMethod;

  String? _exactDropOffLocation;
  String? get exactDropOffLocation => _$this._exactDropOffLocation;
  set exactDropOffLocation(String? exactDropOffLocation) =>
      _$this._exactDropOffLocation = exactDropOffLocation;

  GRideTransactionInputBuilder();

  GRideTransactionInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _phoneNumber = $v.phoneNumber;
      _amount = $v.amount;
      _isReversed = $v.isReversed;
      _status = $v.status;
      _bookedRideId = $v.bookedRideId;
      _passengerId = $v.passengerId;
      _driverId = $v.driverId;
      _transactionCode = $v.transactionCode;
      _merchantRequestId = $v.merchantRequestId;
      _checkoutRequestId = $v.checkoutRequestId;
      _transactionDate = $v.transactionDate?.toBuilder();
      _transactionTime = $v.transactionTime?.toBuilder();
      _approvedDateTime = $v.approvedDateTime.toBuilder();
      _transactionID = $v.transactionID;
      _conversationID = $v.conversationID;
      _originatorConversationID = $v.originatorConversationID;
      _reversedDate = $v.reversedDate;
      _reversedTime = $v.reversedTime;
      _reseaonForReversal = $v.reseaonForReversal;
      _seatsStr = $v.seatsStr;
      _paymentMethod = $v.paymentMethod;
      _exactDropOffLocation = $v.exactDropOffLocation;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GRideTransactionInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GRideTransactionInput;
  }

  @override
  void update(void Function(GRideTransactionInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GRideTransactionInput build() => _build();

  _$GRideTransactionInput _build() {
    _$GRideTransactionInput _$result;
    try {
      _$result = _$v ??
          new _$GRideTransactionInput._(
              id: id,
              phoneNumber: phoneNumber,
              amount: BuiltValueNullFieldError.checkNotNull(
                  amount, r'GRideTransactionInput', 'amount'),
              isReversed: BuiltValueNullFieldError.checkNotNull(
                  isReversed, r'GRideTransactionInput', 'isReversed'),
              status: status,
              bookedRideId: BuiltValueNullFieldError.checkNotNull(
                  bookedRideId, r'GRideTransactionInput', 'bookedRideId'),
              passengerId: passengerId,
              driverId: driverId,
              transactionCode: transactionCode,
              merchantRequestId: merchantRequestId,
              checkoutRequestId: checkoutRequestId,
              transactionDate: _transactionDate?.build(),
              transactionTime: _transactionTime?.build(),
              approvedDateTime: approvedDateTime.build(),
              transactionID: transactionID,
              conversationID: conversationID,
              originatorConversationID: originatorConversationID,
              reversedDate: reversedDate,
              reversedTime: reversedTime,
              reseaonForReversal: reseaonForReversal,
              seatsStr: seatsStr,
              paymentMethod: paymentMethod,
              exactDropOffLocation: exactDropOffLocation);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'transactionDate';
        _transactionDate?.build();
        _$failedField = 'transactionTime';
        _transactionTime?.build();
        _$failedField = 'approvedDateTime';
        approvedDateTime.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GRideTransactionInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserRidesInput extends GUserRidesInput {
  @override
  final String? userId;
  @override
  final GSafiriCarUserInput? user;
  @override
  final int rideId;
  @override
  final GRideInput? ride;
  @override
  final BuiltList<GRideTransactionInput>? transactions;

  factory _$GUserRidesInput([void Function(GUserRidesInputBuilder)? updates]) =>
      (new GUserRidesInputBuilder()..update(updates))._build();

  _$GUserRidesInput._(
      {this.userId,
      this.user,
      required this.rideId,
      this.ride,
      this.transactions})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(rideId, r'GUserRidesInput', 'rideId');
  }

  @override
  GUserRidesInput rebuild(void Function(GUserRidesInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserRidesInputBuilder toBuilder() =>
      new GUserRidesInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserRidesInput &&
        userId == other.userId &&
        user == other.user &&
        rideId == other.rideId &&
        ride == other.ride &&
        transactions == other.transactions;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, userId.hashCode);
    _$hash = $jc(_$hash, user.hashCode);
    _$hash = $jc(_$hash, rideId.hashCode);
    _$hash = $jc(_$hash, ride.hashCode);
    _$hash = $jc(_$hash, transactions.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUserRidesInput')
          ..add('userId', userId)
          ..add('user', user)
          ..add('rideId', rideId)
          ..add('ride', ride)
          ..add('transactions', transactions))
        .toString();
  }
}

class GUserRidesInputBuilder
    implements Builder<GUserRidesInput, GUserRidesInputBuilder> {
  _$GUserRidesInput? _$v;

  String? _userId;
  String? get userId => _$this._userId;
  set userId(String? userId) => _$this._userId = userId;

  GSafiriCarUserInputBuilder? _user;
  GSafiriCarUserInputBuilder get user =>
      _$this._user ??= new GSafiriCarUserInputBuilder();
  set user(GSafiriCarUserInputBuilder? user) => _$this._user = user;

  int? _rideId;
  int? get rideId => _$this._rideId;
  set rideId(int? rideId) => _$this._rideId = rideId;

  GRideInputBuilder? _ride;
  GRideInputBuilder get ride => _$this._ride ??= new GRideInputBuilder();
  set ride(GRideInputBuilder? ride) => _$this._ride = ride;

  ListBuilder<GRideTransactionInput>? _transactions;
  ListBuilder<GRideTransactionInput> get transactions =>
      _$this._transactions ??= new ListBuilder<GRideTransactionInput>();
  set transactions(ListBuilder<GRideTransactionInput>? transactions) =>
      _$this._transactions = transactions;

  GUserRidesInputBuilder();

  GUserRidesInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _userId = $v.userId;
      _user = $v.user?.toBuilder();
      _rideId = $v.rideId;
      _ride = $v.ride?.toBuilder();
      _transactions = $v.transactions?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserRidesInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserRidesInput;
  }

  @override
  void update(void Function(GUserRidesInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUserRidesInput build() => _build();

  _$GUserRidesInput _build() {
    _$GUserRidesInput _$result;
    try {
      _$result = _$v ??
          new _$GUserRidesInput._(
              userId: userId,
              user: _user?.build(),
              rideId: BuiltValueNullFieldError.checkNotNull(
                  rideId, r'GUserRidesInput', 'rideId'),
              ride: _ride?.build(),
              transactions: _transactions?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'user';
        _user?.build();

        _$failedField = 'ride';
        _ride?.build();
        _$failedField = 'transactions';
        _transactions?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUserRidesInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCountryInput extends GCountryInput {
  @override
  final int id;
  @override
  final String name;
  @override
  final String code;
  @override
  final String abbrev;

  factory _$GCountryInput([void Function(GCountryInputBuilder)? updates]) =>
      (new GCountryInputBuilder()..update(updates))._build();

  _$GCountryInput._(
      {required this.id,
      required this.name,
      required this.code,
      required this.abbrev})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(id, r'GCountryInput', 'id');
    BuiltValueNullFieldError.checkNotNull(name, r'GCountryInput', 'name');
    BuiltValueNullFieldError.checkNotNull(code, r'GCountryInput', 'code');
    BuiltValueNullFieldError.checkNotNull(abbrev, r'GCountryInput', 'abbrev');
  }

  @override
  GCountryInput rebuild(void Function(GCountryInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCountryInputBuilder toBuilder() => new GCountryInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCountryInput &&
        id == other.id &&
        name == other.name &&
        code == other.code &&
        abbrev == other.abbrev;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, name.hashCode);
    _$hash = $jc(_$hash, code.hashCode);
    _$hash = $jc(_$hash, abbrev.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCountryInput')
          ..add('id', id)
          ..add('name', name)
          ..add('code', code)
          ..add('abbrev', abbrev))
        .toString();
  }
}

class GCountryInputBuilder
    implements Builder<GCountryInput, GCountryInputBuilder> {
  _$GCountryInput? _$v;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  String? _code;
  String? get code => _$this._code;
  set code(String? code) => _$this._code = code;

  String? _abbrev;
  String? get abbrev => _$this._abbrev;
  set abbrev(String? abbrev) => _$this._abbrev = abbrev;

  GCountryInputBuilder();

  GCountryInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _name = $v.name;
      _code = $v.code;
      _abbrev = $v.abbrev;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCountryInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCountryInput;
  }

  @override
  void update(void Function(GCountryInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCountryInput build() => _build();

  _$GCountryInput _build() {
    final _$result = _$v ??
        new _$GCountryInput._(
            id: BuiltValueNullFieldError.checkNotNull(
                id, r'GCountryInput', 'id'),
            name: BuiltValueNullFieldError.checkNotNull(
                name, r'GCountryInput', 'name'),
            code: BuiltValueNullFieldError.checkNotNull(
                code, r'GCountryInput', 'code'),
            abbrev: BuiltValueNullFieldError.checkNotNull(
                abbrev, r'GCountryInput', 'abbrev'));
    replace(_$result);
    return _$result;
  }
}

// ignore_for_file: deprecated_member_use_from_same_package,type=lint
